extern "C" __mlu_global__ void conv2dnchw(float *input, float *kernel,
                                          float *output) {
  const int BS = 16;
  const int IC = 128;
  const int IH = 8;
  const int IW = 8;
  const int KH = 2;
  const int KW = 2;
  const int OC = 64;
  const int STRIDE = 2;

  const int OH = (IH - KH) / STRIDE + 1; // 4
  const int OW = (IW - KW) / STRIDE + 1; // 4

  const int total = BS * OC * OH * OW;
  const int num_threads = 16; // 4 clusters * 4 cores
  int tid = clusterId * 4 + coreId;

  for (int idx = tid; idx < total; idx += num_threads) {
    int tmp = idx;
    int ow = tmp % OW;
    tmp /= OW;
    int oh = tmp % OH;
    tmp /= OH;
    int oc = tmp % OC;
    tmp /= OC;
    int bs = tmp;

    float sum = 0.0f;

    for (int ic = 0; ic < IC; ++ic) {
      for (int kh = 0; kh < KH; ++kh) {
        for (int kw = 0; kw < KW; ++kw) {
          int ih = oh * STRIDE + kh;
          int iw = ow * STRIDE + kw;

          float in_val = input[bs * IC * IH * IW + ic * IH * IW + ih * IW + iw];

          float kernel_val =
              kernel[oc * IC * KH * KW + ic * KH * KW + kh * KW + kw];

          sum += in_val * kernel_val;
        }
      }
    }

    output[bs * OC * OH * OW + oc * OH * OW + oh * OW + ow] = sum;
  }
}

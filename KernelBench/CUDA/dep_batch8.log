===========================
2025-07-29 06:17:11 [INFO] Logging directory: /tmp/tmpv1ebrgce/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2KNo valid schedule found!
===========================
2025-07-29 06:18:30 [INFO] Logging directory: /tmp/tmp33t5khf7/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:21:13 [DEBUG] XGB iter   0: tr-p-rmse: 0.470348	tr-a-peak@32: 0.929111	tr-rmse: 0.430868	tr-rmse: 0.430868
2025-07-29 06:21:13 [DEBUG] XGB iter  25: tr-p-rmse: 0.028543	tr-a-peak@32: 1.000000	tr-rmse: 0.470903	tr-rmse: 0.470903
2025-07-29 06:21:13 [DEBUG] XGB iter  50: tr-p-rmse: 0.028543	tr-a-peak@32: 1.000000	tr-rmse: 0.470903	tr-rmse: 0.470903
2025-07-29 06:21:13 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.02854	tr-a-peak@32:1.00000	tr-rmse:0.47090	tr-rmse:0.47090 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:23:24 [DEBUG] XGB validation: p-rmse: 0.302182	a-peak@32: 0.968324
2025-07-29 06:23:24 [DEBUG] XGB iter   0: tr-p-rmse: 0.469884	tr-a-peak@32: 0.788227	tr-rmse: 0.413227	tr-rmse: 0.413227
2025-07-29 06:23:24 [DEBUG] XGB iter  25: tr-p-rmse: 0.036103	tr-a-peak@32: 1.000000	tr-rmse: 0.455490	tr-rmse: 0.455490
2025-07-29 06:23:24 [DEBUG] XGB iter  50: tr-p-rmse: 0.036103	tr-a-peak@32: 1.000000	tr-rmse: 0.455490	tr-rmse: 0.455490
2025-07-29 06:23:24 [DEBUG] XGB stopped. Best iteration: [10] tr-p-rmse:0.03610	tr-a-peak@32:1.00000	tr-rmse:0.45549	tr-rmse:0.45549 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:26:08 [DEBUG] XGB validation: p-rmse: 0.421532	a-peak@32: 0.791643
2025-07-29 06:26:08 [DEBUG] XGB iter   0: tr-p-rmse: 0.436614	tr-a-peak@32: 0.834741	tr-rmse: 0.414039	tr-rmse: 0.414039
2025-07-29 06:26:08 [DEBUG] XGB iter  25: tr-p-rmse: 0.042462	tr-a-peak@32: 0.998134	tr-rmse: 0.463122	tr-rmse: 0.463122
2025-07-29 06:26:08 [DEBUG] XGB iter  50: tr-p-rmse: 0.042462	tr-a-peak@32: 0.998134	tr-rmse: 0.463122	tr-rmse: 0.463122
2025-07-29 06:26:08 [DEBUG] XGB stopped. Best iteration: [10] tr-p-rmse:0.04246	tr-a-peak@32:0.99813	tr-rmse:0.46312	tr-rmse:0.46312 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:28:54 [DEBUG] XGB validation: p-rmse: 0.307304	a-peak@32: 0.968537
2025-07-29 06:28:55 [DEBUG] XGB iter   0: tr-p-rmse: 0.409355	tr-a-peak@32: 0.534686	tr-rmse: 0.252117	tr-rmse: 0.252117
2025-07-29 06:28:55 [DEBUG] XGB iter  25: tr-p-rmse: 0.043268	tr-a-peak@32: 1.000000	tr-rmse: 0.313570	tr-rmse: 0.313570
2025-07-29 06:28:55 [DEBUG] XGB iter  50: tr-p-rmse: 0.043268	tr-a-peak@32: 1.000000	tr-rmse: 0.313570	tr-rmse: 0.313570
2025-07-29 06:28:55 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.04327	tr-a-peak@32:1.00000	tr-rmse:0.31357	tr-rmse:0.31357 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:31:52 [DEBUG] XGB validation: p-rmse: 0.253485	a-peak@32: 0.888179
2025-07-29 06:31:52 [DEBUG] XGB iter   0: tr-p-rmse: 0.397491	tr-a-peak@32: 0.520438	tr-rmse: 0.244505	tr-rmse: 0.244505
2025-07-29 06:31:52 [DEBUG] XGB iter  25: tr-p-rmse: 0.054870	tr-a-peak@32: 1.000000	tr-rmse: 0.310374	tr-rmse: 0.310374
2025-07-29 06:31:53 [DEBUG] XGB iter  50: tr-p-rmse: 0.054870	tr-a-peak@32: 1.000000	tr-rmse: 0.310374	tr-rmse: 0.310374
2025-07-29 06:31:53 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.05487	tr-a-peak@32:1.00000	tr-rmse:0.31037	tr-rmse:0.31037 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:34:29 [DEBUG] XGB validation: p-rmse: 0.141394	a-peak@32: 0.844377
2025-07-29 06:34:29 [DEBUG] XGB iter   0: tr-p-rmse: 0.388688	tr-a-peak@32: 0.565243	tr-rmse: 0.240263	tr-rmse: 0.240263
2025-07-29 06:34:29 [DEBUG] XGB iter  25: tr-p-rmse: 0.056889	tr-a-peak@32: 1.000000	tr-rmse: 0.308252	tr-rmse: 0.308252
2025-07-29 06:34:29 [DEBUG] XGB iter  50: tr-p-rmse: 0.056889	tr-a-peak@32: 1.000000	tr-rmse: 0.308252	tr-rmse: 0.308252
2025-07-29 06:34:29 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.05689	tr-a-peak@32:1.00000	tr-rmse:0.30825	tr-rmse:0.30825 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:37:02 [DEBUG] XGB validation: p-rmse: 0.106292	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:38:27 [DEBUG] XGB validation: p-rmse: 0.084775	a-peak@32: 0.947956
2025-07-29 06:38:27 [DEBUG] XGB iter   0: tr-p-rmse: 0.378959	tr-a-peak@32: 0.534136	tr-rmse: 0.244909	tr-rmse: 0.244909
2025-07-29 06:38:27 [DEBUG] XGB iter  25: tr-p-rmse: 0.058788	tr-a-peak@32: 1.000000	tr-rmse: 0.314603	tr-rmse: 0.314603
2025-07-29 06:38:28 [DEBUG] XGB iter  50: tr-p-rmse: 0.058788	tr-a-peak@32: 1.000000	tr-rmse: 0.314603	tr-rmse: 0.314603
2025-07-29 06:38:28 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.05879	tr-a-peak@32:1.00000	tr-rmse:0.31460	tr-rmse:0.31460 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:39:55 [DEBUG] XGB validation: p-rmse: 0.144489	a-peak@32: 0.979790
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:42:23 [DEBUG] XGB validation: p-rmse: 0.186089	a-peak@32: 0.727069
2025-07-29 06:42:23 [DEBUG] XGB iter   0: tr-p-rmse: 0.378505	tr-a-peak@32: 0.496966	tr-rmse: 0.253737	tr-rmse: 0.253737
2025-07-29 06:42:23 [DEBUG] XGB iter  25: tr-p-rmse: 0.062241	tr-a-peak@32: 0.938563	tr-rmse: 0.322332	tr-rmse: 0.322332
2025-07-29 06:42:23 [DEBUG] XGB iter  50: tr-p-rmse: 0.062241	tr-a-peak@32: 0.938563	tr-rmse: 0.322332	tr-rmse: 0.322332
2025-07-29 06:42:23 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.06224	tr-a-peak@32:0.93856	tr-rmse:0.32233	tr-rmse:0.32233 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:44:58 [DEBUG] XGB validation: p-rmse: 0.128044	a-peak@32: 0.996864
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:47:33 [DEBUG] XGB validation: p-rmse: 0.160390	a-peak@32: 0.766996
2025-07-29 06:47:33 [DEBUG] XGB iter   0: tr-p-rmse: 0.374592	tr-a-peak@32: 0.468940	tr-rmse: 0.256776	tr-rmse: 0.256776
2025-07-29 06:47:33 [DEBUG] XGB iter  25: tr-p-rmse: 0.063740	tr-a-peak@32: 0.920132	tr-rmse: 0.325875	tr-rmse: 0.325875
2025-07-29 06:47:33 [DEBUG] XGB iter  50: tr-p-rmse: 0.063740	tr-a-peak@32: 0.920132	tr-rmse: 0.325875	tr-rmse: 0.325875
2025-07-29 06:47:33 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.06374	tr-a-peak@32:0.92013	tr-rmse:0.32588	tr-rmse:0.32588 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:50:17 [DEBUG] XGB validation: p-rmse: 0.156553	a-peak@32: 0.515950
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:53:03 [DEBUG] XGB validation: p-rmse: 0.161613	a-peak@32: 0.936780
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:55:42 [DEBUG] XGB validation: p-rmse: 0.139270	a-peak@32: 0.839227
2025-07-29 06:55:42 [DEBUG] XGB iter   0: tr-p-rmse: 0.374052	tr-a-peak@32: 0.397006	tr-rmse: 0.228447	tr-rmse: 0.228447
2025-07-29 06:55:42 [DEBUG] XGB iter  25: tr-p-rmse: 0.063865	tr-a-peak@32: 0.982210	tr-rmse: 0.299370	tr-rmse: 0.299370
2025-07-29 06:55:42 [DEBUG] XGB iter  50: tr-p-rmse: 0.063865	tr-a-peak@32: 0.982210	tr-rmse: 0.299370	tr-rmse: 0.299370
2025-07-29 06:55:42 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.06387	tr-a-peak@32:0.98221	tr-rmse:0.29937	tr-rmse:0.29937 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 06:58:17 [DEBUG] XGB validation: p-rmse: 0.103009	a-peak@32: 0.950139
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:00:22 [DEBUG] XGB validation: p-rmse: 0.135488	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(64) main_kernel(float* __restrict__ depth_conv2d_nhwc, float* __restrict__ placeholder, float* __restrict__ placeholder_1);
extern "C" __global__ void __launch_bounds__(64) main_kernel(float* __restrict__ depth_conv2d_nhwc, float* __restrict__ placeholder, float* __restrict__ placeholder_1) {
  float depth_conv2d_nhwc_local[7];
  __shared__ float PadInput_shared[2880];
  __shared__ float placeholder_shared[288];
  depth_conv2d_nhwc_local[0] = 0.000000e+00f;
  depth_conv2d_nhwc_local[1] = 0.000000e+00f;
  depth_conv2d_nhwc_local[2] = 0.000000e+00f;
  depth_conv2d_nhwc_local[3] = 0.000000e+00f;
  depth_conv2d_nhwc_local[4] = 0.000000e+00f;
  depth_conv2d_nhwc_local[5] = 0.000000e+00f;
  depth_conv2d_nhwc_local[6] = 0.000000e+00f;
  float condval;
  if (((16 <= (((int)blockIdx.x) % 112)) && (32 <= ((int)threadIdx.x)))) {
    condval = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 7680)];
  } else {
    condval = 0.000000e+00f;
  }
  PadInput_shared[((int)threadIdx.x)] = condval;
  float condval_1;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_1 = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 6656)];
  } else {
    condval_1 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 64)] = condval_1;
  float condval_2;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_2 = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 5632)];
  } else {
    condval_2 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 128)] = condval_2;
  float condval_3;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_3 = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 4608)];
  } else {
    condval_3 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 192)] = condval_3;
  float condval_4;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_4 = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 3584)];
  } else {
    condval_4 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 256)] = condval_4;
  float condval_5;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_5 = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 2560)];
  } else {
    condval_5 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 320)] = condval_5;
  float condval_6;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_6 = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 1536)];
  } else {
    condval_6 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 384)] = condval_6;
  float condval_7;
  if (((16 <= (((int)blockIdx.x) % 112)) && (1 <= (((((int)threadIdx.x) >> 5) + 14) % 15)))) {
    condval_7 = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 448) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((((int)threadIdx.x) >> 5) + 14) % 15) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 7680)];
  } else {
    condval_7 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 448)] = condval_7;
  float condval_8;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_8 = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 512) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 7168)];
  } else {
    condval_8 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 512)] = condval_8;
  float condval_9;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_9 = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 576) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 6144)];
  } else {
    condval_9 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 576)] = condval_9;
  float condval_10;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_10 = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 640) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 5120)];
  } else {
    condval_10 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 640)] = condval_10;
  float condval_11;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_11 = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 704) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 4096)];
  } else {
    condval_11 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 704)] = condval_11;
  float condval_12;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_12 = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 768) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 3072)];
  } else {
    condval_12 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 768)] = condval_12;
  float condval_13;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_13 = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 832) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 2048)];
  } else {
    condval_13 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 832)] = condval_13;
  float condval_14;
  if ((16 <= (((int)blockIdx.x) % 112))) {
    condval_14 = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 896) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 1024)];
  } else {
    condval_14 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 896)] = condval_14;
  if (((int)threadIdx.x) < 48) {
    *(float2*)(placeholder_shared + (((int)threadIdx.x) * 2)) = *(float2*)(placeholder_1 + ((((((int)threadIdx.x) >> 4) * 512) + ((((int)blockIdx.x) & 15) * 32)) + ((((int)threadIdx.x) & 15) * 2)));
  }
__asm__ __volatile__("cp.async.commit_group;");

  float condval_15;
  if ((32 <= ((int)threadIdx.x))) {
    condval_15 = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 512)];
  } else {
    condval_15 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 960)] = condval_15;
  PadInput_shared[(((int)threadIdx.x) + 1024)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 512)];
  PadInput_shared[(((int)threadIdx.x) + 1088)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 1536)];
  PadInput_shared[(((int)threadIdx.x) + 1152)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 2560)];
  PadInput_shared[(((int)threadIdx.x) + 1216)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 3584)];
  PadInput_shared[(((int)threadIdx.x) + 1280)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 4608)];
  PadInput_shared[(((int)threadIdx.x) + 1344)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 5632)];
  float condval_16;
  if ((1 <= (((((int)threadIdx.x) >> 5) + 14) % 15))) {
    condval_16 = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 448) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((((int)threadIdx.x) >> 5) + 14) % 15) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) - 512)];
  } else {
    condval_16 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 1408)] = condval_16;
  PadInput_shared[(((int)threadIdx.x) + 1472)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 512) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31))];
  PadInput_shared[(((int)threadIdx.x) + 1536)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 576) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 1024)];
  PadInput_shared[(((int)threadIdx.x) + 1600)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 640) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 2048)];
  PadInput_shared[(((int)threadIdx.x) + 1664)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 704) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 3072)];
  PadInput_shared[(((int)threadIdx.x) + 1728)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 768) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 4096)];
  PadInput_shared[(((int)threadIdx.x) + 1792)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 832) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 5120)];
  PadInput_shared[(((int)threadIdx.x) + 1856)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 896) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 6144)];
  if (((int)threadIdx.x) < 48) {
    *(float2*)(placeholder_shared + ((((int)threadIdx.x) * 2) + 96)) = *(float2*)(placeholder_1 + (((((((int)threadIdx.x) >> 4) * 512) + ((((int)blockIdx.x) & 15) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 1536));
  }
__asm__ __volatile__("cp.async.commit_group;");

  float condval_17;
  if ((32 <= ((int)threadIdx.x))) {
    condval_17 = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 6656)];
  } else {
    condval_17 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 1920)] = condval_17;
  PadInput_shared[(((int)threadIdx.x) + 1984)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 7680)];
  PadInput_shared[(((int)threadIdx.x) + 2048)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 8704)];
  PadInput_shared[(((int)threadIdx.x) + 2112)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 9728)];
  PadInput_shared[(((int)threadIdx.x) + 2176)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 10752)];
  PadInput_shared[(((int)threadIdx.x) + 2240)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 11776)];
  PadInput_shared[(((int)threadIdx.x) + 2304)] = placeholder[(((((((((int)blockIdx.x) / 112) * 200704) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 12800)];
  float condval_18;
  if ((1 <= (((((int)threadIdx.x) >> 5) + 14) % 15))) {
    condval_18 = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 448) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((((int)threadIdx.x) >> 5) + 14) % 15) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 6656)];
  } else {
    condval_18 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 2368)] = condval_18;
  PadInput_shared[(((int)threadIdx.x) + 2432)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 512) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 7168)];
  PadInput_shared[(((int)threadIdx.x) + 2496)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 576) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 8192)];
  PadInput_shared[(((int)threadIdx.x) + 2560)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 640) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 9216)];
  PadInput_shared[(((int)threadIdx.x) + 2624)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 704) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 10240)];
  PadInput_shared[(((int)threadIdx.x) + 2688)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 768) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 11264)];
  PadInput_shared[(((int)threadIdx.x) + 2752)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 832) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 12288)];
  PadInput_shared[(((int)threadIdx.x) + 2816)] = placeholder[((((((((((int)blockIdx.x) / 112) * 200704) + (((((int)threadIdx.x) + 896) / 480) * 100352)) + (((((int)blockIdx.x) % 112) >> 4) * 14336)) + ((((int)threadIdx.x) >> 5) * 512)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 13312)];
  if (((int)threadIdx.x) < 48) {
    *(float2*)(placeholder_shared + ((((int)threadIdx.x) * 2) + 192)) = *(float2*)(placeholder_1 + (((((((int)threadIdx.x) >> 4) * 512) + ((((int)blockIdx.x) & 15) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 3072));
  }
__asm__ __volatile__("cp.async.commit_group;");

__asm__ __volatile__("cp.async.wait_group 2;");

  __syncthreads();
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31))] * placeholder_shared[(((int)threadIdx.x) & 31)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 64)] * placeholder_shared[(((int)threadIdx.x) & 31)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 128)] * placeholder_shared[(((int)threadIdx.x) & 31)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 192)] * placeholder_shared[(((int)threadIdx.x) & 31)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 256)] * placeholder_shared[(((int)threadIdx.x) & 31)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 320)] * placeholder_shared[(((int)threadIdx.x) & 31)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 384)] * placeholder_shared[(((int)threadIdx.x) & 31)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 32)] * placeholder_shared[((((int)threadIdx.x) & 31) + 32)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 96)] * placeholder_shared[((((int)threadIdx.x) & 31) + 32)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 160)] * placeholder_shared[((((int)threadIdx.x) & 31) + 32)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 224)] * placeholder_shared[((((int)threadIdx.x) & 31) + 32)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 288)] * placeholder_shared[((((int)threadIdx.x) & 31) + 32)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 352)] * placeholder_shared[((((int)threadIdx.x) & 31) + 32)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 416)] * placeholder_shared[((((int)threadIdx.x) & 31) + 32)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 64)] * placeholder_shared[((((int)threadIdx.x) & 31) + 64)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 128)] * placeholder_shared[((((int)threadIdx.x) & 31) + 64)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 192)] * placeholder_shared[((((int)threadIdx.x) & 31) + 64)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 256)] * placeholder_shared[((((int)threadIdx.x) & 31) + 64)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 320)] * placeholder_shared[((((int)threadIdx.x) & 31) + 64)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 384)] * placeholder_shared[((((int)threadIdx.x) & 31) + 64)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 448)] * placeholder_shared[((((int)threadIdx.x) & 31) + 64)]));
__asm__ __volatile__("cp.async.wait_group 1;");

  __syncthreads();
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 960)] * placeholder_shared[((((int)threadIdx.x) & 31) + 96)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1024)] * placeholder_shared[((((int)threadIdx.x) & 31) + 96)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1088)] * placeholder_shared[((((int)threadIdx.x) & 31) + 96)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1152)] * placeholder_shared[((((int)threadIdx.x) & 31) + 96)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1216)] * placeholder_shared[((((int)threadIdx.x) & 31) + 96)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1280)] * placeholder_shared[((((int)threadIdx.x) & 31) + 96)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1344)] * placeholder_shared[((((int)threadIdx.x) & 31) + 96)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 992)] * placeholder_shared[((((int)threadIdx.x) & 31) + 128)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1056)] * placeholder_shared[((((int)threadIdx.x) & 31) + 128)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1120)] * placeholder_shared[((((int)threadIdx.x) & 31) + 128)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1184)] * placeholder_shared[((((int)threadIdx.x) & 31) + 128)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1248)] * placeholder_shared[((((int)threadIdx.x) & 31) + 128)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1312)] * placeholder_shared[((((int)threadIdx.x) & 31) + 128)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1376)] * placeholder_shared[((((int)threadIdx.x) & 31) + 128)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1024)] * placeholder_shared[((((int)threadIdx.x) & 31) + 160)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1088)] * placeholder_shared[((((int)threadIdx.x) & 31) + 160)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1152)] * placeholder_shared[((((int)threadIdx.x) & 31) + 160)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1216)] * placeholder_shared[((((int)threadIdx.x) & 31) + 160)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1280)] * placeholder_shared[((((int)threadIdx.x) & 31) + 160)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1344)] * placeholder_shared[((((int)threadIdx.x) & 31) + 160)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1408)] * placeholder_shared[((((int)threadIdx.x) & 31) + 160)]));
__asm__ __volatile__("cp.async.wait_group 0;");

  __syncthreads();
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1920)] * placeholder_shared[((((int)threadIdx.x) & 31) + 192)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1984)] * placeholder_shared[((((int)threadIdx.x) & 31) + 192)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2048)] * placeholder_shared[((((int)threadIdx.x) & 31) + 192)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2112)] * placeholder_shared[((((int)threadIdx.x) & 31) + 192)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2176)] * placeholder_shared[((((int)threadIdx.x) & 31) + 192)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2240)] * placeholder_shared[((((int)threadIdx.x) & 31) + 192)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2304)] * placeholder_shared[((((int)threadIdx.x) & 31) + 192)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1952)] * placeholder_shared[((((int)threadIdx.x) & 31) + 224)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2016)] * placeholder_shared[((((int)threadIdx.x) & 31) + 224)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2080)] * placeholder_shared[((((int)threadIdx.x) & 31) + 224)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2144)] * placeholder_shared[((((int)threadIdx.x) & 31) + 224)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2208)] * placeholder_shared[((((int)threadIdx.x) & 31) + 224)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2272)] * placeholder_shared[((((int)threadIdx.x) & 31) + 224)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2336)] * placeholder_shared[((((int)threadIdx.x) & 31) + 224)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 1984)] * placeholder_shared[((((int)threadIdx.x) & 31) + 256)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2048)] * placeholder_shared[((((int)threadIdx.x) & 31) + 256)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2112)] * placeholder_shared[((((int)threadIdx.x) & 31) + 256)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2176)] * placeholder_shared[((((int)threadIdx.x) & 31) + 256)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2240)] * placeholder_shared[((((int)threadIdx.x) & 31) + 256)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2304)] * placeholder_shared[((((int)threadIdx.x) & 31) + 256)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 480) + (((int)threadIdx.x) & 31)) + 2368)] * placeholder_shared[((((int)threadIdx.x) & 31) + 256)]));
  depth_conv2d_nhwc[((((((((int)blockIdx.x) / 112) * 50176) + ((((int)threadIdx.x) >> 5) * 25088)) + (((((int)blockIdx.x) % 112) >> 4) * 3584)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31))] = depth_conv2d_nhwc_local[0];
  depth_conv2d_nhwc[(((((((((int)blockIdx.x) / 112) * 50176) + ((((int)threadIdx.x) >> 5) * 25088)) + (((((int)blockIdx.x) % 112) >> 4) * 3584)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 512)] = depth_conv2d_nhwc_local[1];
  depth_conv2d_nhwc[(((((((((int)blockIdx.x) / 112) * 50176) + ((((int)threadIdx.x) >> 5) * 25088)) + (((((int)blockIdx.x) % 112) >> 4) * 3584)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 1024)] = depth_conv2d_nhwc_local[2];
  depth_conv2d_nhwc[(((((((((int)blockIdx.x) / 112) * 50176) + ((((int)threadIdx.x) >> 5) * 25088)) + (((((int)blockIdx.x) % 112) >> 4) * 3584)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 1536)] = depth_conv2d_nhwc_local[3];
  depth_conv2d_nhwc[(((((((((int)blockIdx.x) / 112) * 50176) + ((((int)threadIdx.x) >> 5) * 25088)) + (((((int)blockIdx.x) % 112) >> 4) * 3584)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 2048)] = depth_conv2d_nhwc_local[4];
  depth_conv2d_nhwc[(((((((((int)blockIdx.x) / 112) * 50176) + ((((int)threadIdx.x) >> 5) * 25088)) + (((((int)blockIdx.x) % 112) >> 4) * 3584)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 2560)] = depth_conv2d_nhwc_local[5];
  depth_conv2d_nhwc[(((((((((int)blockIdx.x) / 112) * 50176) + ((((int)threadIdx.x) >> 5) * 25088)) + (((((int)blockIdx.x) % 112) >> 4) * 3584)) + ((((int)blockIdx.x) & 15) * 32)) + (((int)threadIdx.x) & 31)) + 3072)] = depth_conv2d_nhwc_local[6];
}


The time of DEP is 0.010 ms
===========================
2025-07-29 07:00:24 [INFO] Logging directory: /tmp/tmp7gjdxn9v/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:02:48 [DEBUG] XGB iter   0: tr-p-rmse: 0.437340	tr-a-peak@32: 0.949210	tr-rmse: 0.468245	tr-rmse: 0.468245
2025-07-29 07:02:48 [DEBUG] XGB iter  25: tr-p-rmse: 0.033946	tr-a-peak@32: 1.000000	tr-rmse: 0.515661	tr-rmse: 0.515661
2025-07-29 07:02:48 [DEBUG] XGB iter  50: tr-p-rmse: 0.033946	tr-a-peak@32: 1.000000	tr-rmse: 0.515661	tr-rmse: 0.515661
2025-07-29 07:02:48 [DEBUG] XGB stopped. Best iteration: [10] tr-p-rmse:0.03395	tr-a-peak@32:1.00000	tr-rmse:0.51566	tr-rmse:0.51566 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:05:18 [DEBUG] XGB validation: p-rmse: 0.281942	a-peak@32: 0.824508
2025-07-29 07:05:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.459606	tr-a-peak@32: 0.757730	tr-rmse: 0.380808	tr-rmse: 0.380808
2025-07-29 07:05:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.034998	tr-a-peak@32: 1.000000	tr-rmse: 0.425191	tr-rmse: 0.425191
2025-07-29 07:05:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.034998	tr-a-peak@32: 1.000000	tr-rmse: 0.425191	tr-rmse: 0.425191
2025-07-29 07:05:18 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.03500	tr-a-peak@32:1.00000	tr-rmse:0.42519	tr-rmse:0.42519 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:08:25 [DEBUG] XGB validation: p-rmse: 0.458990	a-peak@32: 0.765687
2025-07-29 07:08:25 [DEBUG] XGB iter   0: tr-p-rmse: 0.426268	tr-a-peak@32: 0.740205	tr-rmse: 0.378050	tr-rmse: 0.378050
2025-07-29 07:08:25 [DEBUG] XGB iter  25: tr-p-rmse: 0.054820	tr-a-peak@32: 0.922381	tr-rmse: 0.430054	tr-rmse: 0.430054
2025-07-29 07:08:25 [DEBUG] XGB iter  50: tr-p-rmse: 0.054820	tr-a-peak@32: 0.922381	tr-rmse: 0.430054	tr-rmse: 0.430054
2025-07-29 07:08:25 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.05482	tr-a-peak@32:0.92238	tr-rmse:0.43005	tr-rmse:0.43005 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:11:25 [DEBUG] XGB validation: p-rmse: 0.262507	a-peak@32: 0.714152
2025-07-29 07:11:25 [DEBUG] XGB iter   0: tr-p-rmse: 0.410819	tr-a-peak@32: 0.820509	tr-rmse: 0.387561	tr-rmse: 0.387561
2025-07-29 07:11:25 [DEBUG] XGB iter  25: tr-p-rmse: 0.056085	tr-a-peak@32: 0.956773	tr-rmse: 0.441485	tr-rmse: 0.441485
2025-07-29 07:11:25 [DEBUG] XGB iter  50: tr-p-rmse: 0.056085	tr-a-peak@32: 0.956773	tr-rmse: 0.441485	tr-rmse: 0.441485
2025-07-29 07:11:25 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.05609	tr-a-peak@32:0.95677	tr-rmse:0.44148	tr-rmse:0.44148 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:14:10 [DEBUG] XGB validation: p-rmse: 0.249823	a-peak@32: 0.733948
2025-07-29 07:14:10 [DEBUG] XGB iter   0: tr-p-rmse: 0.403821	tr-a-peak@32: 0.835366	tr-rmse: 0.398239	tr-rmse: 0.398239
2025-07-29 07:14:10 [DEBUG] XGB iter  25: tr-p-rmse: 0.063302	tr-a-peak@32: 0.953166	tr-rmse: 0.452674	tr-rmse: 0.452674
2025-07-29 07:14:10 [DEBUG] XGB iter  50: tr-p-rmse: 0.063302	tr-a-peak@32: 0.953166	tr-rmse: 0.452674	tr-rmse: 0.452674
2025-07-29 07:14:10 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.06330	tr-a-peak@32:0.95317	tr-rmse:0.45267	tr-rmse:0.45267 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:17:03 [DEBUG] XGB validation: p-rmse: 0.319710	a-peak@32: 0.785151
2025-07-29 07:17:03 [DEBUG] XGB iter   0: tr-p-rmse: 0.412536	tr-a-peak@32: 0.571036	tr-rmse: 0.412767	tr-rmse: 0.412767
2025-07-29 07:17:03 [DEBUG] XGB iter  25: tr-p-rmse: 0.066846	tr-a-peak@32: 0.974277	tr-rmse: 0.465244	tr-rmse: 0.465244
2025-07-29 07:17:03 [DEBUG] XGB iter  50: tr-p-rmse: 0.066846	tr-a-peak@32: 0.974277	tr-rmse: 0.465244	tr-rmse: 0.465244
2025-07-29 07:17:03 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.06685	tr-a-peak@32:0.97428	tr-rmse:0.46524	tr-rmse:0.46524 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:19:40 [DEBUG] XGB validation: p-rmse: 0.191931	a-peak@32: 0.978295
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:22:08 [DEBUG] XGB validation: p-rmse: 0.211138	a-peak@32: 1.000000
2025-07-29 07:22:08 [DEBUG] XGB iter   0: tr-p-rmse: 0.383834	tr-a-peak@32: 0.874115	tr-rmse: 0.417360	tr-rmse: 0.417360
2025-07-29 07:22:08 [DEBUG] XGB iter  25: tr-p-rmse: 0.071159	tr-a-peak@32: 0.994200	tr-rmse: 0.474516	tr-rmse: 0.474516
2025-07-29 07:22:08 [DEBUG] XGB iter  50: tr-p-rmse: 0.071159	tr-a-peak@32: 0.994200	tr-rmse: 0.474516	tr-rmse: 0.474516
2025-07-29 07:22:08 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.07116	tr-a-peak@32:0.99420	tr-rmse:0.47452	tr-rmse:0.47452 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:25:01 [DEBUG] XGB validation: p-rmse: 0.249666	a-peak@32: 0.753605
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:27:43 [DEBUG] XGB validation: p-rmse: 0.168358	a-peak@32: 0.872295
2025-07-29 07:27:43 [DEBUG] XGB iter   0: tr-p-rmse: 0.375533	tr-a-peak@32: 0.926099	tr-rmse: 0.425582	tr-rmse: 0.425582
2025-07-29 07:27:43 [DEBUG] XGB iter  25: tr-p-rmse: 0.080499	tr-a-peak@32: 0.983172	tr-rmse: 0.483736	tr-rmse: 0.483736
2025-07-29 07:27:43 [DEBUG] XGB iter  50: tr-p-rmse: 0.080499	tr-a-peak@32: 0.983172	tr-rmse: 0.483736	tr-rmse: 0.483736
2025-07-29 07:27:43 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.08050	tr-a-peak@32:0.98317	tr-rmse:0.48374	tr-rmse:0.48374 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:29:31 [DEBUG] XGB validation: p-rmse: 0.187642	a-peak@32: 0.907019
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:31:24 [DEBUG] XGB validation: p-rmse: 0.178485	a-peak@32: 0.839793
2025-07-29 07:31:24 [DEBUG] XGB iter   0: tr-p-rmse: 0.376897	tr-a-peak@32: 0.898407	tr-rmse: 0.399626	tr-rmse: 0.399626
2025-07-29 07:31:24 [DEBUG] XGB iter  25: tr-p-rmse: 0.079006	tr-a-peak@32: 0.978348	tr-rmse: 0.459572	tr-rmse: 0.459572
2025-07-29 07:31:24 [DEBUG] XGB iter  50: tr-p-rmse: 0.079006	tr-a-peak@32: 0.978348	tr-rmse: 0.459572	tr-rmse: 0.459572
2025-07-29 07:31:24 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.07901	tr-a-peak@32:0.97835	tr-rmse:0.45957	tr-rmse:0.45957 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:33:18 [DEBUG] XGB validation: p-rmse: 0.197846	a-peak@32: 0.843425
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:35:17 [DEBUG] XGB validation: p-rmse: 0.191140	a-peak@32: 0.837220
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:36:56 [DEBUG] XGB validation: p-rmse: 0.285911	a-peak@32: 0.780977
2025-07-29 07:36:56 [DEBUG] XGB iter   0: tr-p-rmse: 0.370080	tr-a-peak@32: 0.590511	tr-rmse: 0.329214	tr-rmse: 0.329214
2025-07-29 07:36:56 [DEBUG] XGB iter  25: tr-p-rmse: 0.070979	tr-a-peak@32: 1.000000	tr-rmse: 0.394584	tr-rmse: 0.394584
2025-07-29 07:36:57 [DEBUG] XGB iter  50: tr-p-rmse: 0.070979	tr-a-peak@32: 1.000000	tr-rmse: 0.394584	tr-rmse: 0.394584
2025-07-29 07:36:57 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.07098	tr-a-peak@32:1.00000	tr-rmse:0.39458	tr-rmse:0.39458 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-29 07:38:37 [DEBUG] XGB validation: p-rmse: 0.135110	a-peak@32: 0.820860
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(32) main_kernel(float* __restrict__ depth_conv2d_nhwc, float* __restrict__ placeholder, float* __restrict__ placeholder_1);
extern "C" __global__ void __launch_bounds__(32) main_kernel(float* __restrict__ depth_conv2d_nhwc, float* __restrict__ placeholder, float* __restrict__ placeholder_1) {
  float depth_conv2d_nhwc_local[7];
  __shared__ float PadInput_shared[864];
  __shared__ float placeholder_shared[144];
  depth_conv2d_nhwc_local[0] = 0.000000e+00f;
  depth_conv2d_nhwc_local[1] = 0.000000e+00f;
  depth_conv2d_nhwc_local[2] = 0.000000e+00f;
  depth_conv2d_nhwc_local[3] = 0.000000e+00f;
  depth_conv2d_nhwc_local[4] = 0.000000e+00f;
  depth_conv2d_nhwc_local[5] = 0.000000e+00f;
  depth_conv2d_nhwc_local[6] = 0.000000e+00f;
  PadInput_shared[((int)threadIdx.x)] = 0.000000e+00f;
  float condval;
  if (((((((int)threadIdx.x) >> 4) == 1) && (1 <= (((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3)))) && ((((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3)) < 8))) {
    condval = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 32) / 48) * 7168)) + ((((((int)threadIdx.x) >> 4) + 2) % 3) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 8192)];
  } else {
    condval = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 32)] = condval;
  float condval_1;
  if (((((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)) < 7)) {
    condval_1 = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 64) / 48) * 7168)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 7168)];
  } else {
    condval_1 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 64)] = condval_1;
  float condval_2;
  if ((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)))) {
    condval_2 = placeholder[((((((((int)blockIdx.x) / 448) * 100352) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) + 6144)];
  } else {
    condval_2 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 96)] = condval_2;
  float condval_3;
  if (((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3))) && ((((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3)) < 8))) {
    condval_3 = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 128) / 48) * 7168)) + ((((((int)threadIdx.x) >> 4) + 2) % 3) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 8192)];
  } else {
    condval_3 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 128)] = condval_3;
  float condval_4;
  if (((((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)) < 7)) {
    condval_4 = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 160) / 48) * 7168)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 7168)];
  } else {
    condval_4 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 160)] = condval_4;
  float condval_5;
  if ((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)))) {
    condval_5 = placeholder[((((((((int)blockIdx.x) / 448) * 100352) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) + 20480)];
  } else {
    condval_5 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 192)] = condval_5;
  float condval_6;
  if (((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3))) && ((((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3)) < 8))) {
    condval_6 = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 224) / 48) * 7168)) + ((((((int)threadIdx.x) >> 4) + 2) % 3) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 8192)];
  } else {
    condval_6 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 224)] = condval_6;
  float condval_7;
  if (((((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)) < 7)) {
    condval_7 = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 256) / 48) * 7168)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 7168)];
  } else {
    condval_7 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 256)] = condval_7;
  float condval_8;
  if ((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)))) {
    condval_8 = placeholder[((((((((int)blockIdx.x) / 448) * 100352) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) + 34816)];
  } else {
    condval_8 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 288)] = condval_8;
  float condval_9;
  if (((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3))) && ((((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3)) < 8))) {
    condval_9 = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 320) / 48) * 7168)) + ((((((int)threadIdx.x) >> 4) + 2) % 3) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 8192)];
  } else {
    condval_9 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 320)] = condval_9;
  float condval_10;
  if (((((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)) < 7)) {
    condval_10 = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 352) / 48) * 7168)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 7168)];
  } else {
    condval_10 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 352)] = condval_10;
  PadInput_shared[(((int)threadIdx.x) + 384)] = 0.000000e+00f;
  float condval_11;
  if (((((3 <= (((((int)threadIdx.x) >> 4) + 26) % 27)) && (((((int)threadIdx.x) + 416) % 432) < 384)) && (1 <= (((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3)))) && ((((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3)) < 8))) {
    condval_11 = placeholder[((((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 416) / 432) * 50176)) + (((((((int)threadIdx.x) >> 4) + 26) % 27) / 3) * 7168)) + ((((((int)threadIdx.x) >> 4) + 2) % 3) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 8192)];
  } else {
    condval_11 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 416)] = condval_11;
  PadInput_shared[(((int)threadIdx.x) + 448)] = 0.000000e+00f;
  float condval_12;
  if ((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)))) {
    condval_12 = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 480) / 432) * 50176)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 1024)];
  } else {
    condval_12 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 480)] = condval_12;
  float condval_13;
  if (((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3))) && ((((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3)) < 8))) {
    condval_13 = placeholder[((((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 512) / 432) * 50176)) + (((((int)threadIdx.x) + 80) / 48) * 7168)) + ((((((int)threadIdx.x) >> 4) + 2) % 3) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 8192)];
  } else {
    condval_13 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 512)] = condval_13;
  float condval_14;
  if (((((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)) < 7)) {
    condval_14 = placeholder[((((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 544) / 432) * 50176)) + (((((int)threadIdx.x) + 112) / 48) * 7168)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 7168)];
  } else {
    condval_14 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 544)] = condval_14;
  float condval_15;
  if ((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)))) {
    condval_15 = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 576) / 432) * 50176)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) + 13312)];
  } else {
    condval_15 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 576)] = condval_15;
  float condval_16;
  if (((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3))) && ((((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3)) < 8))) {
    condval_16 = placeholder[((((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 608) / 432) * 50176)) + (((((int)threadIdx.x) + 176) / 48) * 7168)) + ((((((int)threadIdx.x) >> 4) + 2) % 3) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 8192)];
  } else {
    condval_16 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 608)] = condval_16;
  float condval_17;
  if (((((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)) < 7)) {
    condval_17 = placeholder[((((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 640) / 432) * 50176)) + (((((int)threadIdx.x) + 208) / 48) * 7168)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 7168)];
  } else {
    condval_17 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 640)] = condval_17;
  float condval_18;
  if ((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)))) {
    condval_18 = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 672) / 432) * 50176)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) + 27648)];
  } else {
    condval_18 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 672)] = condval_18;
  float condval_19;
  if (((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3))) && ((((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3)) < 8))) {
    condval_19 = placeholder[((((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 704) / 432) * 50176)) + (((((int)threadIdx.x) + 272) / 48) * 7168)) + ((((((int)threadIdx.x) >> 4) + 2) % 3) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 8192)];
  } else {
    condval_19 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 704)] = condval_19;
  float condval_20;
  if (((((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)) < 7)) {
    condval_20 = placeholder[((((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 736) / 432) * 50176)) + (((((int)threadIdx.x) + 304) / 48) * 7168)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) - 7168)];
  } else {
    condval_20 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 736)] = condval_20;
  float condval_21;
  if ((1 <= (((((int)blockIdx.x) % 448) >> 6) + (((int)threadIdx.x) >> 4)))) {
    condval_21 = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 768) / 432) * 50176)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) + 41984)];
  } else {
    condval_21 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 768)] = condval_21;
  float condval_22;
  if ((((((int)threadIdx.x) < 16) && (1 <= (((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3)))) && ((((((int)blockIdx.x) % 448) >> 6) + (((((int)threadIdx.x) >> 4) + 2) % 3)) < 8))) {
    condval_22 = placeholder[(((((((((int)blockIdx.x) / 448) * 100352) + (((((int)threadIdx.x) + 800) / 432) * 50176)) + (((((int)threadIdx.x) + 368) / 48) * 7168)) + ((((int)blockIdx.x) % 448) * 16)) + ((int)threadIdx.x)) - 6144)];
  } else {
    condval_22 = 0.000000e+00f;
  }
  PadInput_shared[(((int)threadIdx.x) + 800)] = condval_22;
  PadInput_shared[(((int)threadIdx.x) + 832)] = 0.000000e+00f;
  *(float2*)(placeholder_shared + (((int)threadIdx.x) * 2)) = *(float2*)(placeholder_1 + ((((((int)threadIdx.x) >> 3) * 1024) + ((((int)blockIdx.x) & 63) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
  *(float2*)(placeholder_shared + ((((int)threadIdx.x) * 2) + 64)) = *(float2*)(placeholder_1 + (((((((int)threadIdx.x) >> 3) * 1024) + ((((int)blockIdx.x) & 63) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 4096));
  if (((int)threadIdx.x) < 8) {
    *(float2*)(placeholder_shared + ((((int)threadIdx.x) * 2) + 128)) = *(float2*)(placeholder_1 + ((((((int)blockIdx.x) & 63) * 16) + (((int)threadIdx.x) * 2)) + 8192));
  }
  __syncthreads();
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15))] * placeholder_shared[(((int)threadIdx.x) & 15)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 48)] * placeholder_shared[(((int)threadIdx.x) & 15)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 96)] * placeholder_shared[(((int)threadIdx.x) & 15)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 144)] * placeholder_shared[(((int)threadIdx.x) & 15)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 192)] * placeholder_shared[(((int)threadIdx.x) & 15)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 240)] * placeholder_shared[(((int)threadIdx.x) & 15)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 288)] * placeholder_shared[(((int)threadIdx.x) & 15)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 48)] * placeholder_shared[((((int)threadIdx.x) & 15) + 48)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 96)] * placeholder_shared[((((int)threadIdx.x) & 15) + 48)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 144)] * placeholder_shared[((((int)threadIdx.x) & 15) + 48)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 192)] * placeholder_shared[((((int)threadIdx.x) & 15) + 48)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 240)] * placeholder_shared[((((int)threadIdx.x) & 15) + 48)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 288)] * placeholder_shared[((((int)threadIdx.x) & 15) + 48)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 336)] * placeholder_shared[((((int)threadIdx.x) & 15) + 48)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 96)] * placeholder_shared[((((int)threadIdx.x) & 15) + 96)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 144)] * placeholder_shared[((((int)threadIdx.x) & 15) + 96)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 192)] * placeholder_shared[((((int)threadIdx.x) & 15) + 96)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 240)] * placeholder_shared[((((int)threadIdx.x) & 15) + 96)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 288)] * placeholder_shared[((((int)threadIdx.x) & 15) + 96)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 336)] * placeholder_shared[((((int)threadIdx.x) & 15) + 96)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 384)] * placeholder_shared[((((int)threadIdx.x) & 15) + 96)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 16)] * placeholder_shared[((((int)threadIdx.x) & 15) + 16)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 64)] * placeholder_shared[((((int)threadIdx.x) & 15) + 16)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 112)] * placeholder_shared[((((int)threadIdx.x) & 15) + 16)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 160)] * placeholder_shared[((((int)threadIdx.x) & 15) + 16)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 208)] * placeholder_shared[((((int)threadIdx.x) & 15) + 16)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 256)] * placeholder_shared[((((int)threadIdx.x) & 15) + 16)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 304)] * placeholder_shared[((((int)threadIdx.x) & 15) + 16)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 64)] * placeholder_shared[((((int)threadIdx.x) & 15) + 64)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 112)] * placeholder_shared[((((int)threadIdx.x) & 15) + 64)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 160)] * placeholder_shared[((((int)threadIdx.x) & 15) + 64)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 208)] * placeholder_shared[((((int)threadIdx.x) & 15) + 64)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 256)] * placeholder_shared[((((int)threadIdx.x) & 15) + 64)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 304)] * placeholder_shared[((((int)threadIdx.x) & 15) + 64)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 352)] * placeholder_shared[((((int)threadIdx.x) & 15) + 64)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 112)] * placeholder_shared[((((int)threadIdx.x) & 15) + 112)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 160)] * placeholder_shared[((((int)threadIdx.x) & 15) + 112)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 208)] * placeholder_shared[((((int)threadIdx.x) & 15) + 112)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 256)] * placeholder_shared[((((int)threadIdx.x) & 15) + 112)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 304)] * placeholder_shared[((((int)threadIdx.x) & 15) + 112)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 352)] * placeholder_shared[((((int)threadIdx.x) & 15) + 112)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 400)] * placeholder_shared[((((int)threadIdx.x) & 15) + 112)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 32)] * placeholder_shared[((((int)threadIdx.x) & 15) + 32)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 80)] * placeholder_shared[((((int)threadIdx.x) & 15) + 32)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 128)] * placeholder_shared[((((int)threadIdx.x) & 15) + 32)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 176)] * placeholder_shared[((((int)threadIdx.x) & 15) + 32)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 224)] * placeholder_shared[((((int)threadIdx.x) & 15) + 32)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 272)] * placeholder_shared[((((int)threadIdx.x) & 15) + 32)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 320)] * placeholder_shared[((((int)threadIdx.x) & 15) + 32)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 80)] * placeholder_shared[((((int)threadIdx.x) & 15) + 80)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 128)] * placeholder_shared[((((int)threadIdx.x) & 15) + 80)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 176)] * placeholder_shared[((((int)threadIdx.x) & 15) + 80)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 224)] * placeholder_shared[((((int)threadIdx.x) & 15) + 80)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 272)] * placeholder_shared[((((int)threadIdx.x) & 15) + 80)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 320)] * placeholder_shared[((((int)threadIdx.x) & 15) + 80)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 368)] * placeholder_shared[((((int)threadIdx.x) & 15) + 80)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 128)] * placeholder_shared[((((int)threadIdx.x) & 15) + 128)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 176)] * placeholder_shared[((((int)threadIdx.x) & 15) + 128)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 224)] * placeholder_shared[((((int)threadIdx.x) & 15) + 128)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 272)] * placeholder_shared[((((int)threadIdx.x) & 15) + 128)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 320)] * placeholder_shared[((((int)threadIdx.x) & 15) + 128)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 368)] * placeholder_shared[((((int)threadIdx.x) & 15) + 128)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) >> 4) * 432) + (((int)threadIdx.x) & 15)) + 416)] * placeholder_shared[((((int)threadIdx.x) & 15) + 128)]));
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 448) * 100352) + ((((int)threadIdx.x) >> 4) * 50176)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15))] = depth_conv2d_nhwc_local[0];
  depth_conv2d_nhwc[((((((((int)blockIdx.x) / 448) * 100352) + ((((int)threadIdx.x) >> 4) * 50176)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) + 7168)] = depth_conv2d_nhwc_local[1];
  depth_conv2d_nhwc[((((((((int)blockIdx.x) / 448) * 100352) + ((((int)threadIdx.x) >> 4) * 50176)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) + 14336)] = depth_conv2d_nhwc_local[2];
  depth_conv2d_nhwc[((((((((int)blockIdx.x) / 448) * 100352) + ((((int)threadIdx.x) >> 4) * 50176)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) + 21504)] = depth_conv2d_nhwc_local[3];
  depth_conv2d_nhwc[((((((((int)blockIdx.x) / 448) * 100352) + ((((int)threadIdx.x) >> 4) * 50176)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) + 28672)] = depth_conv2d_nhwc_local[4];
  depth_conv2d_nhwc[((((((((int)blockIdx.x) / 448) * 100352) + ((((int)threadIdx.x) >> 4) * 50176)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) + 35840)] = depth_conv2d_nhwc_local[5];
  depth_conv2d_nhwc[((((((((int)blockIdx.x) / 448) * 100352) + ((((int)threadIdx.x) >> 4) * 50176)) + ((((int)blockIdx.x) % 448) * 16)) + (((int)threadIdx.x) & 15)) + 43008)] = depth_conv2d_nhwc_local[6];
}


The time of DEP is 0.011 ms

===========================
2025-07-24 02:35:51 [INFO] Logging directory: /tmp/tmp4_ud3woy/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 02:38:26 [DEBUG] XGB iter   0: tr-p-rmse: 0.585274	tr-a-peak@32: 0.821252	tr-rmse: 0.321445	tr-rmse: 0.321445
2025-07-24 02:38:26 [DEBUG] XGB iter  25: tr-p-rmse: 0.052018	tr-a-peak@32: 0.999692	tr-rmse: 0.383336	tr-rmse: 0.383336
2025-07-24 02:38:26 [DEBUG] XGB iter  50: tr-p-rmse: 0.052018	tr-a-peak@32: 0.999692	tr-rmse: 0.383336	tr-rmse: 0.383336
2025-07-24 02:38:26 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05202	tr-a-peak@32:0.99969	tr-rmse:0.38334	tr-rmse:0.38334 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 02:40:57 [DEBUG] XGB validation: p-rmse: 0.188983	a-peak@32: 0.948202
2025-07-24 02:40:57 [DEBUG] XGB iter   0: tr-p-rmse: 0.551475	tr-a-peak@32: 0.889047	tr-rmse: 0.288704	tr-rmse: 0.288704
2025-07-24 02:40:57 [DEBUG] XGB iter  25: tr-p-rmse: 0.049421	tr-a-peak@32: 0.998991	tr-rmse: 0.361548	tr-rmse: 0.361548
2025-07-24 02:40:57 [DEBUG] XGB iter  50: tr-p-rmse: 0.049421	tr-a-peak@32: 0.998991	tr-rmse: 0.361548	tr-rmse: 0.361548
2025-07-24 02:40:57 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.04942	tr-a-peak@32:0.99899	tr-rmse:0.36155	tr-rmse:0.36155 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 02:44:06 [DEBUG] XGB validation: p-rmse: 0.257627	a-peak@32: 0.813304
2025-07-24 02:44:06 [DEBUG] XGB iter   0: tr-p-rmse: 0.529761	tr-a-peak@32: 0.979231	tr-rmse: 0.295115	tr-rmse: 0.295115
2025-07-24 02:44:06 [DEBUG] XGB iter  25: tr-p-rmse: 0.048859	tr-a-peak@32: 0.999496	tr-rmse: 0.377970	tr-rmse: 0.377970
2025-07-24 02:44:06 [DEBUG] XGB iter  50: tr-p-rmse: 0.048859	tr-a-peak@32: 0.999496	tr-rmse: 0.377970	tr-rmse: 0.377970
2025-07-24 02:44:06 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.04886	tr-a-peak@32:0.99950	tr-rmse:0.37797	tr-rmse:0.37797 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 02:47:07 [DEBUG] XGB validation: p-rmse: 0.235810	a-peak@32: 0.854779
2025-07-24 02:47:07 [DEBUG] XGB iter   0: tr-p-rmse: 0.500745	tr-a-peak@32: 0.984803	tr-rmse: 0.343517	tr-rmse: 0.343517
2025-07-24 02:47:07 [DEBUG] XGB iter  25: tr-p-rmse: 0.056112	tr-a-peak@32: 0.998358	tr-rmse: 0.428408	tr-rmse: 0.428408
2025-07-24 02:47:07 [DEBUG] XGB iter  50: tr-p-rmse: 0.056112	tr-a-peak@32: 0.998358	tr-rmse: 0.428408	tr-rmse: 0.428408
2025-07-24 02:47:07 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.05611	tr-a-peak@32:0.99836	tr-rmse:0.42841	tr-rmse:0.42841 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 02:50:15 [DEBUG] XGB validation: p-rmse: 0.183434	a-peak@32: 0.822991
2025-07-24 02:50:15 [DEBUG] XGB iter   0: tr-p-rmse: 0.476309	tr-a-peak@32: 0.897803	tr-rmse: 0.369510	tr-rmse: 0.369510
2025-07-24 02:50:15 [DEBUG] XGB iter  25: tr-p-rmse: 0.071633	tr-a-peak@32: 0.990745	tr-rmse: 0.456463	tr-rmse: 0.456463
2025-07-24 02:50:15 [DEBUG] XGB iter  50: tr-p-rmse: 0.071633	tr-a-peak@32: 0.990745	tr-rmse: 0.456463	tr-rmse: 0.456463
2025-07-24 02:50:15 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.07163	tr-a-peak@32:0.99074	tr-rmse:0.45646	tr-rmse:0.45646 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 02:53:10 [DEBUG] XGB validation: p-rmse: 0.171426	a-peak@32: 0.838066
2025-07-24 02:53:11 [DEBUG] XGB iter   0: tr-p-rmse: 0.455467	tr-a-peak@32: 0.923026	tr-rmse: 0.392029	tr-rmse: 0.392029
2025-07-24 02:53:11 [DEBUG] XGB iter  25: tr-p-rmse: 0.079919	tr-a-peak@32: 0.948384	tr-rmse: 0.479140	tr-rmse: 0.479140
2025-07-24 02:53:11 [DEBUG] XGB iter  50: tr-p-rmse: 0.079919	tr-a-peak@32: 0.948384	tr-rmse: 0.479140	tr-rmse: 0.479140
2025-07-24 02:53:11 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.07992	tr-a-peak@32:0.94838	tr-rmse:0.47914	tr-rmse:0.47914 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 02:56:05 [DEBUG] XGB validation: p-rmse: 0.194821	a-peak@32: 0.657510
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 02:58:58 [DEBUG] XGB validation: p-rmse: 0.165107	a-peak@32: 0.799235
2025-07-24 02:58:58 [DEBUG] XGB iter   0: tr-p-rmse: 0.447690	tr-a-peak@32: 0.831478	tr-rmse: 0.353208	tr-rmse: 0.353208
2025-07-24 02:58:58 [DEBUG] XGB iter  25: tr-p-rmse: 0.087935	tr-a-peak@32: 0.998850	tr-rmse: 0.449142	tr-rmse: 0.449142
2025-07-24 02:58:58 [DEBUG] XGB iter  50: tr-p-rmse: 0.087935	tr-a-peak@32: 0.998850	tr-rmse: 0.449142	tr-rmse: 0.449142
2025-07-24 02:58:58 [DEBUG] XGB iter  75: tr-p-rmse: 0.087934	tr-a-peak@32: 0.998850	tr-rmse: 0.449142	tr-rmse: 0.449142
2025-07-24 02:58:58 [DEBUG] XGB iter 100: tr-p-rmse: 0.087934	tr-a-peak@32: 0.998850	tr-rmse: 0.449142	tr-rmse: 0.449142
2025-07-24 02:58:58 [DEBUG] XGB stopped. Best iteration: [51] tr-p-rmse:0.08793	tr-a-peak@32:0.99885	tr-rmse:0.44914	tr-rmse:0.44914 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:01:52 [DEBUG] XGB validation: p-rmse: 0.208369	a-peak@32: 0.774900
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:04:46 [DEBUG] XGB validation: p-rmse: 0.172073	a-peak@32: 0.802806
2025-07-24 03:04:46 [DEBUG] XGB iter   0: tr-p-rmse: 0.436148	tr-a-peak@32: 0.827871	tr-rmse: 0.366685	tr-rmse: 0.366685
2025-07-24 03:04:47 [DEBUG] XGB iter  25: tr-p-rmse: 0.094939	tr-a-peak@32: 0.990669	tr-rmse: 0.462200	tr-rmse: 0.462200
2025-07-24 03:04:47 [DEBUG] XGB iter  50: tr-p-rmse: 0.094939	tr-a-peak@32: 0.990669	tr-rmse: 0.462200	tr-rmse: 0.462200
2025-07-24 03:04:47 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.09494	tr-a-peak@32:0.99067	tr-rmse:0.46220	tr-rmse:0.46220 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:07:42 [DEBUG] XGB validation: p-rmse: 0.174238	a-peak@32: 0.942544
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:10:41 [DEBUG] XGB validation: p-rmse: 0.255662	a-peak@32: 0.789001
2025-07-24 03:10:41 [DEBUG] XGB iter   0: tr-p-rmse: 0.458878	tr-a-peak@32: 0.765585	tr-rmse: 0.273500	tr-rmse: 0.273500
2025-07-24 03:10:41 [DEBUG] XGB iter  25: tr-p-rmse: 0.081153	tr-a-peak@32: 0.986307	tr-rmse: 0.382669	tr-rmse: 0.382669
2025-07-24 03:10:41 [DEBUG] XGB iter  50: tr-p-rmse: 0.081153	tr-a-peak@32: 0.986307	tr-rmse: 0.382669	tr-rmse: 0.382669
2025-07-24 03:10:41 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.08115	tr-a-peak@32:0.98631	tr-rmse:0.38267	tr-rmse:0.38267 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:13:38 [DEBUG] XGB validation: p-rmse: 0.152053	a-peak@32: 0.807139
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:16:39 [DEBUG] XGB validation: p-rmse: 0.247713	a-peak@32: 0.790711
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:19:33 [DEBUG] XGB validation: p-rmse: 0.247327	a-peak@32: 0.879064
2025-07-24 03:19:34 [DEBUG] XGB iter   0: tr-p-rmse: 0.487202	tr-a-peak@32: 0.531234	tr-rmse: 0.180314	tr-rmse: 0.180314
2025-07-24 03:19:34 [DEBUG] XGB iter  25: tr-p-rmse: 0.068213	tr-a-peak@32: 0.924769	tr-rmse: 0.299567	tr-rmse: 0.299567
2025-07-24 03:19:34 [DEBUG] XGB iter  50: tr-p-rmse: 0.068213	tr-a-peak@32: 0.924769	tr-rmse: 0.299567	tr-rmse: 0.299567
2025-07-24 03:19:34 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.06821	tr-a-peak@32:0.92477	tr-rmse:0.29957	tr-rmse:0.29957 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:22:29 [DEBUG] XGB validation: p-rmse: 0.091699	a-peak@32: 0.805800
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:24:49 [DEBUG] XGB validation: p-rmse: 0.184180	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ conv1d_nlc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ conv1d_nlc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv1d_nlc_reindex_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[2];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[2];
  nvcuda::wmma::fill_fragment(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  half4 condval;
  if (((((int)blockIdx.x) >> 1) == 1)) {
    condval = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) - 512));
  } else {
    condval = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 4)) = condval;
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 136)) = *(half4*)(inputs + (((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 272)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 512));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 408)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1024));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 544)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1536));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 680)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 816)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2560));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 952)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3072));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1088)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3584));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1224)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4096));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1360)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4608));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1496)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5120));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1632)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5632));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1768)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6144));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1904)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6656));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 2040)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7168));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2176)) = *(half4*)(weight + (((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2496)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 4096));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2816)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 8192));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3136)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 12288));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3456)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 16384));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 20480));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 24576));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4416)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 28672));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4736)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 32768));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5056)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 36864));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5376)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 40960));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5696)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 45056));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6016)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 49152));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6336)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 53248));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 57344));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6976)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 61440));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2176])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2816])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3456])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[4096])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4736])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[5376])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[6016])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[6656])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  half4 condval_1;
  if (((((int)blockIdx.x) >> 1) == 1)) {
    condval_1 = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) - 384));
  } else {
    condval_1 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 4)) = condval_1;
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 136)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 128));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 272)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 640));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 408)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1152));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 544)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1664));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 680)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2176));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 816)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2688));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 952)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3200));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1088)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3712));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1224)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4224));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1360)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4736));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1496)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5248));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1632)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5760));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1768)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6272));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1904)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6784));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 2040)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7296));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2176)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 65536));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2496)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 69632));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2816)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 73728));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3136)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 77824));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3456)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 81920));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 86016));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 90112));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4416)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 94208));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4736)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 98304));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5056)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 102400));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5376)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 106496));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5696)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 110592));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6016)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 114688));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6336)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 118784));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 122880));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6976)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 126976));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2176])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2816])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3456])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[4096])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4736])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[5376])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[6016])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[6656])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  half4 condval_2;
  if (((((int)blockIdx.x) >> 1) == 1)) {
    condval_2 = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) - 256));
  } else {
    condval_2 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 4)) = condval_2;
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 136)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 256));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 272)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 768));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 408)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1280));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 544)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1792));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 680)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2304));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 816)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2816));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 952)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3328));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1088)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3840));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1224)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4352));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1360)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4864));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1496)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5376));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1632)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5888));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1768)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6400));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1904)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6912));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 2040)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7424));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2176)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 131072));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2496)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 135168));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2816)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 139264));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3136)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 143360));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3456)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 147456));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 151552));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 155648));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4416)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 159744));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4736)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 163840));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5056)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 167936));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5376)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 172032));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5696)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 176128));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6016)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 180224));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6336)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 184320));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 188416));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6976)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 192512));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2176])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2816])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3456])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[4096])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4736])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[5376])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[6016])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[6656])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  half4 condval_3;
  if (((((int)blockIdx.x) >> 1) == 1)) {
    condval_3 = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) - 128));
  } else {
    condval_3 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 4)) = condval_3;
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 136)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 384));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 272)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 896));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 408)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1408));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 544)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1920));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 680)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2432));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 816)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2944));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 952)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3456));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1088)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3968));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1224)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4480));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1360)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4992));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1496)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5504));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1632)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6016));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1768)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6528));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1904)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7040));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 2040)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7552));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2176)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 196608));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2496)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 200704));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2816)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 204800));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3136)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 208896));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3456)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 212992));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 217088));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 221184));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4416)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 225280));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4736)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 229376));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5056)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 233472));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5376)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 237568));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5696)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 241664));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6016)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 245760));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6336)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 249856));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 253952));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6976)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 258048));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2176])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2816])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3456])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[4096])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4736])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[5376])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[6016])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[6656])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 4)) = *(half4*)(inputs + (((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 136)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 512));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 272)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1024));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 408)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1536));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 544)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 680)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2560));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 816)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3072));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 952)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3584));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1088)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4096));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1224)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4608));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1360)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5120));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1496)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5632));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1632)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6144));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1768)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6656));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1904)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7168));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 2040)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7680));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2176)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 262144));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2496)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 266240));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2816)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 270336));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3136)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 274432));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3456)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 278528));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 282624));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 286720));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4416)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 290816));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4736)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 294912));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5056)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 299008));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5376)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 303104));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5696)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 307200));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6016)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 311296));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6336)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 315392));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 319488));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6976)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 323584));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2176])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2816])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3456])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[4096])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4736])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[5376])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[6016])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[6656])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 4)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 128));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 136)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 640));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 272)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1152));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 408)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1664));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 544)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2176));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 680)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2688));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 816)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3200));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 952)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3712));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1088)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4224));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1224)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4736));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1360)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5248));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1496)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5760));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1632)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6272));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1768)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6784));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1904)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7296));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 2040)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7808));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2176)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 327680));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2496)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 331776));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2816)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 335872));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3136)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 339968));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3456)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 344064));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 348160));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 352256));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4416)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 356352));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4736)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 360448));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5056)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 364544));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5376)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 368640));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5696)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 372736));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6016)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 376832));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6336)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 380928));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 385024));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6976)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 389120));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2176])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2816])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3456])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[4096])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4736])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[5376])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[6016])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[6656])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 4)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 256));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 136)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 768));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 272)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1280));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 408)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1792));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 544)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2304));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 680)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2816));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 816)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3328));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 952)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3840));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1088)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4352));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1224)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4864));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1360)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5376));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1496)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5888));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1632)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6400));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1768)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6912));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1904)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7424));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 2040)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7936));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2176)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 393216));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2496)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 397312));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2816)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 401408));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3136)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 405504));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3456)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 409600));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 413696));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 417792));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4416)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 421888));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4736)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 425984));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5056)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 430080));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5376)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 434176));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5696)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 438272));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6016)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 442368));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6336)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 446464));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 450560));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6976)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 454656));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2176])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2816])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3456])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[4096])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4736])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[5376])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[6016])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[6656])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 4)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 384));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 136)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 896));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 272)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1408));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 408)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1920));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 544)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2432));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 680)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2944));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 816)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3456));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 952)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3968));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1088)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4480));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1224)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4992));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1360)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5504));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1496)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6016));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1632)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6528));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1768)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7040));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1904)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7552));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 2040)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 8064));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2176)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 458752));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2496)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 462848));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2816)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 466944));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3136)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 471040));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3456)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 475136));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 479232));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 483328));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4416)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 487424));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4736)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 491520));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5056)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 495616));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5376)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 499712));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5696)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 503808));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6016)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 507904));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6336)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 512000));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 516096));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6976)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 520192));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2176])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2816])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3456])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[4096])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4736])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[5376])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[6016])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[6656])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 4)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 512));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 136)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1024));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 272)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1536));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 408)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 544)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2560));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 680)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3072));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 816)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3584));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 952)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4096));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1088)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4608));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1224)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5120));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1360)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5632));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1496)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6144));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1632)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6656));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1768)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7168));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1904)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7680));
  half4 condval_4;
  if ((((int)blockIdx.x) < 2)) {
    condval_4 = *(half4*)(inputs + ((((int)threadIdx.x) * 4) + 8192));
  } else {
    condval_4 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 2040)) = condval_4;
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2176)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 524288));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2496)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 528384));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2816)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 532480));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3136)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 536576));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3456)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 540672));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 544768));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 548864));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4416)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 552960));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4736)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 557056));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5056)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 561152));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5376)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 565248));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5696)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 569344));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6016)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 573440));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6336)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 577536));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 581632));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6976)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 585728));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2176])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2816])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3456])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[4096])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4736])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[5376])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[6016])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[6656])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 4)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 640));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 136)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1152));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 272)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1664));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 408)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2176));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 544)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2688));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 680)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3200));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 816)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3712));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 952)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4224));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1088)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4736));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1224)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5248));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1360)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5760));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1496)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6272));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1632)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6784));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1768)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7296));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1904)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7808));
  half4 condval_5;
  if ((((int)blockIdx.x) < 2)) {
    condval_5 = *(half4*)(inputs + ((((int)threadIdx.x) * 4) + 8320));
  } else {
    condval_5 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 2040)) = condval_5;
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2176)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 589824));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2496)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 593920));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2816)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 598016));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3136)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 602112));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3456)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 606208));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 610304));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 614400));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4416)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 618496));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4736)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 622592));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5056)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 626688));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5376)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 630784));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5696)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 634880));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6016)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 638976));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6336)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 643072));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 647168));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6976)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 651264));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2176])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2816])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3456])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[4096])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4736])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[5376])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[6016])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[6656])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 4)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 768));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 136)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1280));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 272)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1792));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 408)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2304));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 544)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2816));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 680)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3328));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 816)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3840));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 952)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4352));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1088)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4864));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1224)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5376));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1360)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5888));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1496)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6400));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1632)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6912));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1768)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7424));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1904)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7936));
  half4 condval_6;
  if ((((int)blockIdx.x) < 2)) {
    condval_6 = *(half4*)(inputs + ((((int)threadIdx.x) * 4) + 8448));
  } else {
    condval_6 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 2040)) = condval_6;
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2176)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 655360));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2496)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 659456));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2816)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 663552));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3136)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 667648));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3456)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 671744));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 675840));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 679936));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4416)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 684032));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4736)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 688128));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5056)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 692224));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5376)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 696320));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5696)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 700416));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6016)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 704512));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6336)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 708608));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 712704));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6976)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 716800));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2176])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2816])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3456])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[4096])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4736])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[5376])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[6016])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[6656])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 4)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 896));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 136)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1408));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 272)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 1920));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 408)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2432));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 544)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 2944));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 680)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3456));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 816)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 3968));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 952)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4480));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1088)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 4992));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1224)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 5504));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1360)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6016));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1496)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 6528));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1632)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7040));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1768)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 7552));
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 1904)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.x) * 4)) + 8064));
  half4 condval_7;
  if ((((int)blockIdx.x) < 2)) {
    condval_7 = *(half4*)(inputs + ((((int)threadIdx.x) * 4) + 8576));
  } else {
    condval_7 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 4) + 2040)) = condval_7;
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2176)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 720896));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2496)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 724992));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2816)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 729088));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3136)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 733184));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3456)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 737280));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 741376));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 745472));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4416)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 749568));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 4736)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 753664));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5056)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 757760));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5376)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 761856));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 5696)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 765952));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6016)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 770048));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6336)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 774144));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 778240));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 6976)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 782336));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2176])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2816])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3456])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[4096])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4736])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[5376])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[6016])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[6656])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[0])), conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  conv1d_nlc[((((((((int)blockIdx.x) >> 1) * 8192) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15))] = ((half*)buf_dyn_shmem)[((int)threadIdx.x)];
  conv1d_nlc[(((((((((int)blockIdx.x) >> 1) * 8192) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 1024)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 32)];
  conv1d_nlc[(((((((((int)blockIdx.x) >> 1) * 8192) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 2048)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 64)];
  conv1d_nlc[(((((((((int)blockIdx.x) >> 1) * 8192) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 3072)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 96)];
  conv1d_nlc[(((((((((int)blockIdx.x) >> 1) * 8192) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 4096)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 128)];
  conv1d_nlc[(((((((((int)blockIdx.x) >> 1) * 8192) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 5120)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 160)];
  conv1d_nlc[(((((((((int)blockIdx.x) >> 1) * 8192) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 6144)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 192)];
  conv1d_nlc[(((((((((int)blockIdx.x) >> 1) * 8192) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 7168)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 224)];
}


The time of C1D is 0.014 ms
2025-07-24 03:24:52 [INFO] Logging directory: /tmp/tmp_7xrzazn/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:29:06 [DEBUG] XGB iter   0: tr-p-rmse: 0.654026	tr-a-peak@32: 0.925966	tr-rmse: 0.265557	tr-rmse: 0.265557
2025-07-24 03:29:06 [DEBUG] XGB iter  25: tr-p-rmse: 0.058231	tr-a-peak@32: 1.000000	tr-rmse: 0.316040	tr-rmse: 0.316040
2025-07-24 03:29:06 [DEBUG] XGB iter  50: tr-p-rmse: 0.058231	tr-a-peak@32: 1.000000	tr-rmse: 0.316040	tr-rmse: 0.316040
2025-07-24 03:29:08 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.05823	tr-a-peak@32:1.00000	tr-rmse:0.31604	tr-rmse:0.31604 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:33:16 [DEBUG] XGB validation: p-rmse: 0.208475	a-peak@32: 0.974833
2025-07-24 03:33:16 [DEBUG] XGB iter   0: tr-p-rmse: 0.655885	tr-a-peak@32: 0.991495	tr-rmse: 0.293952	tr-rmse: 0.293952
2025-07-24 03:33:16 [DEBUG] XGB iter  25: tr-p-rmse: 0.053202	tr-a-peak@32: 1.000000	tr-rmse: 0.337391	tr-rmse: 0.337391
2025-07-24 03:33:16 [DEBUG] XGB iter  50: tr-p-rmse: 0.053202	tr-a-peak@32: 1.000000	tr-rmse: 0.337391	tr-rmse: 0.337391
2025-07-24 03:33:16 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.05320	tr-a-peak@32:1.00000	tr-rmse:0.33739	tr-rmse:0.33739 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:38:49 [DEBUG] XGB validation: p-rmse: 0.460378	a-peak@32: 0.923179
2025-07-24 03:38:49 [DEBUG] XGB iter   0: tr-p-rmse: 0.677602	tr-a-peak@32: 0.998234	tr-rmse: 0.381762	tr-rmse: 0.381762
2025-07-24 03:38:49 [DEBUG] XGB iter  25: tr-p-rmse: 0.062581	tr-a-peak@32: 0.999243	tr-rmse: 0.428485	tr-rmse: 0.428485
2025-07-24 03:38:49 [DEBUG] XGB iter  50: tr-p-rmse: 0.062581	tr-a-peak@32: 0.999243	tr-rmse: 0.428485	tr-rmse: 0.428485
2025-07-24 03:38:49 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.06258	tr-a-peak@32:0.99924	tr-rmse:0.42848	tr-rmse:0.42848 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:44:09 [DEBUG] XGB validation: p-rmse: 0.083482	a-peak@32: 0.986873
2025-07-24 03:44:09 [DEBUG] XGB iter   0: tr-p-rmse: 0.564857	tr-a-peak@32: 0.959503	tr-rmse: 0.425840	tr-rmse: 0.425840
2025-07-24 03:44:09 [DEBUG] XGB iter  25: tr-p-rmse: 0.058730	tr-a-peak@32: 0.998419	tr-rmse: 0.497831	tr-rmse: 0.497831
2025-07-24 03:44:09 [DEBUG] XGB iter  50: tr-p-rmse: 0.058730	tr-a-peak@32: 0.998419	tr-rmse: 0.497831	tr-rmse: 0.497831
2025-07-24 03:44:09 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.05873	tr-a-peak@32:0.99842	tr-rmse:0.49783	tr-rmse:0.49783 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:49:19 [DEBUG] XGB validation: p-rmse: 0.117210	a-peak@32: 0.944059
2025-07-24 03:49:19 [DEBUG] XGB iter   0: tr-p-rmse: 0.520795	tr-a-peak@32: 0.906256	tr-rmse: 0.445759	tr-rmse: 0.445759
2025-07-24 03:49:19 [DEBUG] XGB iter  25: tr-p-rmse: 0.057698	tr-a-peak@32: 1.000000	tr-rmse: 0.521879	tr-rmse: 0.521879
2025-07-24 03:49:19 [DEBUG] XGB iter  50: tr-p-rmse: 0.057698	tr-a-peak@32: 1.000000	tr-rmse: 0.521879	tr-rmse: 0.521879
2025-07-24 03:49:19 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05770	tr-a-peak@32:1.00000	tr-rmse:0.52188	tr-rmse:0.52188 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:54:28 [DEBUG] XGB validation: p-rmse: 0.143539	a-peak@32: 0.985271
2025-07-24 03:54:28 [DEBUG] XGB iter   0: tr-p-rmse: 0.495291	tr-a-peak@32: 0.966876	tr-rmse: 0.451733	tr-rmse: 0.451733
2025-07-24 03:54:28 [DEBUG] XGB iter  25: tr-p-rmse: 0.059509	tr-a-peak@32: 0.995492	tr-rmse: 0.530580	tr-rmse: 0.530580
2025-07-24 03:54:28 [DEBUG] XGB iter  50: tr-p-rmse: 0.059509	tr-a-peak@32: 0.995492	tr-rmse: 0.530580	tr-rmse: 0.530580
2025-07-24 03:54:28 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.05951	tr-a-peak@32:0.99549	tr-rmse:0.53058	tr-rmse:0.53058 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 03:59:29 [DEBUG] XGB validation: p-rmse: 0.084155	a-peak@32: 0.963065
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 04:04:27 [DEBUG] XGB validation: p-rmse: 0.067090	a-peak@32: 0.988021
2025-07-24 04:04:27 [DEBUG] XGB iter   0: tr-p-rmse: 0.471836	tr-a-peak@32: 0.911505	tr-rmse: 0.476216	tr-rmse: 0.476216
2025-07-24 04:04:27 [DEBUG] XGB iter  25: tr-p-rmse: 0.058461	tr-a-peak@32: 0.985739	tr-rmse: 0.554189	tr-rmse: 0.554189
2025-07-24 04:04:28 [DEBUG] XGB iter  50: tr-p-rmse: 0.058461	tr-a-peak@32: 0.985739	tr-rmse: 0.554189	tr-rmse: 0.554189
2025-07-24 04:04:28 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.05846	tr-a-peak@32:0.98574	tr-rmse:0.55419	tr-rmse:0.55419 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 04:09:29 [DEBUG] XGB validation: p-rmse: 0.087332	a-peak@32: 0.964119
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 04:14:34 [DEBUG] XGB validation: p-rmse: 0.097579	a-peak@32: 0.995094
2025-07-24 04:14:34 [DEBUG] XGB iter   0: tr-p-rmse: 0.449025	tr-a-peak@32: 0.958777	tr-rmse: 0.476404	tr-rmse: 0.476404
2025-07-24 04:14:34 [DEBUG] XGB iter  25: tr-p-rmse: 0.055507	tr-a-peak@32: 0.970751	tr-rmse: 0.556075	tr-rmse: 0.556075
2025-07-24 04:14:34 [DEBUG] XGB iter  50: tr-p-rmse: 0.055507	tr-a-peak@32: 0.970751	tr-rmse: 0.556075	tr-rmse: 0.556075
2025-07-24 04:14:34 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.05551	tr-a-peak@32:0.97075	tr-rmse:0.55607	tr-rmse:0.55607 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 04:19:51 [DEBUG] XGB validation: p-rmse: 0.059657	a-peak@32: 0.991533
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 04:25:03 [DEBUG] XGB validation: p-rmse: 0.073360	a-peak@32: 0.987376
2025-07-24 04:25:03 [DEBUG] XGB iter   0: tr-p-rmse: 0.426271	tr-a-peak@32: 0.967791	tr-rmse: 0.477375	tr-rmse: 0.477375
2025-07-24 04:25:03 [DEBUG] XGB iter  25: tr-p-rmse: 0.056395	tr-a-peak@32: 0.974708	tr-rmse: 0.558589	tr-rmse: 0.558589
2025-07-24 04:25:03 [DEBUG] XGB iter  50: tr-p-rmse: 0.056395	tr-a-peak@32: 0.974708	tr-rmse: 0.558589	tr-rmse: 0.558589
2025-07-24 04:25:03 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.05640	tr-a-peak@32:0.97471	tr-rmse:0.55859	tr-rmse:0.55859 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 04:30:21 [DEBUG] XGB validation: p-rmse: 0.075760	a-peak@32: 0.977495
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 04:35:37 [DEBUG] XGB validation: p-rmse: 0.158616	a-peak@32: 0.909913
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 04:40:47 [DEBUG] XGB validation: p-rmse: 0.140978	a-peak@32: 0.965771
2025-07-24 04:40:47 [DEBUG] XGB iter   0: tr-p-rmse: 0.418746	tr-a-peak@32: 0.931645	tr-rmse: 0.449918	tr-rmse: 0.449918
2025-07-24 04:40:47 [DEBUG] XGB iter  25: tr-p-rmse: 0.057226	tr-a-peak@32: 1.000000	tr-rmse: 0.536134	tr-rmse: 0.536134
2025-07-24 04:40:47 [DEBUG] XGB iter  50: tr-p-rmse: 0.057226	tr-a-peak@32: 1.000000	tr-rmse: 0.536134	tr-rmse: 0.536134
2025-07-24 04:40:47 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.05723	tr-a-peak@32:1.00000	tr-rmse:0.53613	tr-rmse:0.53613 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 04:45:58 [DEBUG] XGB validation: p-rmse: 0.091060	a-peak@32: 0.986510
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 04:50:29 [DEBUG] XGB validation: p-rmse: 0.417621	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[1];
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  for (int ax2_0_0 = 0; ax2_0_0 < 36; ++ax2_0_0) {
    __syncthreads();
    uint4 condval;
    if ((((1 <= ((ax2_0_0 / 12) + (((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) / 7))) && (1 <= (((ax2_0_0 % 12) >> 2) + (((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) % 7)))) && ((((ax2_0_0 % 12) >> 2) + (((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) % 7)) < 8))) {
      condval = *(uint4*)(inputs + (((((((ax2_0_0 / 12) * 3584) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((ax2_0_0 % 12) * 128)) + ((((int)threadIdx.x) & 15) * 8)) - 4096));
    } else {
      condval = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 5120)) = condval;
    uint4 condval_1;
    if (((1 <= (((ax2_0_0 % 12) >> 2) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 1) % 7))) && ((((ax2_0_0 % 12) >> 2) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 1) % 7)) < 8))) {
      condval_1 = *(uint4*)(inputs + ((((((ax2_0_0 / 12) * 3584) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((ax2_0_0 % 12) * 128)) + ((((int)threadIdx.x) & 15) * 8)));
    } else {
      condval_1 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6208)) = condval_1;
    uint4 condval_2;
    if (((1 <= (((ax2_0_0 % 12) >> 2) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 2) % 7))) && ((((ax2_0_0 % 12) >> 2) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 2) % 7)) < 8))) {
      condval_2 = *(uint4*)(inputs + (((((((ax2_0_0 / 12) * 3584) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((ax2_0_0 % 12) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 4096));
    } else {
      condval_2 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 7296)) = condval_2;
    uint4 condval_3;
    if (((1 <= (((ax2_0_0 % 12) >> 2) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 3) % 7))) && ((((ax2_0_0 % 12) >> 2) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 3) % 7)) < 8))) {
      condval_3 = *(uint4*)(inputs + (((((((ax2_0_0 / 12) * 3584) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((ax2_0_0 % 12) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 8192));
    } else {
      condval_3 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8384)) = condval_3;
    uint4 condval_4;
    if (((1 <= (((ax2_0_0 % 12) >> 2) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 4) % 7))) && ((((ax2_0_0 % 12) >> 2) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 4) % 7)) < 8))) {
      condval_4 = *(uint4*)(inputs + (((((((ax2_0_0 / 12) * 3584) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((ax2_0_0 % 12) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 12288));
    } else {
      condval_4 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 9472)) = condval_4;
    uint4 condval_5;
    if ((((((ax2_0_0 / 12) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 40) / 7)) < 8) && (1 <= (((ax2_0_0 % 12) >> 2) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 5) % 7)))) && ((((ax2_0_0 % 12) >> 2) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 5) % 7)) < 8))) {
      condval_5 = *(uint4*)(inputs + (((((((ax2_0_0 / 12) * 3584) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((ax2_0_0 % 12) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 16384));
    } else {
      condval_5 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10560)) = condval_5;
    uint4 condval_6;
    if (((((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) < 1) && (((ax2_0_0 / 12) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 48) / 7)) < 8)) && (1 <= (((ax2_0_0 % 12) >> 2) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 6) % 7)))) && ((((ax2_0_0 % 12) >> 2) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 6) % 7)) < 8))) {
      condval_6 = *(uint4*)(inputs + (((((((ax2_0_0 / 12) * 3584) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((ax2_0_0 % 12) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 20480));
    } else {
      condval_6 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 11648)) = condval_6;
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 12736)) = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 2))) = *(half2*)(weight + (((((ax2_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
    *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 2)) + 640)) = *(half2*)(weight + ((((((ax2_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 8192));
    *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 2)) + 1280)) = *(half2*)(weight + ((((((ax2_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 16384));
    *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 2)) + 1920)) = *(half2*)(weight + ((((((ax2_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 24576));
    *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 2)) + 2560)) = *(half2*)(weight + ((((((ax2_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 32768));
    *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 2)) + 3200)) = *(half2*)(weight + ((((((ax2_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 40960));
    *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 2)) + 3840)) = *(half2*)(weight + ((((((ax2_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 49152));
    *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 2)) + 4480)) = *(half2*)(weight + ((((((ax2_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 57344));
    __syncthreads();
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3200])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3840])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4480])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
  }
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 256)])), conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half4*)(conv2d_nhwc + ((((((int)threadIdx.y) * 4096) + ((((int)threadIdx.x) >> 2) * 512)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 3) * 4))) = *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)));
  if (((((int)threadIdx.y) * 8) + (((int)threadIdx.x) >> 2)) < 17) {
    *(half4*)(conv2d_nhwc + (((((((int)threadIdx.y) * 4096) + ((((int)threadIdx.x) >> 2) * 512)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 16384)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 512));
  }
}


The time of C2D is 0.035 ms
2025-07-24 04:50:30 [INFO] Logging directory: /tmp/tmps287ws4c/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 04:56:41 [DEBUG] XGB iter   0: tr-p-rmse: 0.664062	tr-a-peak@32: 0.943115	tr-rmse: 0.290449	tr-rmse: 0.290449
2025-07-24 04:56:41 [DEBUG] XGB iter  25: tr-p-rmse: 0.059847	tr-a-peak@32: 1.000000	tr-rmse: 0.331466	tr-rmse: 0.331466
2025-07-24 04:56:41 [DEBUG] XGB iter  50: tr-p-rmse: 0.059847	tr-a-peak@32: 1.000000	tr-rmse: 0.331466	tr-rmse: 0.331466
2025-07-24 04:56:41 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05985	tr-a-peak@32:1.00000	tr-rmse:0.33147	tr-rmse:0.33147 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 05:03:25 [DEBUG] XGB validation: p-rmse: 0.125343	a-peak@32: 0.944547
2025-07-24 05:03:25 [DEBUG] XGB iter   0: tr-p-rmse: 0.639927	tr-a-peak@32: 1.000000	tr-rmse: 0.238452	tr-rmse: 0.238452
2025-07-24 05:03:25 [DEBUG] XGB iter  25: tr-p-rmse: 0.056392	tr-a-peak@32: 1.000000	tr-rmse: 0.271242	tr-rmse: 0.271242
2025-07-24 05:03:27 [DEBUG] XGB iter  50: tr-p-rmse: 0.056392	tr-a-peak@32: 1.000000	tr-rmse: 0.271242	tr-rmse: 0.271242
2025-07-24 05:03:27 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.05639	tr-a-peak@32:1.00000	tr-rmse:0.27124	tr-rmse:0.27124 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 05:12:27 [DEBUG] XGB validation: p-rmse: 0.274741	a-peak@32: 0.982495
2025-07-24 05:12:27 [DEBUG] XGB iter   0: tr-p-rmse: 0.577673	tr-a-peak@32: 0.991568	tr-rmse: 0.401397	tr-rmse: 0.401397
2025-07-24 05:12:27 [DEBUG] XGB iter  25: tr-p-rmse: 0.054553	tr-a-peak@32: 0.999864	tr-rmse: 0.470272	tr-rmse: 0.470272
2025-07-24 05:12:27 [DEBUG] XGB iter  50: tr-p-rmse: 0.054553	tr-a-peak@32: 0.999864	tr-rmse: 0.470272	tr-rmse: 0.470272
2025-07-24 05:12:27 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05455	tr-a-peak@32:0.99986	tr-rmse:0.47027	tr-rmse:0.47027 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 05:21:13 [DEBUG] XGB validation: p-rmse: 0.163560	a-peak@32: 0.937627
2025-07-24 05:21:13 [DEBUG] XGB iter   0: tr-p-rmse: 0.531868	tr-a-peak@32: 0.950522	tr-rmse: 0.445057	tr-rmse: 0.445057
2025-07-24 05:21:13 [DEBUG] XGB iter  25: tr-p-rmse: 0.062967	tr-a-peak@32: 1.000000	tr-rmse: 0.518532	tr-rmse: 0.518532
2025-07-24 05:21:13 [DEBUG] XGB iter  50: tr-p-rmse: 0.062967	tr-a-peak@32: 1.000000	tr-rmse: 0.518532	tr-rmse: 0.518532
2025-07-24 05:21:13 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.06297	tr-a-peak@32:1.00000	tr-rmse:0.51853	tr-rmse:0.51853 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 05:29:57 [DEBUG] XGB validation: p-rmse: 0.083226	a-peak@32: 0.972742
2025-07-24 05:29:57 [DEBUG] XGB iter   0: tr-p-rmse: 0.493715	tr-a-peak@32: 0.969191	tr-rmse: 0.466301	tr-rmse: 0.466301
2025-07-24 05:29:57 [DEBUG] XGB iter  25: tr-p-rmse: 0.066270	tr-a-peak@32: 0.987591	tr-rmse: 0.542809	tr-rmse: 0.542809
2025-07-24 05:29:57 [DEBUG] XGB iter  50: tr-p-rmse: 0.066270	tr-a-peak@32: 0.987591	tr-rmse: 0.542809	tr-rmse: 0.542809
2025-07-24 05:29:57 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.06627	tr-a-peak@32:0.98759	tr-rmse:0.54281	tr-rmse:0.54281 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 05:38:49 [DEBUG] XGB validation: p-rmse: 0.181629	a-peak@32: 0.945446
2025-07-24 05:38:49 [DEBUG] XGB iter   0: tr-p-rmse: 0.474304	tr-a-peak@32: 0.968082	tr-rmse: 0.480378	tr-rmse: 0.480378
2025-07-24 05:38:49 [DEBUG] XGB iter  25: tr-p-rmse: 0.069521	tr-a-peak@32: 0.969635	tr-rmse: 0.557058	tr-rmse: 0.557058
2025-07-24 05:38:49 [DEBUG] XGB iter  50: tr-p-rmse: 0.069521	tr-a-peak@32: 0.969635	tr-rmse: 0.557058	tr-rmse: 0.557058
2025-07-24 05:38:49 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.06952	tr-a-peak@32:0.96964	tr-rmse:0.55706	tr-rmse:0.55706 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 05:47:37 [DEBUG] XGB validation: p-rmse: 0.091765	a-peak@32: 0.980994
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 05:56:41 [DEBUG] XGB validation: p-rmse: 0.101302	a-peak@32: 0.987027
2025-07-24 05:56:41 [DEBUG] XGB iter   0: tr-p-rmse: 0.439955	tr-a-peak@32: 0.968775	tr-rmse: 0.477579	tr-rmse: 0.477579
2025-07-24 05:56:41 [DEBUG] XGB iter  25: tr-p-rmse: 0.068774	tr-a-peak@32: 0.995922	tr-rmse: 0.557030	tr-rmse: 0.557030
2025-07-24 05:56:41 [DEBUG] XGB iter  50: tr-p-rmse: 0.068774	tr-a-peak@32: 0.995922	tr-rmse: 0.557030	tr-rmse: 0.557030
2025-07-24 05:56:42 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.06877	tr-a-peak@32:0.99592	tr-rmse:0.55703	tr-rmse:0.55703 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 06:05:33 [DEBUG] XGB validation: p-rmse: 0.146709	a-peak@32: 0.924859
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 06:13:35 [DEBUG] XGB validation: p-rmse: 0.134971	a-peak@32: 0.940737
2025-07-24 06:13:35 [DEBUG] XGB iter   0: tr-p-rmse: 0.423022	tr-a-peak@32: 0.957321	tr-rmse: 0.470733	tr-rmse: 0.470733
2025-07-24 06:13:35 [DEBUG] XGB iter  25: tr-p-rmse: 0.066517	tr-a-peak@32: 0.999168	tr-rmse: 0.552288	tr-rmse: 0.552288
2025-07-24 06:13:35 [DEBUG] XGB iter  50: tr-p-rmse: 0.066517	tr-a-peak@32: 0.999168	tr-rmse: 0.552289	tr-rmse: 0.552289
2025-07-24 06:13:35 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.06652	tr-a-peak@32:0.99917	tr-rmse:0.55229	tr-rmse:0.55229 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 06:22:07 [DEBUG] XGB validation: p-rmse: 0.097123	a-peak@32: 0.968945
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 06:30:28 [DEBUG] XGB validation: p-rmse: 0.089545	a-peak@32: 0.973770
2025-07-24 06:30:28 [DEBUG] XGB iter   0: tr-p-rmse: 0.405320	tr-a-peak@32: 0.961409	tr-rmse: 0.477752	tr-rmse: 0.477752
2025-07-24 06:30:28 [DEBUG] XGB iter  25: tr-p-rmse: 0.067910	tr-a-peak@32: 0.999712	tr-rmse: 0.559086	tr-rmse: 0.559086
2025-07-24 06:30:28 [DEBUG] XGB iter  50: tr-p-rmse: 0.067910	tr-a-peak@32: 0.999712	tr-rmse: 0.559086	tr-rmse: 0.559086
2025-07-24 06:30:28 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.06791	tr-a-peak@32:0.99971	tr-rmse:0.55909	tr-rmse:0.55909 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 06:39:04 [DEBUG] XGB validation: p-rmse: 0.073109	a-peak@32: 0.967407
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 06:47:10 [DEBUG] XGB validation: p-rmse: 0.078144	a-peak@32: 0.937794
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 06:55:41 [DEBUG] XGB validation: p-rmse: 0.105060	a-peak@32: 0.920045
2025-07-24 06:55:41 [DEBUG] XGB iter   0: tr-p-rmse: 0.390879	tr-a-peak@32: 0.954036	tr-rmse: 0.463581	tr-rmse: 0.463581
2025-07-24 06:55:41 [DEBUG] XGB iter  25: tr-p-rmse: 0.066740	tr-a-peak@32: 0.997861	tr-rmse: 0.548357	tr-rmse: 0.548357
2025-07-24 06:55:41 [DEBUG] XGB iter  50: tr-p-rmse: 0.066740	tr-a-peak@32: 0.997861	tr-rmse: 0.548357	tr-rmse: 0.548357
2025-07-24 06:55:41 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.06674	tr-a-peak@32:0.99786	tr-rmse:0.54836	tr-rmse:0.54836 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:04:32 [DEBUG] XGB validation: p-rmse: 0.083478	a-peak@32: 0.971104
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv3d_ndhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv3d_ndhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[2];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[2];
  for (int ax1_0_4_init = 0; ax1_0_4_init < 2; ++ax1_0_4_init) {
    nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[ax1_0_4_init], 0.000000e+00f);
  }
  for (int ax2_0_0 = 0; ax2_0_0 < 108; ++ax2_0_0) {
    __syncthreads();
    for (int ax0_ax1_fused_0 = 0; ax0_ax1_fused_0 < 2; ++ax0_ax1_fused_0) {
      uint4 condval;
      if (((((((1 <= (((((((((int)blockIdx.y) * 112) + ((((int)blockIdx.x) >> 2) * 16)) + (ax0_ax1_fused_0 * 8)) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) / 49) + (ax2_0_0 / 36))) && ((((((((((int)blockIdx.y) * 112) + ((((int)blockIdx.x) >> 2) * 16)) + (ax0_ax1_fused_0 * 8)) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) / 49) + (ax2_0_0 / 36)) < 17)) && (1 <= (((ax2_0_0 % 36) / 12) + (((((int)blockIdx.y) * 2) + ((((((((int)blockIdx.x) >> 2) * 16) + (ax0_ax1_fused_0 * 8)) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) / 7)) % 7)))) && ((((ax2_0_0 % 36) / 12) + (((((int)blockIdx.y) * 2) + ((((((((int)blockIdx.x) >> 2) * 16) + (ax0_ax1_fused_0 * 8)) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) / 7)) % 7)) < 8)) && (1 <= (((ax2_0_0 % 12) >> 2) + ((((((((int)blockIdx.x) >> 2) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + ax0_ax1_fused_0) % 7)))) && ((((ax2_0_0 % 12) >> 2) + ((((((((int)blockIdx.x) >> 2) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + ax0_ax1_fused_0) % 7)) < 8))) {
        condval = *(uint4*)(inputs + ((((((((((((int)blockIdx.y) * 57344) + ((ax2_0_0 / 36) * 25088)) + ((((int)blockIdx.x) >> 2) * 8192)) + (ax0_ax1_fused_0 * 4096)) + (((ax2_0_0 % 36) / 12) * 3584)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((ax2_0_0 % 12) * 128)) + ((((int)threadIdx.x) & 15) * 8)) - 29184));
      } else {
        condval = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
      }
      *(uint4*)(((half*)buf_dyn_shmem) + ((((ax0_ax1_fused_0 * 1088) + (((int)threadIdx.y) * 272)) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval;
    }
    for (int ax0_ax1_fused_0_1 = 0; ax0_ax1_fused_0_1 < 16; ++ax0_ax1_fused_0_1) {
      *(uint4*)(((half*)buf_dyn_shmem) + (((((ax0_ax1_fused_0_1 * 1088) + (((int)threadIdx.y) * 272)) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + ((((((ax2_0_0 * 65536) + (ax0_ax1_fused_0_1 * 4096)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)blockIdx.x) & 3) * 128)) + ((((int)threadIdx.x) & 15) * 8)));
    }
    __syncthreads();
    for (int ax2_0_1 = 0; ax2_0_1 < 8; ++ax2_0_1) {
      nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(ax2_0_1 * 16)])), 136);
      for (int ax1_0 = 0; ax1_0 < 2; ++ax1_0) {
        nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[ax1_0], (&(((half*)buf_dyn_shmem)[((((ax2_0_1 * 2176) + (((int)threadIdx.y) * 32)) + (ax1_0 * 16)) + 2176)])), 136);
      }
      for (int ax1_0_4 = 0; ax1_0_4 < 2; ++ax1_0_4) {
        nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[ax1_0_4], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[ax1_0_4], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[ax1_0_4]);
      }
    }
  }
  __syncthreads();
  for (int ax3 = 0; ax3 < 2; ++ax3) {
    nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + (ax3 * 256))])), conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[ax3], 16, nvcuda::wmma::mem_row_major);
  }
  __syncthreads();
  for (int ax0_ax1_ax3_ax4_ax5_fused_0 = 0; ax0_ax1_ax3_ax4_ax5_fused_0 < 8; ++ax0_ax1_ax3_ax4_ax5_fused_0) {
    *(half2*)(conv3d_ndhwc + (((((((((int)blockIdx.y) * 57344) + ((((int)blockIdx.x) >> 2) * 8192)) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + ((((int)blockIdx.x) & 3) * 128)) + (ax0_ax1_ax3_ax4_ax5_fused_0 * 16)) + ((((int)threadIdx.x) & 7) * 2))) = *(half2*)(((half*)buf_dyn_shmem) + (((ax0_ax1_ax3_ax4_ax5_fused_0 * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)));
  }
}


The time of C3D is 0.380 ms
2025-07-24 07:04:33 [INFO] Logging directory: /tmp/tmpg4i4fkz5/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:07:15 [DEBUG] XGB iter   0: tr-p-rmse: 0.503330	tr-a-peak@32: 0.960681	tr-rmse: 0.389892	tr-rmse: 0.389892
2025-07-24 07:07:15 [DEBUG] XGB iter  25: tr-p-rmse: 0.039993	tr-a-peak@32: 1.000000	tr-rmse: 0.470488	tr-rmse: 0.470488
2025-07-24 07:07:15 [DEBUG] XGB iter  50: tr-p-rmse: 0.039993	tr-a-peak@32: 1.000000	tr-rmse: 0.470488	tr-rmse: 0.470488
2025-07-24 07:07:15 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.03999	tr-a-peak@32:1.00000	tr-rmse:0.47049	tr-rmse:0.47049 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:09:48 [DEBUG] XGB validation: p-rmse: 0.267370	a-peak@32: 0.906001
2025-07-24 07:09:48 [DEBUG] XGB iter   0: tr-p-rmse: 0.510742	tr-a-peak@32: 0.952751	tr-rmse: 0.381135	tr-rmse: 0.381135
2025-07-24 07:09:48 [DEBUG] XGB iter  25: tr-p-rmse: 0.050026	tr-a-peak@32: 0.999623	tr-rmse: 0.461494	tr-rmse: 0.461494
2025-07-24 07:09:48 [DEBUG] XGB iter  50: tr-p-rmse: 0.050026	tr-a-peak@32: 0.999623	tr-rmse: 0.461494	tr-rmse: 0.461494
2025-07-24 07:09:48 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.05003	tr-a-peak@32:0.99962	tr-rmse:0.46149	tr-rmse:0.46149 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:11:58 [DEBUG] XGB validation: p-rmse: 0.110030	a-peak@32: 0.992917
2025-07-24 07:11:58 [DEBUG] XGB iter   0: tr-p-rmse: 0.464294	tr-a-peak@32: 0.931030	tr-rmse: 0.388528	tr-rmse: 0.388528
2025-07-24 07:11:58 [DEBUG] XGB iter  25: tr-p-rmse: 0.036529	tr-a-peak@32: 1.000000	tr-rmse: 0.475715	tr-rmse: 0.475715
2025-07-24 07:11:58 [DEBUG] XGB iter  50: tr-p-rmse: 0.036529	tr-a-peak@32: 1.000000	tr-rmse: 0.475715	tr-rmse: 0.475715
2025-07-24 07:11:58 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.03653	tr-a-peak@32:1.00000	tr-rmse:0.47571	tr-rmse:0.47571 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:14:37 [DEBUG] XGB validation: p-rmse: 0.105304	a-peak@32: 0.992499
2025-07-24 07:14:37 [DEBUG] XGB iter   0: tr-p-rmse: 0.440028	tr-a-peak@32: 0.980444	tr-rmse: 0.398943	tr-rmse: 0.398943
2025-07-24 07:14:37 [DEBUG] XGB iter  25: tr-p-rmse: 0.044594	tr-a-peak@32: 0.990761	tr-rmse: 0.487535	tr-rmse: 0.487535
2025-07-24 07:14:37 [DEBUG] XGB iter  50: tr-p-rmse: 0.044594	tr-a-peak@32: 0.990761	tr-rmse: 0.487535	tr-rmse: 0.487535
2025-07-24 07:14:37 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.04459	tr-a-peak@32:0.99076	tr-rmse:0.48753	tr-rmse:0.48753 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:16:39 [DEBUG] XGB validation: p-rmse: 0.108706	a-peak@32: 0.996280
2025-07-24 07:16:39 [DEBUG] XGB iter   0: tr-p-rmse: 0.415497	tr-a-peak@32: 0.936278	tr-rmse: 0.414863	tr-rmse: 0.414863
2025-07-24 07:16:39 [DEBUG] XGB iter  25: tr-p-rmse: 0.051432	tr-a-peak@32: 0.979407	tr-rmse: 0.503223	tr-rmse: 0.503223
2025-07-24 07:16:39 [DEBUG] XGB iter  50: tr-p-rmse: 0.051432	tr-a-peak@32: 0.979407	tr-rmse: 0.503223	tr-rmse: 0.503223
2025-07-24 07:16:39 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.05143	tr-a-peak@32:0.97941	tr-rmse:0.50322	tr-rmse:0.50322 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:18:49 [DEBUG] XGB validation: p-rmse: 0.133326	a-peak@32: 0.982970
2025-07-24 07:18:49 [DEBUG] XGB iter   0: tr-p-rmse: 0.401353	tr-a-peak@32: 0.900772	tr-rmse: 0.427267	tr-rmse: 0.427267
2025-07-24 07:18:49 [DEBUG] XGB iter  25: tr-p-rmse: 0.065169	tr-a-peak@32: 0.980961	tr-rmse: 0.515404	tr-rmse: 0.515404
2025-07-24 07:18:49 [DEBUG] XGB iter  50: tr-p-rmse: 0.065169	tr-a-peak@32: 0.980961	tr-rmse: 0.515404	tr-rmse: 0.515404
2025-07-24 07:18:49 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.06517	tr-a-peak@32:0.98096	tr-rmse:0.51540	tr-rmse:0.51540 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:21:01 [DEBUG] XGB validation: p-rmse: 0.087445	a-peak@32: 0.955848
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:23:51 [DEBUG] XGB validation: p-rmse: 0.114728	a-peak@32: 0.902936
2025-07-24 07:23:51 [DEBUG] XGB iter   0: tr-p-rmse: 0.379948	tr-a-peak@32: 0.864175	tr-rmse: 0.437132	tr-rmse: 0.437132
2025-07-24 07:23:51 [DEBUG] XGB iter  25: tr-p-rmse: 0.064142	tr-a-peak@32: 0.967704	tr-rmse: 0.525206	tr-rmse: 0.525206
2025-07-24 07:23:51 [DEBUG] XGB iter  50: tr-p-rmse: 0.064142	tr-a-peak@32: 0.967704	tr-rmse: 0.525206	tr-rmse: 0.525206
2025-07-24 07:23:51 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.06414	tr-a-peak@32:0.96770	tr-rmse:0.52521	tr-rmse:0.52521 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:26:50 [DEBUG] XGB validation: p-rmse: 0.105121	a-peak@32: 0.954546
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:29:50 [DEBUG] XGB validation: p-rmse: 0.078360	a-peak@32: 0.946264
2025-07-24 07:29:50 [DEBUG] XGB iter   0: tr-p-rmse: 0.367872	tr-a-peak@32: 0.979191	tr-rmse: 0.441351	tr-rmse: 0.441351
2025-07-24 07:29:50 [DEBUG] XGB iter  25: tr-p-rmse: 0.067086	tr-a-peak@32: 0.941730	tr-rmse: 0.529826	tr-rmse: 0.529826
2025-07-24 07:29:50 [DEBUG] XGB iter  50: tr-p-rmse: 0.067086	tr-a-peak@32: 0.941730	tr-rmse: 0.529826	tr-rmse: 0.529826
2025-07-24 07:29:50 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.06709	tr-a-peak@32:0.94173	tr-rmse:0.52983	tr-rmse:0.52983 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:32:49 [DEBUG] XGB validation: p-rmse: 0.108475	a-peak@32: 0.968627
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:35:52 [DEBUG] XGB validation: p-rmse: 0.103010	a-peak@32: 0.935657
2025-07-24 07:35:52 [DEBUG] XGB iter   0: tr-p-rmse: 0.360262	tr-a-peak@32: 0.941727	tr-rmse: 0.441364	tr-rmse: 0.441364
2025-07-24 07:35:52 [DEBUG] XGB iter  25: tr-p-rmse: 0.069614	tr-a-peak@32: 0.946139	tr-rmse: 0.530504	tr-rmse: 0.530504
2025-07-24 07:35:52 [DEBUG] XGB iter  50: tr-p-rmse: 0.069614	tr-a-peak@32: 0.946139	tr-rmse: 0.530504	tr-rmse: 0.530504
2025-07-24 07:35:52 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.06961	tr-a-peak@32:0.94614	tr-rmse:0.53050	tr-rmse:0.53050 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:38:54 [DEBUG] XGB validation: p-rmse: 0.107082	a-peak@32: 0.913804
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:41:15 [DEBUG] XGB validation: p-rmse: 0.086108	a-peak@32: 0.987434
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:44:15 [DEBUG] XGB validation: p-rmse: 0.096358	a-peak@32: 0.909578
2025-07-24 07:44:15 [DEBUG] XGB iter   0: tr-p-rmse: 0.351615	tr-a-peak@32: 0.885428	tr-rmse: 0.443501	tr-rmse: 0.443501
2025-07-24 07:44:15 [DEBUG] XGB iter  25: tr-p-rmse: 0.069223	tr-a-peak@32: 0.900258	tr-rmse: 0.532972	tr-rmse: 0.532972
2025-07-24 07:44:15 [DEBUG] XGB iter  50: tr-p-rmse: 0.069223	tr-a-peak@32: 0.900258	tr-rmse: 0.532972	tr-rmse: 0.532972
2025-07-24 07:44:15 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.06922	tr-a-peak@32:0.90026	tr-rmse:0.53297	tr-rmse:0.53297 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:47:17 [DEBUG] XGB validation: p-rmse: 0.089580	a-peak@32: 0.937791
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:49:39 [DEBUG] XGB validation: p-rmse: 0.287839	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ X, half* __restrict__ Y, half* __restrict__ Z);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ X, half* __restrict__ Y, half* __restrict__ Z) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> Z_reindex_shared_dyn_wmma_accumulator[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> X_reindex_shared_dyn_wmma_matrix_a[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> Y_reindex_shared_dyn_wmma_matrix_b[4];
  nvcuda::wmma::fill_fragment(Z_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(Z_reindex_shared_dyn_wmma_accumulator[1], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(Z_reindex_shared_dyn_wmma_accumulator[2], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(Z_reindex_shared_dyn_wmma_accumulator[3], 0.000000e+00f);
  for (int ax3_0_0 = 0; ax3_0_0 < 16; ++ax3_0_0) {
    __syncthreads();
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4608)) = *(uint4*)(X + (((((((((int)blockIdx.y) >> 2) * 262144) + ((((int)blockIdx.x) >> 2) * 65536)) + (((int)threadIdx.y) * 4096)) + ((((int)threadIdx.x) >> 3) * 1024)) + (ax3_0_0 * 64)) + ((((int)threadIdx.x) & 7) * 8)));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 5760)) = *(uint4*)(X + ((((((((((int)blockIdx.y) >> 2) * 262144) + ((((int)blockIdx.x) >> 2) * 65536)) + (((int)threadIdx.y) * 4096)) + ((((int)threadIdx.x) >> 3) * 1024)) + (ax3_0_0 * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 16384));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6912)) = *(uint4*)(X + ((((((((((int)blockIdx.y) >> 2) * 262144) + ((((int)blockIdx.x) >> 2) * 65536)) + (((int)threadIdx.y) * 4096)) + ((((int)threadIdx.x) >> 3) * 1024)) + (ax3_0_0 * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 32768));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8064)) = *(uint4*)(X + ((((((((((int)blockIdx.y) >> 2) * 262144) + ((((int)blockIdx.x) >> 2) * 65536)) + (((int)threadIdx.y) * 4096)) + ((((int)threadIdx.x) >> 3) * 1024)) + (ax3_0_0 * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 49152));
    *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4))) = *(half4*)(Y + ((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 576)) = *(half4*)(Y + (((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 8192));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 1152)) = *(half4*)(Y + (((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 16384));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 1728)) = *(half4*)(Y + (((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 24576));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 2304)) = *(half4*)(Y + (((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 32768));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 2880)) = *(half4*)(Y + (((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 40960));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 3456)) = *(half4*)(Y + (((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 49152));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 4032)) = *(half4*)(Y + (((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 57344));
    __syncthreads();
    nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2304) + 4608)])), 72);
    nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2304) + 4624)])), 72);
    nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2304) + 5760)])), 72);
    nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2304) + 5776)])), 72);
    nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) & 1) * 32)])), 72);
    nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 16)])), 72);
    nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 1152)])), 72);
    nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 1168)])), 72);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[2], Z_reindex_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[1], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[1]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[1], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[3], Z_reindex_shared_dyn_wmma_accumulator[1]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[2], X_reindex_shared_dyn_wmma_matrix_a[2], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[2]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[2], X_reindex_shared_dyn_wmma_matrix_a[3], Y_reindex_shared_dyn_wmma_matrix_b[2], Z_reindex_shared_dyn_wmma_accumulator[2]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[3], X_reindex_shared_dyn_wmma_matrix_a[2], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[3]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[3], X_reindex_shared_dyn_wmma_matrix_a[3], Y_reindex_shared_dyn_wmma_matrix_b[3], Z_reindex_shared_dyn_wmma_accumulator[3]);
    nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2304) + 4640)])), 72);
    nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2304) + 4656)])), 72);
    nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2304) + 5792)])), 72);
    nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2304) + 5808)])), 72);
    nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 2304)])), 72);
    nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 2320)])), 72);
    nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 3456)])), 72);
    nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 3472)])), 72);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[2], Z_reindex_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[1], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[1]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[1], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[3], Z_reindex_shared_dyn_wmma_accumulator[1]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[2], X_reindex_shared_dyn_wmma_matrix_a[2], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[2]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[2], X_reindex_shared_dyn_wmma_matrix_a[3], Y_reindex_shared_dyn_wmma_matrix_b[2], Z_reindex_shared_dyn_wmma_accumulator[2]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[3], X_reindex_shared_dyn_wmma_matrix_a[2], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[3]);
    nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[3], X_reindex_shared_dyn_wmma_matrix_a[3], Y_reindex_shared_dyn_wmma_matrix_b[3], Z_reindex_shared_dyn_wmma_accumulator[3]);
  }
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + 4608)])), Z_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + 4864)])), Z_reindex_shared_dyn_wmma_accumulator[1], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half4*)(Z + (((((((((((int)blockIdx.y) >> 2) * 262144) + ((((int)blockIdx.x) >> 2) * 65536)) + ((((int)threadIdx.y) & 1) * 8192)) + ((((int)threadIdx.x) >> 2) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4))) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 4608));
  *(half4*)(Z + ((((((((((((int)blockIdx.y) >> 2) * 262144) + ((((int)blockIdx.x) >> 2) * 65536)) + ((((int)threadIdx.y) & 1) * 8192)) + ((((int)threadIdx.x) >> 2) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 32)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 5120));
  *(half4*)(Z + ((((((((((((int)blockIdx.y) >> 2) * 262144) + ((((int)blockIdx.x) >> 2) * 65536)) + ((((int)threadIdx.y) & 1) * 8192)) + ((((int)threadIdx.x) >> 2) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 32768)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 5632));
  *(half4*)(Z + ((((((((((((int)blockIdx.y) >> 2) * 262144) + ((((int)blockIdx.x) >> 2) * 65536)) + ((((int)threadIdx.y) & 1) * 8192)) + ((((int)threadIdx.x) >> 2) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 32800)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 6144));
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + 4608)])), Z_reindex_shared_dyn_wmma_accumulator[2], 16, nvcuda::wmma::mem_row_major);
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + 4864)])), Z_reindex_shared_dyn_wmma_accumulator[3], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half4*)(Z + ((((((((((((int)blockIdx.y) >> 2) * 262144) + ((((int)blockIdx.x) >> 2) * 65536)) + ((((int)threadIdx.y) & 1) * 8192)) + ((((int)threadIdx.x) >> 2) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 16384)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 4608));
  *(half4*)(Z + ((((((((((((int)blockIdx.y) >> 2) * 262144) + ((((int)blockIdx.x) >> 2) * 65536)) + ((((int)threadIdx.y) & 1) * 8192)) + ((((int)threadIdx.x) >> 2) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 16416)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 5120));
  *(half4*)(Z + ((((((((((((int)blockIdx.y) >> 2) * 262144) + ((((int)blockIdx.x) >> 2) * 65536)) + ((((int)threadIdx.y) & 1) * 8192)) + ((((int)threadIdx.x) >> 2) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 49152)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 5632));
  *(half4*)(Z + ((((((((((((int)blockIdx.y) >> 2) * 262144) + ((((int)blockIdx.x) >> 2) * 65536)) + ((((int)threadIdx.y) & 1) * 8192)) + ((((int)threadIdx.x) >> 2) * 1024)) + ((((int)blockIdx.y) & 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 49184)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 6144));
}


The time of GMM is 0.043 ms
2025-07-24 07:49:41 [INFO] Logging directory: /tmp/tmpg14mz3dy/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:51:49 [DEBUG] XGB iter   0: tr-p-rmse: 0.643946	tr-a-peak@32: 0.997196	tr-rmse: 0.463490	tr-rmse: 0.463490
2025-07-24 07:51:49 [DEBUG] XGB iter  25: tr-p-rmse: 0.254609	tr-a-peak@32: 1.000000	tr-rmse: 0.516057	tr-rmse: 0.516057
2025-07-24 07:51:49 [DEBUG] XGB iter  50: tr-p-rmse: 0.254609	tr-a-peak@32: 1.000000	tr-rmse: 0.516057	tr-rmse: 0.516057
2025-07-24 07:51:49 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.25461	tr-a-peak@32:1.00000	tr-rmse:0.51606	tr-rmse:0.51606 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:53:48 [DEBUG] XGB validation: p-rmse: 0.328652	a-peak@32: 0.994446
2025-07-24 07:53:48 [DEBUG] XGB iter   0: tr-p-rmse: 0.669829	tr-a-peak@32: 0.955734	tr-rmse: 0.436419	tr-rmse: 0.436419
2025-07-24 07:53:48 [DEBUG] XGB iter  25: tr-p-rmse: 0.279024	tr-a-peak@32: 1.000000	tr-rmse: 0.485935	tr-rmse: 0.485935
2025-07-24 07:53:48 [DEBUG] XGB iter  50: tr-p-rmse: 0.279024	tr-a-peak@32: 1.000000	tr-rmse: 0.485935	tr-rmse: 0.485935
2025-07-24 07:53:48 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.27902	tr-a-peak@32:1.00000	tr-rmse:0.48593	tr-rmse:0.48593 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:56:17 [DEBUG] XGB validation: p-rmse: 0.217743	a-peak@32: 0.986636
2025-07-24 07:56:17 [DEBUG] XGB iter   0: tr-p-rmse: 0.575741	tr-a-peak@32: 0.932044	tr-rmse: 0.542346	tr-rmse: 0.542346
2025-07-24 07:56:17 [DEBUG] XGB iter  25: tr-p-rmse: 0.229479	tr-a-peak@32: 0.993907	tr-rmse: 0.595433	tr-rmse: 0.595433
2025-07-24 07:56:17 [DEBUG] XGB iter  50: tr-p-rmse: 0.229479	tr-a-peak@32: 0.993907	tr-rmse: 0.595433	tr-rmse: 0.595433
2025-07-24 07:56:17 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.22948	tr-a-peak@32:0.99391	tr-rmse:0.59543	tr-rmse:0.59543 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 07:58:18 [DEBUG] XGB validation: p-rmse: 0.392213	a-peak@32: 0.675681
2025-07-24 07:58:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.531268	tr-a-peak@32: 0.785286	tr-rmse: 0.480451	tr-rmse: 0.480451
2025-07-24 07:58:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.219325	tr-a-peak@32: 0.995826	tr-rmse: 0.539084	tr-rmse: 0.539084
2025-07-24 07:58:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.219325	tr-a-peak@32: 0.995826	tr-rmse: 0.539084	tr-rmse: 0.539084
2025-07-24 07:58:18 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.21932	tr-a-peak@32:0.99583	tr-rmse:0.53908	tr-rmse:0.53908 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:00:04 [DEBUG] XGB validation: p-rmse: 0.354786	a-peak@32: 0.613989
2025-07-24 08:00:04 [DEBUG] XGB iter   0: tr-p-rmse: 0.522383	tr-a-peak@32: 0.796144	tr-rmse: 0.499153	tr-rmse: 0.499153
2025-07-24 08:00:04 [DEBUG] XGB iter  25: tr-p-rmse: 0.242244	tr-a-peak@32: 0.980449	tr-rmse: 0.557478	tr-rmse: 0.557478
2025-07-24 08:00:05 [DEBUG] XGB iter  50: tr-p-rmse: 0.242244	tr-a-peak@32: 0.980449	tr-rmse: 0.557478	tr-rmse: 0.557478
2025-07-24 08:00:05 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.24224	tr-a-peak@32:0.98045	tr-rmse:0.55748	tr-rmse:0.55748 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:01:44 [DEBUG] XGB validation: p-rmse: 0.122266	a-peak@32: 0.966916
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:03:29 [DEBUG] XGB validation: p-rmse: 0.157856	a-peak@32: 0.927248
2025-07-24 08:03:29 [DEBUG] XGB iter   0: tr-p-rmse: 0.477552	tr-a-peak@32: 0.856161	tr-rmse: 0.511721	tr-rmse: 0.511721
2025-07-24 08:03:29 [DEBUG] XGB iter  25: tr-p-rmse: 0.206064	tr-a-peak@32: 0.918306	tr-rmse: 0.570158	tr-rmse: 0.570158
2025-07-24 08:03:30 [DEBUG] XGB iter  50: tr-p-rmse: 0.206064	tr-a-peak@32: 0.918306	tr-rmse: 0.570158	tr-rmse: 0.570158
2025-07-24 08:03:30 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.20606	tr-a-peak@32:0.91831	tr-rmse:0.57016	tr-rmse:0.57016 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:05:58 [DEBUG] XGB validation: p-rmse: 0.287449	a-peak@32: 0.858253
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:08:26 [DEBUG] XGB validation: p-rmse: 0.290560	a-peak@32: 0.952876
2025-07-24 08:08:26 [DEBUG] XGB iter   0: tr-p-rmse: 0.447182	tr-a-peak@32: 0.880327	tr-rmse: 0.497000	tr-rmse: 0.497000
2025-07-24 08:08:26 [DEBUG] XGB iter  25: tr-p-rmse: 0.184412	tr-a-peak@32: 0.929215	tr-rmse: 0.555921	tr-rmse: 0.555921
2025-07-24 08:08:26 [DEBUG] XGB iter  50: tr-p-rmse: 0.184412	tr-a-peak@32: 0.929215	tr-rmse: 0.555921	tr-rmse: 0.555921
2025-07-24 08:08:26 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.18441	tr-a-peak@32:0.92922	tr-rmse:0.55592	tr-rmse:0.55592 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:10:06 [DEBUG] XGB validation: p-rmse: 0.104925	a-peak@32: 0.956579
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:11:48 [DEBUG] XGB validation: p-rmse: 0.079955	a-peak@32: 0.913153
2025-07-24 08:11:48 [DEBUG] XGB iter   0: tr-p-rmse: 0.423338	tr-a-peak@32: 0.903839	tr-rmse: 0.508947	tr-rmse: 0.508947
2025-07-24 08:11:48 [DEBUG] XGB iter  25: tr-p-rmse: 0.165550	tr-a-peak@32: 0.969597	tr-rmse: 0.567641	tr-rmse: 0.567641
2025-07-24 08:11:48 [DEBUG] XGB iter  50: tr-p-rmse: 0.165550	tr-a-peak@32: 0.969597	tr-rmse: 0.567641	tr-rmse: 0.567641
2025-07-24 08:11:48 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.16555	tr-a-peak@32:0.96960	tr-rmse:0.56764	tr-rmse:0.56764 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:13:32 [DEBUG] XGB validation: p-rmse: 0.071303	a-peak@32: 0.867364
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:15:17 [DEBUG] XGB validation: p-rmse: 0.128178	a-peak@32: 0.861604
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:17:13 [DEBUG] XGB validation: p-rmse: 0.256509	a-peak@32: 0.698632
2025-07-24 08:17:13 [DEBUG] XGB iter   0: tr-p-rmse: 0.395725	tr-a-peak@32: 0.667560	tr-rmse: 0.403808	tr-rmse: 0.403808
2025-07-24 08:17:13 [DEBUG] XGB iter  25: tr-p-rmse: 0.133057	tr-a-peak@32: 1.000000	tr-rmse: 0.469545	tr-rmse: 0.469545
2025-07-24 08:17:13 [DEBUG] XGB iter  50: tr-p-rmse: 0.133057	tr-a-peak@32: 1.000000	tr-rmse: 0.469545	tr-rmse: 0.469545
2025-07-24 08:17:13 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.13306	tr-a-peak@32:1.00000	tr-rmse:0.46955	tr-rmse:0.46955 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:19:01 [DEBUG] XGB validation: p-rmse: 0.141437	a-peak@32: 0.967609
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:20:50 [DEBUG] XGB validation: p-rmse: 0.147328	a-peak@32: 0.945758
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:22:04 [DEBUG] XGB validation: p-rmse: 0.160081	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(196) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(196) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  half conv2d_nhwc_local[2];
  __shared__ half PadInput_shared[1296];
  __shared__ half weight_shared[1152];
  conv2d_nhwc_local[0] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[1] = __float2half_rn(0.000000e+00f);
  for (int rc_0 = 0; rc_0 < 8; ++rc_0) {
    __syncthreads();
    half condval;
    if ((((72 <= ((int)threadIdx.x)) && (8 <= (((int)threadIdx.x) % 72))) && ((((int)threadIdx.x) % 72) < 64))) {
      condval = inputs[(((((((((int)threadIdx.x) / 72) * 3584) + (((((int)threadIdx.x) % 72) >> 3) * 512)) + ((((int)blockIdx.x) >> 4) * 128)) + (rc_0 * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 4096)];
    } else {
      condval = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[(((int)threadIdx.x) * 2)] = condval;
    half condval_1;
    if ((((72 <= ((int)threadIdx.x)) && (8 <= (((int)threadIdx.x) % 72))) && ((((int)threadIdx.x) % 72) < 64))) {
      condval_1 = inputs[(((((((((int)threadIdx.x) / 72) * 3584) + (((((int)threadIdx.x) % 72) >> 3) * 512)) + ((((int)blockIdx.x) >> 4) * 128)) + (rc_0 * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 4095)];
    } else {
      condval_1 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 1)] = condval_1;
    half condval_2;
    if (((2 <= (((((int)threadIdx.x) >> 2) + 13) % 18)) && ((((((int)threadIdx.x) * 2) + 104) % 144) < 128))) {
      condval_2 = inputs[((((((((((int)threadIdx.x) + 196) / 72) * 3584) + (((((((int)threadIdx.x) >> 2) + 13) % 18) >> 1) * 512)) + ((((int)blockIdx.x) >> 4) * 128)) + (rc_0 * 16)) + (((((int)threadIdx.x) * 2) + 8) & 15)) - 4096)];
    } else {
      condval_2 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 392)] = condval_2;
    half condval_3;
    if (((2 <= (((((int)threadIdx.x) >> 2) + 13) % 18)) && ((((((int)threadIdx.x) * 2) + 105) % 144) < 128))) {
      condval_3 = inputs[((((((((((int)threadIdx.x) + 196) / 72) * 3584) + (((((((int)threadIdx.x) >> 2) + 13) % 18) >> 1) * 512)) + ((((int)blockIdx.x) >> 4) * 128)) + (rc_0 * 16)) + (((((int)threadIdx.x) * 2) + 9) & 15)) - 4096)];
    } else {
      condval_3 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 393)] = condval_3;
    half condval_4;
    if ((((((int)threadIdx.x) < 184) && (1 <= (((((int)threadIdx.x) >> 3) + 4) % 9))) && ((((((int)threadIdx.x) * 2) + 64) % 144) < 128))) {
      condval_4 = inputs[((((((((((int)threadIdx.x) + 392) / 72) * 3584) + ((((((int)threadIdx.x) >> 3) + 4) % 9) * 512)) + ((((int)blockIdx.x) >> 4) * 128)) + (rc_0 * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 4096)];
    } else {
      condval_4 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 784)] = condval_4;
    half condval_5;
    if ((((((int)threadIdx.x) < 184) && (1 <= (((((int)threadIdx.x) >> 3) + 4) % 9))) && ((((((int)threadIdx.x) * 2) + 65) % 144) < 128))) {
      condval_5 = inputs[((((((((((int)threadIdx.x) + 392) / 72) * 3584) + ((((((int)threadIdx.x) >> 3) + 4) % 9) * 512)) + ((((int)blockIdx.x) >> 4) * 128)) + (rc_0 * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 4095)];
    } else {
      condval_5 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 785)] = condval_5;
    if (((int)threadIdx.x) < 60) {
      PadInput_shared[((((int)threadIdx.x) * 2) + 1176)] = __float2half_rn(0.000000e+00f);
      PadInput_shared[((((int)threadIdx.x) * 2) + 1177)] = __float2half_rn(0.000000e+00f);
    }
    *(half2*)(weight_shared + (((int)threadIdx.x) * 2)) = *(half2*)(weight + ((((((((int)threadIdx.x) >> 6) * 65536) + (rc_0 * 8192)) + (((((int)threadIdx.x) & 63) >> 2) * 512)) + (((int)blockIdx.x) * 8)) + ((((int)threadIdx.x) & 3) * 2)));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 392)) = *(half2*)(weight + (((((((((int)threadIdx.x) + 196) >> 6) * 65536) + (rc_0 * 8192)) + ((((((int)threadIdx.x) >> 2) + 1) & 15) * 512)) + (((int)blockIdx.x) * 8)) + ((((int)threadIdx.x) & 3) * 2)));
    if (((int)threadIdx.x) < 184) {
      *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 784)) = *(half2*)(weight + (((((((((int)threadIdx.x) + 392) >> 6) * 65536) + (rc_0 * 8192)) + ((((((int)threadIdx.x) >> 2) + 2) & 15) * 512)) + (((int)blockIdx.x) * 8)) + ((((int)threadIdx.x) & 3) * 2)));
    }
    __syncthreads();
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16))] * weight_shared[((((int)threadIdx.x) & 3) * 2)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16))] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 144)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 384)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 144)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 385)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 288)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 768)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 288)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 769)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 1)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 8)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 1)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 9)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 145)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 392)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 145)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 393)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 289)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 776)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 289)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 777)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 2)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 16)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 2)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 17)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 146)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 400)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 146)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 401)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 290)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 784)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 290)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 785)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 3)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 24)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 3)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 25)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 147)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 408)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 147)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 409)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 291)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 792)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 291)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 793)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 4)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 32)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 4)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 33)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 148)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 416)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 148)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 417)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 292)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 800)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 292)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 801)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 5)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 40)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 5)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 41)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 149)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 424)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 149)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 425)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 293)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 808)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 293)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 809)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 6)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 48)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 6)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 49)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 150)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 432)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 150)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 433)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 294)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 816)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 294)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 817)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 7)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 56)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 7)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 57)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 151)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 440)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 151)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 441)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 295)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 824)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 295)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 825)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 8)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 64)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 8)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 65)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 152)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 448)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 152)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 449)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 296)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 832)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 296)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 833)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 9)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 72)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 9)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 73)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 153)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 456)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 153)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 457)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 297)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 840)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 297)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 841)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 10)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 80)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 10)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 81)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 154)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 464)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 154)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 465)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 298)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 848)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 298)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 849)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 11)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 88)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 11)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 89)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 155)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 472)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 155)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 473)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 299)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 856)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 299)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 857)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 12)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 96)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 12)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 97)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 156)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 480)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 156)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 481)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 300)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 864)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 300)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 865)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 13)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 104)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 13)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 105)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 157)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 488)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 157)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 489)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 301)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 872)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 301)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 873)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 14)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 112)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 14)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 113)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 158)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 496)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 158)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 497)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 302)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 880)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 302)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 881)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 15)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 120)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 15)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 121)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 159)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 504)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 159)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 505)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 303)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 888)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 303)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 889)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 16)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 128)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 16)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 129)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 160)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 512)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 160)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 513)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 304)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 896)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 304)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 897)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 17)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 136)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 17)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 137)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 161)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 520)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 161)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 521)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 305)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 904)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 305)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 905)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 18)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 144)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 18)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 145)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 162)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 528)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 162)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 529)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 306)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 912)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 306)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 913)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 19)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 152)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 19)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 153)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 163)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 536)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 163)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 537)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 307)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 920)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 307)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 921)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 20)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 160)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 20)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 161)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 164)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 544)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 164)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 545)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 308)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 928)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 308)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 929)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 21)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 168)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 21)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 169)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 165)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 552)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 165)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 553)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 309)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 936)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 309)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 937)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 22)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 176)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 22)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 177)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 166)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 560)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 166)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 561)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 310)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 944)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 310)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 945)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 23)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 184)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 23)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 185)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 167)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 568)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 167)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 569)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 311)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 952)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 311)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 953)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 24)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 192)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 24)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 193)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 168)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 576)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 168)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 577)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 312)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 960)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 312)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 961)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 25)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 200)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 25)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 201)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 169)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 584)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 169)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 585)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 313)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 968)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 313)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 969)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 26)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 208)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 26)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 209)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 170)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 592)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 170)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 593)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 314)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 976)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 314)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 977)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 27)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 216)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 27)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 217)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 171)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 600)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 171)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 601)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 315)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 984)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 315)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 985)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 28)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 224)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 28)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 225)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 172)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 608)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 172)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 609)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 316)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 992)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 316)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 993)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 29)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 232)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 29)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 233)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 173)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 616)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 173)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 617)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 317)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1000)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 317)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1001)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 30)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 240)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 30)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 241)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 174)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 624)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 174)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 625)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 318)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1008)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 318)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1009)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 31)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 248)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 31)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 249)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 175)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 632)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 175)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 633)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 319)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1016)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 319)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1017)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 32)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 256)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 32)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 257)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 176)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 640)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 176)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 641)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 320)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1024)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 320)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1025)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 33)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 264)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 33)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 265)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 177)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 648)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 177)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 649)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 321)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1032)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 321)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1033)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 34)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 272)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 34)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 273)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 178)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 656)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 178)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 657)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 322)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1040)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 322)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1041)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 35)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 280)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 35)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 281)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 179)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 664)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 179)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 665)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 323)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1048)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 323)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1049)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 36)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 288)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 36)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 289)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 180)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 672)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 180)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 673)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 324)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1056)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 324)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1057)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 37)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 296)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 37)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 297)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 181)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 680)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 181)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 681)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 325)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1064)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 325)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1065)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 38)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 304)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 38)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 305)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 182)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 688)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 182)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 689)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 326)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1072)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 326)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1073)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 39)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 312)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 39)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 313)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 183)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 696)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 183)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 697)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 327)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1080)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 327)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1081)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 40)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 320)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 40)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 321)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 184)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 704)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 184)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 705)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 328)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1088)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 328)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1089)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 41)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 328)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 41)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 329)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 185)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 712)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 185)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 713)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 329)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1096)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 329)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1097)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 42)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 336)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 42)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 337)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 186)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 720)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 186)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 721)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 330)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1104)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 330)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1105)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 43)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 344)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 43)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 345)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 187)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 728)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 187)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 729)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 331)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1112)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 331)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1113)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 44)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 352)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 44)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 353)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 188)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 736)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 188)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 737)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 332)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1120)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 332)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1121)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 45)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 360)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 45)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 361)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 189)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 744)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 189)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 745)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 333)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1128)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 333)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1129)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 46)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 368)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 46)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 369)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 190)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 752)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 190)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 753)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 334)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1136)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 334)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1137)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 47)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 376)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 47)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 377)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 191)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 760)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 191)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 761)]));
    conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 335)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1144)]));
    conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 28) * 144) + (((((int)threadIdx.x) % 28) >> 2) * 16)) + 335)] * weight_shared[(((((int)threadIdx.x) & 3) * 2) + 1145)]));
  }
  conv2d_nhwc[((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.x) * 8)) + ((((int)threadIdx.x) & 3) * 2))] = conv2d_nhwc_local[0];
  conv2d_nhwc[(((((((int)threadIdx.x) >> 2) * 512) + (((int)blockIdx.x) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 1)] = conv2d_nhwc_local[1];
}


The time of GRP is 0.017 ms
2025-07-24 08:22:06 [INFO] Logging directory: /tmp/tmpokny_pcd/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:24:52 [DEBUG] XGB iter   0: tr-p-rmse: 0.599211	tr-a-peak@32: 0.850795	tr-rmse: 0.288400	tr-rmse: 0.288400
2025-07-24 08:24:52 [DEBUG] XGB iter  25: tr-p-rmse: 0.054448	tr-a-peak@32: 1.000000	tr-rmse: 0.335791	tr-rmse: 0.335791
2025-07-24 08:24:52 [DEBUG] XGB iter  50: tr-p-rmse: 0.054448	tr-a-peak@32: 1.000000	tr-rmse: 0.335791	tr-rmse: 0.335791
2025-07-24 08:24:52 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05445	tr-a-peak@32:1.00000	tr-rmse:0.33579	tr-rmse:0.33579 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:27:26 [DEBUG] XGB validation: p-rmse: 0.239658	a-peak@32: 1.000000
2025-07-24 08:27:26 [DEBUG] XGB iter   0: tr-p-rmse: 0.604751	tr-a-peak@32: 0.652195	tr-rmse: 0.261723	tr-rmse: 0.261723
2025-07-24 08:27:26 [DEBUG] XGB iter  25: tr-p-rmse: 0.050078	tr-a-peak@32: 1.000000	tr-rmse: 0.313648	tr-rmse: 0.313648
2025-07-24 08:27:26 [DEBUG] XGB iter  50: tr-p-rmse: 0.050078	tr-a-peak@32: 1.000000	tr-rmse: 0.313648	tr-rmse: 0.313648
2025-07-24 08:27:26 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05008	tr-a-peak@32:1.00000	tr-rmse:0.31365	tr-rmse:0.31365 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:32:20 [DEBUG] XGB validation: p-rmse: 0.329844	a-peak@32: 0.886250
2025-07-24 08:32:20 [DEBUG] XGB iter   0: tr-p-rmse: 0.562158	tr-a-peak@32: 0.927063	tr-rmse: 0.368830	tr-rmse: 0.368830
2025-07-24 08:32:20 [DEBUG] XGB iter  25: tr-p-rmse: 0.048128	tr-a-peak@32: 0.999176	tr-rmse: 0.441476	tr-rmse: 0.441476
2025-07-24 08:32:20 [DEBUG] XGB iter  50: tr-p-rmse: 0.048128	tr-a-peak@32: 0.999176	tr-rmse: 0.441476	tr-rmse: 0.441476
2025-07-24 08:32:20 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.04813	tr-a-peak@32:0.99918	tr-rmse:0.44148	tr-rmse:0.44148 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:37:37 [DEBUG] XGB validation: p-rmse: 0.113147	a-peak@32: 0.960815
2025-07-24 08:37:37 [DEBUG] XGB iter   0: tr-p-rmse: 0.517601	tr-a-peak@32: 0.945710	tr-rmse: 0.397681	tr-rmse: 0.397681
2025-07-24 08:37:37 [DEBUG] XGB iter  25: tr-p-rmse: 0.051008	tr-a-peak@32: 0.999403	tr-rmse: 0.478177	tr-rmse: 0.478177
2025-07-24 08:37:37 [DEBUG] XGB iter  50: tr-p-rmse: 0.051008	tr-a-peak@32: 0.999403	tr-rmse: 0.478177	tr-rmse: 0.478177
2025-07-24 08:37:37 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05101	tr-a-peak@32:0.99940	tr-rmse:0.47818	tr-rmse:0.47818 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:42:54 [DEBUG] XGB validation: p-rmse: 0.154022	a-peak@32: 0.971228
2025-07-24 08:42:54 [DEBUG] XGB iter   0: tr-p-rmse: 0.487207	tr-a-peak@32: 0.941853	tr-rmse: 0.430915	tr-rmse: 0.430915
2025-07-24 08:42:54 [DEBUG] XGB iter  25: tr-p-rmse: 0.053368	tr-a-peak@32: 0.998914	tr-rmse: 0.510130	tr-rmse: 0.510130
2025-07-24 08:42:54 [DEBUG] XGB iter  50: tr-p-rmse: 0.053368	tr-a-peak@32: 0.998914	tr-rmse: 0.510130	tr-rmse: 0.510130
2025-07-24 08:42:54 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.05337	tr-a-peak@32:0.99891	tr-rmse:0.51013	tr-rmse:0.51013 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:48:06 [DEBUG] XGB validation: p-rmse: 0.070551	a-peak@32: 0.989313
2025-07-24 08:48:06 [DEBUG] XGB iter   0: tr-p-rmse: 0.456181	tr-a-peak@32: 0.909106	tr-rmse: 0.453643	tr-rmse: 0.453643
2025-07-24 08:48:06 [DEBUG] XGB iter  25: tr-p-rmse: 0.054818	tr-a-peak@32: 0.999772	tr-rmse: 0.532789	tr-rmse: 0.532789
2025-07-24 08:48:06 [DEBUG] XGB iter  50: tr-p-rmse: 0.054818	tr-a-peak@32: 0.999772	tr-rmse: 0.532789	tr-rmse: 0.532789
2025-07-24 08:48:06 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.05482	tr-a-peak@32:0.99977	tr-rmse:0.53279	tr-rmse:0.53279 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:53:19 [DEBUG] XGB validation: p-rmse: 0.060465	a-peak@32: 0.987970
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 08:58:32 [DEBUG] XGB validation: p-rmse: 0.052991	a-peak@32: 0.992412
2025-07-24 08:58:32 [DEBUG] XGB iter   0: tr-p-rmse: 0.418591	tr-a-peak@32: 0.971683	tr-rmse: 0.478043	tr-rmse: 0.478043
2025-07-24 08:58:32 [DEBUG] XGB iter  25: tr-p-rmse: 0.053363	tr-a-peak@32: 0.988450	tr-rmse: 0.556798	tr-rmse: 0.556798
2025-07-24 08:58:32 [DEBUG] XGB iter  50: tr-p-rmse: 0.053363	tr-a-peak@32: 0.988450	tr-rmse: 0.556798	tr-rmse: 0.556798
2025-07-24 08:58:32 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.05336	tr-a-peak@32:0.98845	tr-rmse:0.55680	tr-rmse:0.55680 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:03:37 [DEBUG] XGB validation: p-rmse: 0.105198	a-peak@32: 0.939143
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:08:43 [DEBUG] XGB validation: p-rmse: 0.121012	a-peak@32: 0.894336
2025-07-24 09:08:43 [DEBUG] XGB iter   0: tr-p-rmse: 0.415604	tr-a-peak@32: 0.883232	tr-rmse: 0.425149	tr-rmse: 0.425149
2025-07-24 09:08:43 [DEBUG] XGB iter  25: tr-p-rmse: 0.053286	tr-a-peak@32: 0.995203	tr-rmse: 0.513597	tr-rmse: 0.513597
2025-07-24 09:08:43 [DEBUG] XGB iter  50: tr-p-rmse: 0.053286	tr-a-peak@32: 0.995203	tr-rmse: 0.513597	tr-rmse: 0.513597
2025-07-24 09:08:43 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.05329	tr-a-peak@32:0.99520	tr-rmse:0.51360	tr-rmse:0.51360 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:13:49 [DEBUG] XGB validation: p-rmse: 0.069689	a-peak@32: 0.987607
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:19:00 [DEBUG] XGB validation: p-rmse: 0.070591	a-peak@32: 0.973012
2025-07-24 09:19:00 [DEBUG] XGB iter   0: tr-p-rmse: 0.403822	tr-a-peak@32: 0.850991	tr-rmse: 0.441440	tr-rmse: 0.441440
2025-07-24 09:19:00 [DEBUG] XGB iter  25: tr-p-rmse: 0.053970	tr-a-peak@32: 0.999989	tr-rmse: 0.528162	tr-rmse: 0.528162
2025-07-24 09:19:00 [DEBUG] XGB iter  50: tr-p-rmse: 0.053970	tr-a-peak@32: 0.999989	tr-rmse: 0.528162	tr-rmse: 0.528162
2025-07-24 09:19:00 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05397	tr-a-peak@32:0.99999	tr-rmse:0.52816	tr-rmse:0.52816 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:24:12 [DEBUG] XGB validation: p-rmse: 0.072876	a-peak@32: 0.988539
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:29:28 [DEBUG] XGB validation: p-rmse: 0.080538	a-peak@32: 0.993258
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:34:51 [DEBUG] XGB validation: p-rmse: 0.104909	a-peak@32: 0.981373
2025-07-24 09:34:51 [DEBUG] XGB iter   0: tr-p-rmse: 0.385764	tr-a-peak@32: 0.971650	tr-rmse: 0.441912	tr-rmse: 0.441912
2025-07-24 09:34:51 [DEBUG] XGB iter  25: tr-p-rmse: 0.056268	tr-a-peak@32: 0.997690	tr-rmse: 0.529773	tr-rmse: 0.529773
2025-07-24 09:34:51 [DEBUG] XGB iter  50: tr-p-rmse: 0.056268	tr-a-peak@32: 0.997690	tr-rmse: 0.529773	tr-rmse: 0.529773
2025-07-24 09:34:51 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05627	tr-a-peak@32:0.99769	tr-rmse:0.52977	tr-rmse:0.52977 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:40:11 [DEBUG] XGB validation: p-rmse: 0.066433	a-peak@32: 0.991007
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:44:49 [DEBUG] XGB validation: p-rmse: 0.170886	a-peak@32: 0.889023
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_pad_shared_dyn_wmma_matrix_a[2];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[2];
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  for (int ax2_0_0 = 0; ax2_0_0 < 18; ++ax2_0_0) {
    bool cse_var_4 = (ax2_0_0 < 12);
    bool cse_var_3 = (6 <= ax2_0_0);
    bool cse_var_2 = ((ax2_0_0 % 6) < 4);
    bool cse_var_1 = (2 <= (ax2_0_0 % 6));
    __syncthreads();
    half2 condval;
    if ((cse_var_3 && cse_var_1)) {
      condval = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 4096));
    } else {
      condval = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2))) = condval;
    half2 condval_1;
    if (cse_var_3) {
      condval_1 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 3584));
    } else {
      condval_1 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 264)) = condval_1;
    half2 condval_2;
    if (cse_var_3) {
      condval_2 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 3072));
    } else {
      condval_2 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 528)) = condval_2;
    half2 condval_3;
    if (cse_var_3) {
      condval_3 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 2560));
    } else {
      condval_3 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 792)) = condval_3;
    half2 condval_4;
    if ((cse_var_3 && cse_var_2)) {
      condval_4 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 2048));
    } else {
      condval_4 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1056)) = condval_4;
    half2 condval_5;
    if (cse_var_1) {
      condval_5 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 512));
    } else {
      condval_5 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1320)) = condval_5;
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1584)) = *(half2*)(inputs + ((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1848)) = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 512));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 2112)) = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 1024));
    half2 condval_6;
    if (cse_var_2) {
      condval_6 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 1536));
    } else {
      condval_6 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 2376)) = condval_6;
    half2 condval_7;
    if (cse_var_1) {
      condval_7 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 3072));
    } else {
      condval_7 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 2640)) = condval_7;
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 2904)) = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 3584));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 3168)) = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 4096));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 3432)) = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 4608));
    half2 condval_8;
    if (cse_var_2) {
      condval_8 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 5120));
    } else {
      condval_8 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 3696)) = condval_8;
    half2 condval_9;
    if (cse_var_1) {
      condval_9 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 6656));
    } else {
      condval_9 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 3960)) = condval_9;
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 4224)) = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 7168));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 4488)) = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 7680));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 4752)) = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8192));
    half2 condval_10;
    if (cse_var_2) {
      condval_10 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8704));
    } else {
      condval_10 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 5016)) = condval_10;
    half2 condval_11;
    if ((cse_var_4 && cse_var_1)) {
      condval_11 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 10240));
    } else {
      condval_11 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 5280)) = condval_11;
    half2 condval_12;
    if (cse_var_4) {
      condval_12 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 10752));
    } else {
      condval_12 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 5544)) = condval_12;
    half2 condval_13;
    if (cse_var_4) {
      condval_13 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11264));
    } else {
      condval_13 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 5808)) = condval_13;
    half2 condval_14;
    if (cse_var_4) {
      condval_14 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11776));
    } else {
      condval_14 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 6072)) = condval_14;
    half2 condval_15;
    if (((ax2_0_0 < 10) && cse_var_2)) {
      condval_15 = *(half2*)(inputs + (((((((ax2_0_0 / 6) * 7168) + (((ax2_0_0 % 6) >> 1) * 1024)) + ((ax2_0_0 & 1) * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12288));
    } else {
      condval_15 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 6336)) = condval_15;
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 6600)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 6864)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 7128)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 7392)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 7656)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 7920)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 8184)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 8448)) = *(uint4*)(weight + ((((((ax2_0_0 * 131072) + (((int)threadIdx.y) * 4096)) + ((((int)threadIdx.x) >> 2) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 3) * 8)));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 9728)) = *(uint4*)(weight + (((((((ax2_0_0 * 131072) + (((int)threadIdx.y) * 4096)) + ((((int)threadIdx.x) >> 2) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 16384));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 11008)) = *(uint4*)(weight + (((((((ax2_0_0 * 131072) + (((int)threadIdx.y) * 4096)) + ((((int)threadIdx.x) >> 2) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 32768));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 12288)) = *(uint4*)(weight + (((((((ax2_0_0 * 131072) + (((int)threadIdx.y) * 4096)) + ((((int)threadIdx.x) >> 2) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 49152));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 13568)) = *(uint4*)(weight + (((((((ax2_0_0 * 131072) + (((int)threadIdx.y) * 4096)) + ((((int)threadIdx.x) >> 2) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 65536));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 14848)) = *(uint4*)(weight + (((((((ax2_0_0 * 131072) + (((int)threadIdx.y) * 4096)) + ((((int)threadIdx.x) >> 2) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 81920));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 16128)) = *(uint4*)(weight + (((((((ax2_0_0 * 131072) + (((int)threadIdx.y) * 4096)) + ((((int)threadIdx.x) >> 2) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 98304));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 17408)) = *(uint4*)(weight + (((((((ax2_0_0 * 131072) + (((int)threadIdx.y) * 4096)) + ((((int)threadIdx.x) >> 2) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 114688));
    __syncthreads();
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 1) * 4224)])), 264);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 16)])), 264);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 8448)])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 9088)])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 32)])), 264);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 48)])), 264);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 9728)])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 10368)])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 64)])), 264);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 80)])), 264);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 11008)])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 11648)])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 96)])), 264);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 112)])), 264);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 12288)])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 12928)])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 128)])), 264);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 144)])), 264);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 13568)])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 14208)])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 160)])), 264);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 176)])), 264);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 14848)])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 15488)])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 192)])), 264);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 208)])), 264);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 16128)])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 16768)])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 224)])), 264);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 4224) + 240)])), 264);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 17408)])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 18048)])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
  }
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 256)])), conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  conv2d_nhwc[(((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) & 15))] = ((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 32) + ((int)threadIdx.x))];
  conv2d_nhwc[((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) & 15)) + 4096)] = ((half*)buf_dyn_shmem)[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 128)];
  conv2d_nhwc[((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) & 15)) + 16)] = ((half*)buf_dyn_shmem)[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 256)];
  conv2d_nhwc[((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) & 15)) + 4112)] = ((half*)buf_dyn_shmem)[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 384)];
  conv2d_nhwc[((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) & 15)) + 8192)] = ((half*)buf_dyn_shmem)[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 512)];
  if (((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) < 1) {
    conv2d_nhwc[((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) & 15)) + 12288)] = ((half*)buf_dyn_shmem)[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 640)];
  }
  conv2d_nhwc[((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) & 15)) + 8208)] = ((half*)buf_dyn_shmem)[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 768)];
  if (((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) < 1) {
    conv2d_nhwc[((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 256)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) & 15)) + 12304)] = ((half*)buf_dyn_shmem)[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 896)];
  }
}


The time of DIL is 0.033 ms
2025-07-24 09:44:51 [INFO] Logging directory: /tmp/tmp05p0bl1n/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:46:35 [DEBUG] XGB iter   0: tr-p-rmse: 0.464726	tr-a-peak@32: 0.798207	tr-rmse: 0.419844	tr-rmse: 0.419844
2025-07-24 09:46:35 [DEBUG] XGB iter  25: tr-p-rmse: 0.032169	tr-a-peak@32: 1.000000	tr-rmse: 0.463205	tr-rmse: 0.463205
2025-07-24 09:46:35 [DEBUG] XGB iter  50: tr-p-rmse: 0.032169	tr-a-peak@32: 1.000000	tr-rmse: 0.463205	tr-rmse: 0.463205
2025-07-24 09:46:35 [DEBUG] XGB stopped. Best iteration: [10] tr-p-rmse:0.03217	tr-a-peak@32:1.00000	tr-rmse:0.46321	tr-rmse:0.46321 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:48:06 [DEBUG] XGB validation: p-rmse: 0.197788	a-peak@32: 0.947648
2025-07-24 09:48:06 [DEBUG] XGB iter   0: tr-p-rmse: 0.460200	tr-a-peak@32: 0.936699	tr-rmse: 0.438334	tr-rmse: 0.438334
2025-07-24 09:48:06 [DEBUG] XGB iter  25: tr-p-rmse: 0.039184	tr-a-peak@32: 1.000000	tr-rmse: 0.482680	tr-rmse: 0.482680
2025-07-24 09:48:06 [DEBUG] XGB iter  50: tr-p-rmse: 0.039184	tr-a-peak@32: 1.000000	tr-rmse: 0.482680	tr-rmse: 0.482680
2025-07-24 09:48:06 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.03918	tr-a-peak@32:1.00000	tr-rmse:0.48268	tr-rmse:0.48268 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:50:15 [DEBUG] XGB validation: p-rmse: 0.331448	a-peak@32: 0.987135
2025-07-24 09:50:15 [DEBUG] XGB iter   0: tr-p-rmse: 0.422850	tr-a-peak@32: 0.788924	tr-rmse: 0.356101	tr-rmse: 0.356101
2025-07-24 09:50:15 [DEBUG] XGB iter  25: tr-p-rmse: 0.051007	tr-a-peak@32: 1.000000	tr-rmse: 0.412199	tr-rmse: 0.412199
2025-07-24 09:50:15 [DEBUG] XGB iter  50: tr-p-rmse: 0.051007	tr-a-peak@32: 1.000000	tr-rmse: 0.412199	tr-rmse: 0.412199
2025-07-24 09:50:15 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.05101	tr-a-peak@32:1.00000	tr-rmse:0.41220	tr-rmse:0.41220 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:52:26 [DEBUG] XGB validation: p-rmse: 0.285302	a-peak@32: 0.983131
2025-07-24 09:52:26 [DEBUG] XGB iter   0: tr-p-rmse: 0.414184	tr-a-peak@32: 0.972781	tr-rmse: 0.368708	tr-rmse: 0.368708
2025-07-24 09:52:26 [DEBUG] XGB iter  25: tr-p-rmse: 0.065080	tr-a-peak@32: 1.000000	tr-rmse: 0.424856	tr-rmse: 0.424856
2025-07-24 09:52:26 [DEBUG] XGB iter  50: tr-p-rmse: 0.065080	tr-a-peak@32: 1.000000	tr-rmse: 0.424856	tr-rmse: 0.424856
2025-07-24 09:52:26 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.06508	tr-a-peak@32:1.00000	tr-rmse:0.42486	tr-rmse:0.42486 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:54:36 [DEBUG] XGB validation: p-rmse: 0.257322	a-peak@32: 0.988515
2025-07-24 09:54:36 [DEBUG] XGB iter   0: tr-p-rmse: 0.405700	tr-a-peak@32: 0.691734	tr-rmse: 0.365645	tr-rmse: 0.365645
2025-07-24 09:54:37 [DEBUG] XGB iter  25: tr-p-rmse: 0.081678	tr-a-peak@32: 0.999899	tr-rmse: 0.424278	tr-rmse: 0.424278
2025-07-24 09:54:37 [DEBUG] XGB iter  50: tr-p-rmse: 0.081678	tr-a-peak@32: 0.999899	tr-rmse: 0.424278	tr-rmse: 0.424278
2025-07-24 09:54:37 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.08168	tr-a-peak@32:0.99990	tr-rmse:0.42428	tr-rmse:0.42428 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:56:50 [DEBUG] XGB validation: p-rmse: 0.270587	a-peak@32: 0.924612
2025-07-24 09:56:50 [DEBUG] XGB iter   0: tr-p-rmse: 0.402835	tr-a-peak@32: 0.909557	tr-rmse: 0.352021	tr-rmse: 0.352021
2025-07-24 09:56:50 [DEBUG] XGB iter  25: tr-p-rmse: 0.086978	tr-a-peak@32: 0.999899	tr-rmse: 0.411754	tr-rmse: 0.411754
2025-07-24 09:56:50 [DEBUG] XGB iter  50: tr-p-rmse: 0.086978	tr-a-peak@32: 0.999899	tr-rmse: 0.411754	tr-rmse: 0.411754
2025-07-24 09:56:50 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.08698	tr-a-peak@32:0.99990	tr-rmse:0.41175	tr-rmse:0.41175 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 09:59:03 [DEBUG] XGB validation: p-rmse: 0.167068	a-peak@32: 0.988483
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:01:15 [DEBUG] XGB validation: p-rmse: 0.170176	a-peak@32: 0.993397
2025-07-24 10:01:15 [DEBUG] XGB iter   0: tr-p-rmse: 0.396009	tr-a-peak@32: 0.642120	tr-rmse: 0.353921	tr-rmse: 0.353921
2025-07-24 10:01:16 [DEBUG] XGB iter  25: tr-p-rmse: 0.084879	tr-a-peak@32: 0.998819	tr-rmse: 0.414400	tr-rmse: 0.414400
2025-07-24 10:01:16 [DEBUG] XGB iter  50: tr-p-rmse: 0.084879	tr-a-peak@32: 0.998819	tr-rmse: 0.414400	tr-rmse: 0.414400
2025-07-24 10:01:16 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.08488	tr-a-peak@32:0.99882	tr-rmse:0.41440	tr-rmse:0.41440 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:03:27 [DEBUG] XGB validation: p-rmse: 0.195258	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:05:39 [DEBUG] XGB validation: p-rmse: 0.239447	a-peak@32: 0.978805
2025-07-24 10:05:39 [DEBUG] XGB iter   0: tr-p-rmse: 0.400356	tr-a-peak@32: 0.626688	tr-rmse: 0.309825	tr-rmse: 0.309825
2025-07-24 10:05:39 [DEBUG] XGB iter  25: tr-p-rmse: 0.083338	tr-a-peak@32: 0.984039	tr-rmse: 0.371666	tr-rmse: 0.371666
2025-07-24 10:05:39 [DEBUG] XGB iter  50: tr-p-rmse: 0.083338	tr-a-peak@32: 0.984039	tr-rmse: 0.371666	tr-rmse: 0.371666
2025-07-24 10:05:39 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.08334	tr-a-peak@32:0.98404	tr-rmse:0.37167	tr-rmse:0.37167 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:07:51 [DEBUG] XGB validation: p-rmse: 0.152174	a-peak@32: 0.990533
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:10:04 [DEBUG] XGB validation: p-rmse: 0.229373	a-peak@32: 0.851241
2025-07-24 10:10:04 [DEBUG] XGB iter   0: tr-p-rmse: 0.395530	tr-a-peak@32: 0.667284	tr-rmse: 0.305827	tr-rmse: 0.305827
2025-07-24 10:10:04 [DEBUG] XGB iter  25: tr-p-rmse: 0.083819	tr-a-peak@32: 0.994680	tr-rmse: 0.368815	tr-rmse: 0.368815
2025-07-24 10:10:04 [DEBUG] XGB iter  50: tr-p-rmse: 0.083819	tr-a-peak@32: 0.994680	tr-rmse: 0.368815	tr-rmse: 0.368815
2025-07-24 10:10:04 [DEBUG] XGB iter  75: tr-p-rmse: 0.083819	tr-a-peak@32: 0.994680	tr-rmse: 0.368815	tr-rmse: 0.368815
2025-07-24 10:10:04 [DEBUG] XGB stopped. Best iteration: [25] tr-p-rmse:0.08382	tr-a-peak@32:0.99468	tr-rmse:0.36881	tr-rmse:0.36881 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:12:11 [DEBUG] XGB validation: p-rmse: 0.134396	a-peak@32: 0.996501
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:14:14 [DEBUG] XGB validation: p-rmse: 0.121246	a-peak@32: 0.995676
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:16:20 [DEBUG] XGB validation: p-rmse: 0.173076	a-peak@32: 0.906114
2025-07-24 10:16:20 [DEBUG] XGB iter   0: tr-p-rmse: 0.392614	tr-a-peak@32: 0.471515	tr-rmse: 0.303999	tr-rmse: 0.303999
2025-07-24 10:16:20 [DEBUG] XGB iter  25: tr-p-rmse: 0.083560	tr-a-peak@32: 0.949035	tr-rmse: 0.367449	tr-rmse: 0.367449
2025-07-24 10:16:20 [DEBUG] XGB iter  50: tr-p-rmse: 0.083560	tr-a-peak@32: 0.949035	tr-rmse: 0.367449	tr-rmse: 0.367449
2025-07-24 10:16:20 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.08356	tr-a-peak@32:0.94903	tr-rmse:0.36745	tr-rmse:0.36745 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:18:26 [DEBUG] XGB validation: p-rmse: 0.127267	a-peak@32: 0.966732
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ depth_conv2d_nhwc, half* __restrict__ placeholder, half* __restrict__ placeholder_1);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ depth_conv2d_nhwc, half* __restrict__ placeholder, half* __restrict__ placeholder_1) {
  half depth_conv2d_nhwc_local[7];
  __shared__ half PadInput_shared[1152];
  __shared__ half placeholder_shared[384];
  depth_conv2d_nhwc_local[0] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[1] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[2] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[3] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[4] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[5] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[6] = __float2half_rn(0.000000e+00f);
  uint4 condval;
  if (((8 <= ((int)blockIdx.x)) && (16 <= ((int)threadIdx.x)))) {
    condval = *(uint4*)(placeholder + ((((((((int)blockIdx.x) >> 3) * 7168) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 15) * 8)) - 8192));
  } else {
    condval = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(PadInput_shared + (((int)threadIdx.x) * 8)) = condval;
  if (((int)threadIdx.x) < 16) {
    *(uint4*)(PadInput_shared + ((((int)threadIdx.x) * 8) + 1024)) = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  if (((int)threadIdx.x) < 96) {
    *(half4*)(placeholder_shared + (((int)threadIdx.x) * 4)) = *(half4*)(placeholder_1 + ((((((int)threadIdx.x) >> 5) * 1024) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 31) * 4)));
  }
  __syncthreads();
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((int)threadIdx.x)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 128)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[(((int)threadIdx.x) + 256)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[(((int)threadIdx.x) + 384)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[(((int)threadIdx.x) + 512)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[(((int)threadIdx.x) + 640)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[(((int)threadIdx.x) + 768)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 128)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 256)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[(((int)threadIdx.x) + 384)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[(((int)threadIdx.x) + 512)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[(((int)threadIdx.x) + 640)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[(((int)threadIdx.x) + 768)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[(((int)threadIdx.x) + 896)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 256)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 384)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[(((int)threadIdx.x) + 512)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[(((int)threadIdx.x) + 640)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[(((int)threadIdx.x) + 768)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[(((int)threadIdx.x) + 896)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[(((int)threadIdx.x) + 1024)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  __syncthreads();
  uint4 condval_1;
  if ((16 <= ((int)threadIdx.x))) {
    condval_1 = *(uint4*)(placeholder + ((((((((int)blockIdx.x) >> 3) * 7168) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 15) * 8)) - 1024));
  } else {
    condval_1 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(PadInput_shared + (((int)threadIdx.x) * 8)) = condval_1;
  if (((int)threadIdx.x) < 16) {
    *(uint4*)(PadInput_shared + ((((int)threadIdx.x) * 8) + 1024)) = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  if (((int)threadIdx.x) < 96) {
    *(half4*)(placeholder_shared + (((int)threadIdx.x) * 4)) = *(half4*)(placeholder_1 + (((((((int)threadIdx.x) >> 5) * 1024) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 31) * 4)) + 3072));
  }
  __syncthreads();
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((int)threadIdx.x)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 128)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[(((int)threadIdx.x) + 256)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[(((int)threadIdx.x) + 384)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[(((int)threadIdx.x) + 512)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[(((int)threadIdx.x) + 640)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[(((int)threadIdx.x) + 768)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 128)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 256)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[(((int)threadIdx.x) + 384)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[(((int)threadIdx.x) + 512)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[(((int)threadIdx.x) + 640)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[(((int)threadIdx.x) + 768)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[(((int)threadIdx.x) + 896)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 256)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 384)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[(((int)threadIdx.x) + 512)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[(((int)threadIdx.x) + 640)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[(((int)threadIdx.x) + 768)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[(((int)threadIdx.x) + 896)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[(((int)threadIdx.x) + 1024)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  __syncthreads();
  uint4 condval_2;
  if (((((int)blockIdx.x) < 48) && (16 <= ((int)threadIdx.x)))) {
    condval_2 = *(uint4*)(placeholder + ((((((((int)blockIdx.x) >> 3) * 7168) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 6144));
  } else {
    condval_2 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(PadInput_shared + (((int)threadIdx.x) * 8)) = condval_2;
  if (((int)threadIdx.x) < 16) {
    *(uint4*)(PadInput_shared + ((((int)threadIdx.x) * 8) + 1024)) = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  if (((int)threadIdx.x) < 96) {
    *(half4*)(placeholder_shared + (((int)threadIdx.x) * 4)) = *(half4*)(placeholder_1 + (((((((int)threadIdx.x) >> 5) * 1024) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 31) * 4)) + 6144));
  }
  __syncthreads();
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((int)threadIdx.x)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 128)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[(((int)threadIdx.x) + 256)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[(((int)threadIdx.x) + 384)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[(((int)threadIdx.x) + 512)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[(((int)threadIdx.x) + 640)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[(((int)threadIdx.x) + 768)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 128)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 256)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[(((int)threadIdx.x) + 384)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[(((int)threadIdx.x) + 512)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[(((int)threadIdx.x) + 640)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[(((int)threadIdx.x) + 768)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[(((int)threadIdx.x) + 896)] * placeholder_shared[(((int)threadIdx.x) + 128)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 256)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 384)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[(((int)threadIdx.x) + 512)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[(((int)threadIdx.x) + 640)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[(((int)threadIdx.x) + 768)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[(((int)threadIdx.x) + 896)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[(((int)threadIdx.x) + 1024)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc[((((((int)blockIdx.x) >> 3) * 7168) + ((((int)blockIdx.x) & 7) * 128)) + ((int)threadIdx.x))] = depth_conv2d_nhwc_local[0];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) >> 3) * 7168) + ((((int)blockIdx.x) & 7) * 128)) + ((int)threadIdx.x)) + 1024)] = depth_conv2d_nhwc_local[1];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) >> 3) * 7168) + ((((int)blockIdx.x) & 7) * 128)) + ((int)threadIdx.x)) + 2048)] = depth_conv2d_nhwc_local[2];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) >> 3) * 7168) + ((((int)blockIdx.x) & 7) * 128)) + ((int)threadIdx.x)) + 3072)] = depth_conv2d_nhwc_local[3];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) >> 3) * 7168) + ((((int)blockIdx.x) & 7) * 128)) + ((int)threadIdx.x)) + 4096)] = depth_conv2d_nhwc_local[4];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) >> 3) * 7168) + ((((int)blockIdx.x) & 7) * 128)) + ((int)threadIdx.x)) + 5120)] = depth_conv2d_nhwc_local[5];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) >> 3) * 7168) + ((((int)blockIdx.x) & 7) * 128)) + ((int)threadIdx.x)) + 6144)] = depth_conv2d_nhwc_local[6];
}


The time of DEP is 0.005 ms
2025-07-24 10:18:27 [INFO] Logging directory: /tmp/tmpgkllljla/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:20:56 [DEBUG] XGB iter   0: tr-p-rmse: 0.651639	tr-a-peak@32: 0.977140	tr-rmse: 0.426230	tr-rmse: 0.426230
2025-07-24 10:20:56 [DEBUG] XGB iter  25: tr-p-rmse: 0.114303	tr-a-peak@32: 1.000000	tr-rmse: 0.443429	tr-rmse: 0.443429
2025-07-24 10:20:56 [DEBUG] XGB iter  50: tr-p-rmse: 0.114303	tr-a-peak@32: 1.000000	tr-rmse: 0.443429	tr-rmse: 0.443429
2025-07-24 10:20:56 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.11430	tr-a-peak@32:1.00000	tr-rmse:0.44343	tr-rmse:0.44343 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:23:10 [DEBUG] XGB validation: p-rmse: 0.253389	a-peak@32: 0.993045
2025-07-24 10:23:10 [DEBUG] XGB iter   0: tr-p-rmse: 0.597104	tr-a-peak@32: 0.924218	tr-rmse: 0.382549	tr-rmse: 0.382549
2025-07-24 10:23:10 [DEBUG] XGB iter  25: tr-p-rmse: 0.070324	tr-a-peak@32: 1.000000	tr-rmse: 0.414808	tr-rmse: 0.414808
2025-07-24 10:23:10 [DEBUG] XGB iter  50: tr-p-rmse: 0.070324	tr-a-peak@32: 1.000000	tr-rmse: 0.414808	tr-rmse: 0.414808
2025-07-24 10:23:10 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.07032	tr-a-peak@32:1.00000	tr-rmse:0.41481	tr-rmse:0.41481 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:26:25 [DEBUG] XGB validation: p-rmse: 0.416924	a-peak@32: 0.796996
2025-07-24 10:26:25 [DEBUG] XGB iter   0: tr-p-rmse: 0.530163	tr-a-peak@32: 0.307341	tr-rmse: 0.234196	tr-rmse: 0.234196
2025-07-24 10:26:25 [DEBUG] XGB iter  25: tr-p-rmse: 0.042660	tr-a-peak@32: 1.000000	tr-rmse: 0.272501	tr-rmse: 0.272501
2025-07-24 10:26:26 [DEBUG] XGB iter  50: tr-p-rmse: 0.042660	tr-a-peak@32: 1.000000	tr-rmse: 0.272501	tr-rmse: 0.272501
2025-07-24 10:26:26 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.04266	tr-a-peak@32:1.00000	tr-rmse:0.27250	tr-rmse:0.27250 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:29:25 [DEBUG] XGB validation: p-rmse: 0.332179	a-peak@32: 0.896460
2025-07-24 10:29:28 [DEBUG] XGB iter   0: tr-p-rmse: 0.488638	tr-a-peak@32: 0.591792	tr-rmse: 0.341042	tr-rmse: 0.341042
2025-07-24 10:29:28 [DEBUG] XGB iter  25: tr-p-rmse: 0.060036	tr-a-peak@32: 0.966287	tr-rmse: 0.391413	tr-rmse: 0.391413
2025-07-24 10:29:28 [DEBUG] XGB iter  50: tr-p-rmse: 0.060036	tr-a-peak@32: 0.966287	tr-rmse: 0.391413	tr-rmse: 0.391413
2025-07-24 10:29:28 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.06004	tr-a-peak@32:0.96629	tr-rmse:0.39141	tr-rmse:0.39141 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:32:31 [DEBUG] XGB validation: p-rmse: 0.192756	a-peak@32: 0.879792
2025-07-24 10:32:31 [DEBUG] XGB iter   0: tr-p-rmse: 0.477439	tr-a-peak@32: 0.793673	tr-rmse: 0.384288	tr-rmse: 0.384288
2025-07-24 10:32:31 [DEBUG] XGB iter  25: tr-p-rmse: 0.061701	tr-a-peak@32: 0.946866	tr-rmse: 0.439685	tr-rmse: 0.439685
2025-07-24 10:32:31 [DEBUG] XGB iter  50: tr-p-rmse: 0.061701	tr-a-peak@32: 0.946866	tr-rmse: 0.439685	tr-rmse: 0.439685
2025-07-24 10:32:31 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.06169	tr-a-peak@32:0.94687	tr-rmse:0.43970	tr-rmse:0.43970 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:35:22 [DEBUG] XGB validation: p-rmse: 0.177544	a-peak@32: 0.929140
2025-07-24 10:35:23 [DEBUG] XGB iter   0: tr-p-rmse: 0.459165	tr-a-peak@32: 0.778040	tr-rmse: 0.434726	tr-rmse: 0.434726
2025-07-24 10:35:23 [DEBUG] XGB iter  25: tr-p-rmse: 0.070070	tr-a-peak@32: 0.996951	tr-rmse: 0.488808	tr-rmse: 0.488808
2025-07-24 10:35:23 [DEBUG] XGB iter  50: tr-p-rmse: 0.070070	tr-a-peak@32: 0.996951	tr-rmse: 0.488808	tr-rmse: 0.488808
2025-07-24 10:35:23 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.07006	tr-a-peak@32:0.99695	tr-rmse:0.48881	tr-rmse:0.48881 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:38:18 [DEBUG] XGB validation: p-rmse: 0.206331	a-peak@32: 0.960677
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:41:09 [DEBUG] XGB validation: p-rmse: 0.377171	a-peak@32: 0.859099
2025-07-24 10:41:12 [DEBUG] XGB iter   0: tr-p-rmse: 0.456474	tr-a-peak@32: 0.451673	tr-rmse: 0.327860	tr-rmse: 0.327860
2025-07-24 10:41:13 [DEBUG] XGB iter  25: tr-p-rmse: 0.070642	tr-a-peak@32: 0.978104	tr-rmse: 0.386837	tr-rmse: 0.386837
2025-07-24 10:41:13 [DEBUG] XGB iter  50: tr-p-rmse: 0.070642	tr-a-peak@32: 0.978104	tr-rmse: 0.386837	tr-rmse: 0.386837
2025-07-24 10:41:13 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.07064	tr-a-peak@32:0.97810	tr-rmse:0.38684	tr-rmse:0.38684 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:43:56 [DEBUG] XGB validation: p-rmse: 0.206345	a-peak@32: 0.804919
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:46:46 [DEBUG] XGB validation: p-rmse: 0.215813	a-peak@32: 0.986323
2025-07-24 10:46:46 [DEBUG] XGB iter   0: tr-p-rmse: 0.443227	tr-a-peak@32: 0.572310	tr-rmse: 0.351910	tr-rmse: 0.351910
2025-07-24 10:46:46 [DEBUG] XGB iter  25: tr-p-rmse: 0.076708	tr-a-peak@32: 0.952556	tr-rmse: 0.411138	tr-rmse: 0.411138
2025-07-24 10:46:46 [DEBUG] XGB iter  50: tr-p-rmse: 0.076708	tr-a-peak@32: 0.952556	tr-rmse: 0.411138	tr-rmse: 0.411138
2025-07-24 10:46:46 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.07671	tr-a-peak@32:0.95256	tr-rmse:0.41114	tr-rmse:0.41114 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:49:50 [DEBUG] XGB validation: p-rmse: 0.225950	a-peak@32: 0.846271
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:52:48 [DEBUG] XGB validation: p-rmse: 0.210812	a-peak@32: 0.796111
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:55:57 [DEBUG] XGB validation: p-rmse: 0.239117	a-peak@32: 0.793778
2025-07-24 10:55:57 [DEBUG] XGB iter   0: tr-p-rmse: 0.430337	tr-a-peak@32: 0.933298	tr-rmse: 0.358861	tr-rmse: 0.358861
2025-07-24 10:56:00 [DEBUG] XGB iter  25: tr-p-rmse: 0.089252	tr-a-peak@32: 0.905928	tr-rmse: 0.420127	tr-rmse: 0.420127
2025-07-24 10:56:00 [DEBUG] XGB iter  50: tr-p-rmse: 0.089252	tr-a-peak@32: 0.905928	tr-rmse: 0.420127	tr-rmse: 0.420127
2025-07-24 10:56:00 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.08925	tr-a-peak@32:0.90593	tr-rmse:0.42013	tr-rmse:0.42013 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 10:59:00 [DEBUG] XGB validation: p-rmse: 0.274687	a-peak@32: 0.734178
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:02:00 [DEBUG] XGB validation: p-rmse: 0.226146	a-peak@32: 0.770370
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:04:45 [DEBUG] XGB validation: p-rmse: 0.233251	a-peak@32: 0.978075
2025-07-24 11:04:45 [DEBUG] XGB iter   0: tr-p-rmse: 0.420535	tr-a-peak@32: 0.500666	tr-rmse: 0.276869	tr-rmse: 0.276869
2025-07-24 11:04:45 [DEBUG] XGB iter  25: tr-p-rmse: 0.087181	tr-a-peak@32: 0.972899	tr-rmse: 0.343372	tr-rmse: 0.343372
2025-07-24 11:04:45 [DEBUG] XGB iter  50: tr-p-rmse: 0.087181	tr-a-peak@32: 0.972899	tr-rmse: 0.343372	tr-rmse: 0.343372
2025-07-24 11:04:45 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.08718	tr-a-peak@32:0.97290	tr-rmse:0.34337	tr-rmse:0.34337 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(48) main_kernel(half* __restrict__ conv2d_transpose_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(48) main_kernel(half* __restrict__ conv2d_transpose_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  half conv2d_transpose_nhwc_local[4];
  __shared__ half PadInput_shared[4608];
  __shared__ half weight_shared[6144];
  conv2d_transpose_nhwc_local[0] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[1] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[2] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[3] = __float2half_rn(0.000000e+00f);
  uint4 condval;
  if ((((1 <= (((((int)blockIdx.x) >> 3) * 4) + (((int)threadIdx.x) / 24))) && (1 <= (((((int)blockIdx.x) & 7) * 4) + ((((int)threadIdx.x) % 24) >> 2)))) && ((((((int)blockIdx.x) & 7) * 4) + ((((int)threadIdx.x) % 24) >> 2)) < 33))) {
    condval = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) / 24) * 2048)) + ((((int)blockIdx.x) & 7) * 256)) + (((((int)threadIdx.x) % 24) >> 2) * 64)) + ((((int)threadIdx.x) & 3) * 8)) - 2112));
  } else {
    condval = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(PadInput_shared + (((int)threadIdx.x) * 8)) = condval;
  uint4 condval_1;
  if (((1 <= (((((int)blockIdx.x) & 7) * 4) + ((((int)threadIdx.x) % 24) >> 2))) && ((((((int)blockIdx.x) & 7) * 4) + ((((int)threadIdx.x) % 24) >> 2)) < 33))) {
    condval_1 = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) / 24) * 2048)) + ((((int)blockIdx.x) & 7) * 256)) + (((((int)threadIdx.x) % 24) >> 2) * 64)) + ((((int)threadIdx.x) & 3) * 8)) + 1984));
  } else {
    condval_1 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(PadInput_shared + ((((int)threadIdx.x) * 8) + 384)) = condval_1;
  uint4 condval_2;
  if (((((((((int)blockIdx.x) >> 3) * 4) + (((int)threadIdx.x) / 24)) < 29) && (1 <= (((((int)blockIdx.x) & 7) * 4) + ((((int)threadIdx.x) % 24) >> 2)))) && ((((((int)blockIdx.x) & 7) * 4) + ((((int)threadIdx.x) % 24) >> 2)) < 33))) {
    condval_2 = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) / 24) * 2048)) + ((((int)blockIdx.x) & 7) * 256)) + (((((int)threadIdx.x) % 24) >> 2) * 64)) + ((((int)threadIdx.x) & 3) * 8)) + 6080));
  } else {
    condval_2 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(PadInput_shared + ((((int)threadIdx.x) * 8) + 768)) = condval_2;
  weight_shared[((int)threadIdx.x)] = weight[((int)threadIdx.x)];
  weight_shared[(((int)threadIdx.x) + 48)] = weight[(((int)threadIdx.x) + 48)];
  weight_shared[(((int)threadIdx.x) + 96)] = weight[(((int)threadIdx.x) + 192)];
  weight_shared[(((int)threadIdx.x) + 144)] = weight[(((int)threadIdx.x) + 240)];
  weight_shared[(((int)threadIdx.x) + 192)] = weight[(((int)threadIdx.x) + 384)];
  weight_shared[(((int)threadIdx.x) + 240)] = weight[(((int)threadIdx.x) + 432)];
  weight_shared[(((int)threadIdx.x) + 288)] = weight[(((int)threadIdx.x) + 576)];
  weight_shared[(((int)threadIdx.x) + 336)] = weight[(((int)threadIdx.x) + 624)];
  weight_shared[(((int)threadIdx.x) + 384)] = weight[(((int)threadIdx.x) + 768)];
  weight_shared[(((int)threadIdx.x) + 432)] = weight[(((int)threadIdx.x) + 816)];
  weight_shared[(((int)threadIdx.x) + 480)] = weight[(((int)threadIdx.x) + 960)];
  weight_shared[(((int)threadIdx.x) + 528)] = weight[(((int)threadIdx.x) + 1008)];
  weight_shared[(((int)threadIdx.x) + 576)] = weight[(((int)threadIdx.x) + 1152)];
  weight_shared[(((int)threadIdx.x) + 624)] = weight[(((int)threadIdx.x) + 1200)];
  weight_shared[(((int)threadIdx.x) + 672)] = weight[(((int)threadIdx.x) + 1344)];
  weight_shared[(((int)threadIdx.x) + 720)] = weight[(((int)threadIdx.x) + 1392)];
  weight_shared[(((int)threadIdx.x) + 768)] = weight[(((int)threadIdx.x) + 1536)];
  weight_shared[(((int)threadIdx.x) + 816)] = weight[(((int)threadIdx.x) + 1584)];
  weight_shared[(((int)threadIdx.x) + 864)] = weight[(((int)threadIdx.x) + 1728)];
  weight_shared[(((int)threadIdx.x) + 912)] = weight[(((int)threadIdx.x) + 1776)];
  weight_shared[(((int)threadIdx.x) + 960)] = weight[(((int)threadIdx.x) + 1920)];
  weight_shared[(((int)threadIdx.x) + 1008)] = weight[(((int)threadIdx.x) + 1968)];
  weight_shared[(((int)threadIdx.x) + 1056)] = weight[(((int)threadIdx.x) + 2112)];
  weight_shared[(((int)threadIdx.x) + 1104)] = weight[(((int)threadIdx.x) + 2160)];
  weight_shared[(((int)threadIdx.x) + 1152)] = weight[(((int)threadIdx.x) + 2304)];
  weight_shared[(((int)threadIdx.x) + 1200)] = weight[(((int)threadIdx.x) + 2352)];
  weight_shared[(((int)threadIdx.x) + 1248)] = weight[(((int)threadIdx.x) + 2496)];
  weight_shared[(((int)threadIdx.x) + 1296)] = weight[(((int)threadIdx.x) + 2544)];
  weight_shared[(((int)threadIdx.x) + 1344)] = weight[(((int)threadIdx.x) + 2688)];
  weight_shared[(((int)threadIdx.x) + 1392)] = weight[(((int)threadIdx.x) + 2736)];
  weight_shared[(((int)threadIdx.x) + 1440)] = weight[(((int)threadIdx.x) + 2880)];
  weight_shared[(((int)threadIdx.x) + 1488)] = weight[(((int)threadIdx.x) + 2928)];
__asm__ __volatile__("cp.async.commit_group;");

  uint4 condval_3;
  if ((((1 <= (((((int)blockIdx.x) >> 3) * 4) + (((int)threadIdx.x) / 24))) && (1 <= (((((int)blockIdx.x) & 7) * 4) + ((((int)threadIdx.x) % 24) >> 2)))) && ((((((int)blockIdx.x) & 7) * 4) + ((((int)threadIdx.x) % 24) >> 2)) < 33))) {
    condval_3 = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) / 24) * 2048)) + ((((int)blockIdx.x) & 7) * 256)) + (((((int)threadIdx.x) % 24) >> 2) * 64)) + ((((int)threadIdx.x) & 3) * 8)) - 2080));
  } else {
    condval_3 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(PadInput_shared + ((((int)threadIdx.x) * 8) + 1152)) = condval_3;
  uint4 condval_4;
  if (((1 <= (((((int)blockIdx.x) & 7) * 4) + ((((int)threadIdx.x) % 24) >> 2))) && ((((((int)blockIdx.x) & 7) * 4) + ((((int)threadIdx.x) % 24) >> 2)) < 33))) {
    condval_4 = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) / 24) * 2048)) + ((((int)blockIdx.x) & 7) * 256)) + (((((int)threadIdx.x) % 24) >> 2) * 64)) + ((((int)threadIdx.x) & 3) * 8)) + 2016));
  } else {
    condval_4 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(PadInput_shared + ((((int)threadIdx.x) * 8) + 1536)) = condval_4;
  uint4 condval_5;
  if (((((((((int)blockIdx.x) >> 3) * 4) + (((int)threadIdx.x) / 24)) < 29) && (1 <= (((((int)blockIdx.x) & 7) * 4) + ((((int)threadIdx.x) % 24) >> 2)))) && ((((((int)blockIdx.x) & 7) * 4) + ((((int)threadIdx.x) % 24) >> 2)) < 33))) {
    condval_5 = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) / 24) * 2048)) + ((((int)blockIdx.x) & 7) * 256)) + (((((int)threadIdx.x) % 24) >> 2) * 64)) + ((((int)threadIdx.x) & 3) * 8)) + 6112));
  } else {
    condval_5 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(PadInput_shared + ((((int)threadIdx.x) * 8) + 1920)) = condval_5;
  weight_shared[(((int)threadIdx.x) + 1536)] = weight[(((int)threadIdx.x) + 96)];
  weight_shared[(((int)threadIdx.x) + 1584)] = weight[(((int)threadIdx.x) + 144)];
  weight_shared[(((int)threadIdx.x) + 1632)] = weight[(((int)threadIdx.x) + 288)];
  weight_shared[(((int)threadIdx.x) + 1680)] = weight[(((int)threadIdx.x) + 336)];
  weight_shared[(((int)threadIdx.x) + 1728)] = weight[(((int)threadIdx.x) + 480)];
  weight_shared[(((int)threadIdx.x) + 1776)] = weight[(((int)threadIdx.x) + 528)];
  weight_shared[(((int)threadIdx.x) + 1824)] = weight[(((int)threadIdx.x) + 672)];
  weight_shared[(((int)threadIdx.x) + 1872)] = weight[(((int)threadIdx.x) + 720)];
  weight_shared[(((int)threadIdx.x) + 1920)] = weight[(((int)threadIdx.x) + 864)];
  weight_shared[(((int)threadIdx.x) + 1968)] = weight[(((int)threadIdx.x) + 912)];
  weight_shared[(((int)threadIdx.x) + 2016)] = weight[(((int)threadIdx.x) + 1056)];
  weight_shared[(((int)threadIdx.x) + 2064)] = weight[(((int)threadIdx.x) + 1104)];
  weight_shared[(((int)threadIdx.x) + 2112)] = weight[(((int)threadIdx.x) + 1248)];
  weight_shared[(((int)threadIdx.x) + 2160)] = weight[(((int)threadIdx.x) + 1296)];
  weight_shared[(((int)threadIdx.x) + 2208)] = weight[(((int)threadIdx.x) + 1440)];
  weight_shared[(((int)threadIdx.x) + 2256)] = weight[(((int)threadIdx.x) + 1488)];
  weight_shared[(((int)threadIdx.x) + 2304)] = weight[(((int)threadIdx.x) + 1632)];
  weight_shared[(((int)threadIdx.x) + 2352)] = weight[(((int)threadIdx.x) + 1680)];
  weight_shared[(((int)threadIdx.x) + 2400)] = weight[(((int)threadIdx.x) + 1824)];
  weight_shared[(((int)threadIdx.x) + 2448)] = weight[(((int)threadIdx.x) + 1872)];
  weight_shared[(((int)threadIdx.x) + 2496)] = weight[(((int)threadIdx.x) + 2016)];
  weight_shared[(((int)threadIdx.x) + 2544)] = weight[(((int)threadIdx.x) + 2064)];
  weight_shared[(((int)threadIdx.x) + 2592)] = weight[(((int)threadIdx.x) + 2208)];
  weight_shared[(((int)threadIdx.x) + 2640)] = weight[(((int)threadIdx.x) + 2256)];
  weight_shared[(((int)threadIdx.x) + 2688)] = weight[(((int)threadIdx.x) + 2400)];
  weight_shared[(((int)threadIdx.x) + 2736)] = weight[(((int)threadIdx.x) + 2448)];
  weight_shared[(((int)threadIdx.x) + 2784)] = weight[(((int)threadIdx.x) + 2592)];
  weight_shared[(((int)threadIdx.x) + 2832)] = weight[(((int)threadIdx.x) + 2640)];
  weight_shared[(((int)threadIdx.x) + 2880)] = weight[(((int)threadIdx.x) + 2784)];
  weight_shared[(((int)threadIdx.x) + 2928)] = weight[(((int)threadIdx.x) + 2832)];
  weight_shared[(((int)threadIdx.x) + 2976)] = weight[(((int)threadIdx.x) + 2976)];
  weight_shared[(((int)threadIdx.x) + 3024)] = weight[(((int)threadIdx.x) + 3024)];
__asm__ __volatile__("cp.async.commit_group;");

__asm__ __volatile__("cp.async.wait_group 0;");

  __syncthreads();
  for (int rw_1 = 0; rw_1 < 2; ++rw_1) {
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32))] * weight_shared[(((((int)threadIdx.x) % 3) + 1440) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 1)] * weight_shared[(((((int)threadIdx.x) % 3) + 1443) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 32)] * weight_shared[(((((int)threadIdx.x) % 3) + 1344) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 33)] * weight_shared[(((((int)threadIdx.x) % 3) + 1347) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 192)] * weight_shared[(((((int)threadIdx.x) % 3) + 672) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 193)] * weight_shared[(((((int)threadIdx.x) % 3) + 675) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 224)] * weight_shared[(((((int)threadIdx.x) % 3) + 576) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 225)] * weight_shared[(((((int)threadIdx.x) % 3) + 579) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 192)] * weight_shared[(((((int)threadIdx.x) % 3) + 1056) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 193)] * weight_shared[(((((int)threadIdx.x) % 3) + 1059) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 224)] * weight_shared[(((((int)threadIdx.x) % 3) + 960) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 225)] * weight_shared[(((((int)threadIdx.x) % 3) + 963) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 384)] * weight_shared[(((((int)threadIdx.x) % 3) + 288) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 385)] * weight_shared[(((((int)threadIdx.x) % 3) + 291) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 416)] * weight_shared[(((((int)threadIdx.x) % 3) + 192) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 417)] * weight_shared[(((((int)threadIdx.x) % 3) + 195) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 2)] * weight_shared[(((((int)threadIdx.x) % 3) + 1446) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 3)] * weight_shared[(((((int)threadIdx.x) % 3) + 1449) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 34)] * weight_shared[(((((int)threadIdx.x) % 3) + 1350) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 35)] * weight_shared[(((((int)threadIdx.x) % 3) + 1353) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 194)] * weight_shared[(((((int)threadIdx.x) % 3) + 678) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 195)] * weight_shared[(((((int)threadIdx.x) % 3) + 681) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 226)] * weight_shared[(((((int)threadIdx.x) % 3) + 582) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 227)] * weight_shared[(((((int)threadIdx.x) % 3) + 585) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 194)] * weight_shared[(((((int)threadIdx.x) % 3) + 1062) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 195)] * weight_shared[(((((int)threadIdx.x) % 3) + 1065) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 226)] * weight_shared[(((((int)threadIdx.x) % 3) + 966) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 227)] * weight_shared[(((((int)threadIdx.x) % 3) + 969) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 386)] * weight_shared[(((((int)threadIdx.x) % 3) + 294) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 387)] * weight_shared[(((((int)threadIdx.x) % 3) + 297) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 418)] * weight_shared[(((((int)threadIdx.x) % 3) + 198) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 419)] * weight_shared[(((((int)threadIdx.x) % 3) + 201) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 4)] * weight_shared[(((((int)threadIdx.x) % 3) + 1452) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 5)] * weight_shared[(((((int)threadIdx.x) % 3) + 1455) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 36)] * weight_shared[(((((int)threadIdx.x) % 3) + 1356) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 37)] * weight_shared[(((((int)threadIdx.x) % 3) + 1359) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 196)] * weight_shared[(((((int)threadIdx.x) % 3) + 684) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 197)] * weight_shared[(((((int)threadIdx.x) % 3) + 687) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 228)] * weight_shared[(((((int)threadIdx.x) % 3) + 588) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 229)] * weight_shared[(((((int)threadIdx.x) % 3) + 591) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 196)] * weight_shared[(((((int)threadIdx.x) % 3) + 1068) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 197)] * weight_shared[(((((int)threadIdx.x) % 3) + 1071) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 228)] * weight_shared[(((((int)threadIdx.x) % 3) + 972) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 229)] * weight_shared[(((((int)threadIdx.x) % 3) + 975) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 388)] * weight_shared[(((((int)threadIdx.x) % 3) + 300) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 389)] * weight_shared[(((((int)threadIdx.x) % 3) + 303) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 420)] * weight_shared[(((((int)threadIdx.x) % 3) + 204) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 421)] * weight_shared[(((((int)threadIdx.x) % 3) + 207) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 6)] * weight_shared[(((((int)threadIdx.x) % 3) + 1458) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 7)] * weight_shared[(((((int)threadIdx.x) % 3) + 1461) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 38)] * weight_shared[(((((int)threadIdx.x) % 3) + 1362) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 39)] * weight_shared[(((((int)threadIdx.x) % 3) + 1365) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 198)] * weight_shared[(((((int)threadIdx.x) % 3) + 690) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 199)] * weight_shared[(((((int)threadIdx.x) % 3) + 693) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 230)] * weight_shared[(((((int)threadIdx.x) % 3) + 594) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 231)] * weight_shared[(((((int)threadIdx.x) % 3) + 597) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 198)] * weight_shared[(((((int)threadIdx.x) % 3) + 1074) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 199)] * weight_shared[(((((int)threadIdx.x) % 3) + 1077) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 230)] * weight_shared[(((((int)threadIdx.x) % 3) + 978) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 231)] * weight_shared[(((((int)threadIdx.x) % 3) + 981) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 390)] * weight_shared[(((((int)threadIdx.x) % 3) + 306) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 391)] * weight_shared[(((((int)threadIdx.x) % 3) + 309) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 422)] * weight_shared[(((((int)threadIdx.x) % 3) + 210) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 423)] * weight_shared[(((((int)threadIdx.x) % 3) + 213) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 8)] * weight_shared[(((((int)threadIdx.x) % 3) + 1464) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 9)] * weight_shared[(((((int)threadIdx.x) % 3) + 1467) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 40)] * weight_shared[(((((int)threadIdx.x) % 3) + 1368) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 41)] * weight_shared[(((((int)threadIdx.x) % 3) + 1371) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 200)] * weight_shared[(((((int)threadIdx.x) % 3) + 696) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 201)] * weight_shared[(((((int)threadIdx.x) % 3) + 699) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 232)] * weight_shared[(((((int)threadIdx.x) % 3) + 600) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 233)] * weight_shared[(((((int)threadIdx.x) % 3) + 603) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 200)] * weight_shared[(((((int)threadIdx.x) % 3) + 1080) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 201)] * weight_shared[(((((int)threadIdx.x) % 3) + 1083) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 232)] * weight_shared[(((((int)threadIdx.x) % 3) + 984) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 233)] * weight_shared[(((((int)threadIdx.x) % 3) + 987) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 392)] * weight_shared[(((((int)threadIdx.x) % 3) + 312) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 393)] * weight_shared[(((((int)threadIdx.x) % 3) + 315) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 424)] * weight_shared[(((((int)threadIdx.x) % 3) + 216) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 425)] * weight_shared[(((((int)threadIdx.x) % 3) + 219) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 10)] * weight_shared[(((((int)threadIdx.x) % 3) + 1470) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 11)] * weight_shared[(((((int)threadIdx.x) % 3) + 1473) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 42)] * weight_shared[(((((int)threadIdx.x) % 3) + 1374) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 43)] * weight_shared[(((((int)threadIdx.x) % 3) + 1377) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 202)] * weight_shared[(((((int)threadIdx.x) % 3) + 702) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 203)] * weight_shared[(((((int)threadIdx.x) % 3) + 705) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 234)] * weight_shared[(((((int)threadIdx.x) % 3) + 606) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 235)] * weight_shared[(((((int)threadIdx.x) % 3) + 609) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 202)] * weight_shared[(((((int)threadIdx.x) % 3) + 1086) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 203)] * weight_shared[(((((int)threadIdx.x) % 3) + 1089) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 234)] * weight_shared[(((((int)threadIdx.x) % 3) + 990) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 235)] * weight_shared[(((((int)threadIdx.x) % 3) + 993) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 394)] * weight_shared[(((((int)threadIdx.x) % 3) + 318) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 395)] * weight_shared[(((((int)threadIdx.x) % 3) + 321) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 426)] * weight_shared[(((((int)threadIdx.x) % 3) + 222) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 427)] * weight_shared[(((((int)threadIdx.x) % 3) + 225) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 12)] * weight_shared[(((((int)threadIdx.x) % 3) + 1476) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 13)] * weight_shared[(((((int)threadIdx.x) % 3) + 1479) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 44)] * weight_shared[(((((int)threadIdx.x) % 3) + 1380) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 45)] * weight_shared[(((((int)threadIdx.x) % 3) + 1383) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 204)] * weight_shared[(((((int)threadIdx.x) % 3) + 708) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 205)] * weight_shared[(((((int)threadIdx.x) % 3) + 711) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 236)] * weight_shared[(((((int)threadIdx.x) % 3) + 612) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 237)] * weight_shared[(((((int)threadIdx.x) % 3) + 615) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 204)] * weight_shared[(((((int)threadIdx.x) % 3) + 1092) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 205)] * weight_shared[(((((int)threadIdx.x) % 3) + 1095) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 236)] * weight_shared[(((((int)threadIdx.x) % 3) + 996) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 237)] * weight_shared[(((((int)threadIdx.x) % 3) + 999) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 396)] * weight_shared[(((((int)threadIdx.x) % 3) + 324) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 397)] * weight_shared[(((((int)threadIdx.x) % 3) + 327) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 428)] * weight_shared[(((((int)threadIdx.x) % 3) + 228) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 429)] * weight_shared[(((((int)threadIdx.x) % 3) + 231) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 14)] * weight_shared[(((((int)threadIdx.x) % 3) + 1482) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 15)] * weight_shared[(((((int)threadIdx.x) % 3) + 1485) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 46)] * weight_shared[(((((int)threadIdx.x) % 3) + 1386) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 47)] * weight_shared[(((((int)threadIdx.x) % 3) + 1389) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 206)] * weight_shared[(((((int)threadIdx.x) % 3) + 714) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 207)] * weight_shared[(((((int)threadIdx.x) % 3) + 717) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 238)] * weight_shared[(((((int)threadIdx.x) % 3) + 618) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 239)] * weight_shared[(((((int)threadIdx.x) % 3) + 621) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 206)] * weight_shared[(((((int)threadIdx.x) % 3) + 1098) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 207)] * weight_shared[(((((int)threadIdx.x) % 3) + 1101) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 238)] * weight_shared[(((((int)threadIdx.x) % 3) + 1002) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 239)] * weight_shared[(((((int)threadIdx.x) % 3) + 1005) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 398)] * weight_shared[(((((int)threadIdx.x) % 3) + 330) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 399)] * weight_shared[(((((int)threadIdx.x) % 3) + 333) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 430)] * weight_shared[(((((int)threadIdx.x) % 3) + 234) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 431)] * weight_shared[(((((int)threadIdx.x) % 3) + 237) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 16)] * weight_shared[(((((int)threadIdx.x) % 3) + 1488) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 17)] * weight_shared[(((((int)threadIdx.x) % 3) + 1491) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 48)] * weight_shared[(((((int)threadIdx.x) % 3) + 1392) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 49)] * weight_shared[(((((int)threadIdx.x) % 3) + 1395) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 208)] * weight_shared[(((((int)threadIdx.x) % 3) + 720) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 209)] * weight_shared[(((((int)threadIdx.x) % 3) + 723) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 240)] * weight_shared[(((((int)threadIdx.x) % 3) + 624) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 241)] * weight_shared[(((((int)threadIdx.x) % 3) + 627) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 208)] * weight_shared[(((((int)threadIdx.x) % 3) + 1104) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 209)] * weight_shared[(((((int)threadIdx.x) % 3) + 1107) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 240)] * weight_shared[(((((int)threadIdx.x) % 3) + 1008) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 241)] * weight_shared[(((((int)threadIdx.x) % 3) + 1011) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 400)] * weight_shared[(((((int)threadIdx.x) % 3) + 336) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 401)] * weight_shared[(((((int)threadIdx.x) % 3) + 339) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 432)] * weight_shared[(((((int)threadIdx.x) % 3) + 240) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 433)] * weight_shared[(((((int)threadIdx.x) % 3) + 243) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 18)] * weight_shared[(((((int)threadIdx.x) % 3) + 1494) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 19)] * weight_shared[(((((int)threadIdx.x) % 3) + 1497) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 50)] * weight_shared[(((((int)threadIdx.x) % 3) + 1398) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 51)] * weight_shared[(((((int)threadIdx.x) % 3) + 1401) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 210)] * weight_shared[(((((int)threadIdx.x) % 3) + 726) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 211)] * weight_shared[(((((int)threadIdx.x) % 3) + 729) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 242)] * weight_shared[(((((int)threadIdx.x) % 3) + 630) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 243)] * weight_shared[(((((int)threadIdx.x) % 3) + 633) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 210)] * weight_shared[(((((int)threadIdx.x) % 3) + 1110) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 211)] * weight_shared[(((((int)threadIdx.x) % 3) + 1113) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 242)] * weight_shared[(((((int)threadIdx.x) % 3) + 1014) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 243)] * weight_shared[(((((int)threadIdx.x) % 3) + 1017) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 402)] * weight_shared[(((((int)threadIdx.x) % 3) + 342) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 403)] * weight_shared[(((((int)threadIdx.x) % 3) + 345) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 434)] * weight_shared[(((((int)threadIdx.x) % 3) + 246) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 435)] * weight_shared[(((((int)threadIdx.x) % 3) + 249) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 20)] * weight_shared[(((((int)threadIdx.x) % 3) + 1500) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 21)] * weight_shared[(((((int)threadIdx.x) % 3) + 1503) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 52)] * weight_shared[(((((int)threadIdx.x) % 3) + 1404) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 53)] * weight_shared[(((((int)threadIdx.x) % 3) + 1407) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 212)] * weight_shared[(((((int)threadIdx.x) % 3) + 732) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 213)] * weight_shared[(((((int)threadIdx.x) % 3) + 735) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 244)] * weight_shared[(((((int)threadIdx.x) % 3) + 636) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 245)] * weight_shared[(((((int)threadIdx.x) % 3) + 639) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 212)] * weight_shared[(((((int)threadIdx.x) % 3) + 1116) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 213)] * weight_shared[(((((int)threadIdx.x) % 3) + 1119) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 244)] * weight_shared[(((((int)threadIdx.x) % 3) + 1020) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 245)] * weight_shared[(((((int)threadIdx.x) % 3) + 1023) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 404)] * weight_shared[(((((int)threadIdx.x) % 3) + 348) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 405)] * weight_shared[(((((int)threadIdx.x) % 3) + 351) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 436)] * weight_shared[(((((int)threadIdx.x) % 3) + 252) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 437)] * weight_shared[(((((int)threadIdx.x) % 3) + 255) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 22)] * weight_shared[(((((int)threadIdx.x) % 3) + 1506) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 23)] * weight_shared[(((((int)threadIdx.x) % 3) + 1509) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 54)] * weight_shared[(((((int)threadIdx.x) % 3) + 1410) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 55)] * weight_shared[(((((int)threadIdx.x) % 3) + 1413) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 214)] * weight_shared[(((((int)threadIdx.x) % 3) + 738) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 215)] * weight_shared[(((((int)threadIdx.x) % 3) + 741) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 246)] * weight_shared[(((((int)threadIdx.x) % 3) + 642) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 247)] * weight_shared[(((((int)threadIdx.x) % 3) + 645) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 214)] * weight_shared[(((((int)threadIdx.x) % 3) + 1122) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 215)] * weight_shared[(((((int)threadIdx.x) % 3) + 1125) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 246)] * weight_shared[(((((int)threadIdx.x) % 3) + 1026) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 247)] * weight_shared[(((((int)threadIdx.x) % 3) + 1029) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 406)] * weight_shared[(((((int)threadIdx.x) % 3) + 354) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 407)] * weight_shared[(((((int)threadIdx.x) % 3) + 357) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 438)] * weight_shared[(((((int)threadIdx.x) % 3) + 258) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 439)] * weight_shared[(((((int)threadIdx.x) % 3) + 261) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 24)] * weight_shared[(((((int)threadIdx.x) % 3) + 1512) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 25)] * weight_shared[(((((int)threadIdx.x) % 3) + 1515) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 56)] * weight_shared[(((((int)threadIdx.x) % 3) + 1416) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 57)] * weight_shared[(((((int)threadIdx.x) % 3) + 1419) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 216)] * weight_shared[(((((int)threadIdx.x) % 3) + 744) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 217)] * weight_shared[(((((int)threadIdx.x) % 3) + 747) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 248)] * weight_shared[(((((int)threadIdx.x) % 3) + 648) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 249)] * weight_shared[(((((int)threadIdx.x) % 3) + 651) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 216)] * weight_shared[(((((int)threadIdx.x) % 3) + 1128) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 217)] * weight_shared[(((((int)threadIdx.x) % 3) + 1131) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 248)] * weight_shared[(((((int)threadIdx.x) % 3) + 1032) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 249)] * weight_shared[(((((int)threadIdx.x) % 3) + 1035) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 408)] * weight_shared[(((((int)threadIdx.x) % 3) + 360) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 409)] * weight_shared[(((((int)threadIdx.x) % 3) + 363) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 440)] * weight_shared[(((((int)threadIdx.x) % 3) + 264) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 441)] * weight_shared[(((((int)threadIdx.x) % 3) + 267) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 26)] * weight_shared[(((((int)threadIdx.x) % 3) + 1518) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 27)] * weight_shared[(((((int)threadIdx.x) % 3) + 1521) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 58)] * weight_shared[(((((int)threadIdx.x) % 3) + 1422) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 59)] * weight_shared[(((((int)threadIdx.x) % 3) + 1425) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 218)] * weight_shared[(((((int)threadIdx.x) % 3) + 750) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 219)] * weight_shared[(((((int)threadIdx.x) % 3) + 753) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 250)] * weight_shared[(((((int)threadIdx.x) % 3) + 654) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 251)] * weight_shared[(((((int)threadIdx.x) % 3) + 657) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 218)] * weight_shared[(((((int)threadIdx.x) % 3) + 1134) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 219)] * weight_shared[(((((int)threadIdx.x) % 3) + 1137) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 250)] * weight_shared[(((((int)threadIdx.x) % 3) + 1038) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 251)] * weight_shared[(((((int)threadIdx.x) % 3) + 1041) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 410)] * weight_shared[(((((int)threadIdx.x) % 3) + 366) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 411)] * weight_shared[(((((int)threadIdx.x) % 3) + 369) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 442)] * weight_shared[(((((int)threadIdx.x) % 3) + 270) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 443)] * weight_shared[(((((int)threadIdx.x) % 3) + 273) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 28)] * weight_shared[(((((int)threadIdx.x) % 3) + 1524) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 29)] * weight_shared[(((((int)threadIdx.x) % 3) + 1527) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 60)] * weight_shared[(((((int)threadIdx.x) % 3) + 1428) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 61)] * weight_shared[(((((int)threadIdx.x) % 3) + 1431) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 220)] * weight_shared[(((((int)threadIdx.x) % 3) + 756) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 221)] * weight_shared[(((((int)threadIdx.x) % 3) + 759) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 252)] * weight_shared[(((((int)threadIdx.x) % 3) + 660) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 253)] * weight_shared[(((((int)threadIdx.x) % 3) + 663) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 220)] * weight_shared[(((((int)threadIdx.x) % 3) + 1140) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 221)] * weight_shared[(((((int)threadIdx.x) % 3) + 1143) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 252)] * weight_shared[(((((int)threadIdx.x) % 3) + 1044) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 253)] * weight_shared[(((((int)threadIdx.x) % 3) + 1047) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 412)] * weight_shared[(((((int)threadIdx.x) % 3) + 372) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 413)] * weight_shared[(((((int)threadIdx.x) % 3) + 375) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 444)] * weight_shared[(((((int)threadIdx.x) % 3) + 276) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 445)] * weight_shared[(((((int)threadIdx.x) % 3) + 279) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 30)] * weight_shared[(((((int)threadIdx.x) % 3) + 1530) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 31)] * weight_shared[(((((int)threadIdx.x) % 3) + 1533) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 62)] * weight_shared[(((((int)threadIdx.x) % 3) + 1434) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 63)] * weight_shared[(((((int)threadIdx.x) % 3) + 1437) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 222)] * weight_shared[(((((int)threadIdx.x) % 3) + 762) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 223)] * weight_shared[(((((int)threadIdx.x) % 3) + 765) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 254)] * weight_shared[(((((int)threadIdx.x) % 3) + 666) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 255)] * weight_shared[(((((int)threadIdx.x) % 3) + 669) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 222)] * weight_shared[(((((int)threadIdx.x) % 3) + 1146) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 223)] * weight_shared[(((((int)threadIdx.x) % 3) + 1149) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 254)] * weight_shared[(((((int)threadIdx.x) % 3) + 1050) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 255)] * weight_shared[(((((int)threadIdx.x) % 3) + 1053) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 414)] * weight_shared[(((((int)threadIdx.x) % 3) + 378) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 415)] * weight_shared[(((((int)threadIdx.x) % 3) + 381) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 446)] * weight_shared[(((((int)threadIdx.x) % 3) + 282) - (rw_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1 * 32)) + 447)] * weight_shared[(((((int)threadIdx.x) % 3) + 285) - (rw_1 * 192))]));
  }
__asm__ __volatile__("cp.async.wait_group 0;");

  __syncthreads();
  for (int rw_1_1 = 0; rw_1_1 < 2; ++rw_1_1) {
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1152)] * weight_shared[(((((int)threadIdx.x) % 3) + 2976) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1153)] * weight_shared[(((((int)threadIdx.x) % 3) + 2979) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1184)] * weight_shared[(((((int)threadIdx.x) % 3) + 2880) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1185)] * weight_shared[(((((int)threadIdx.x) % 3) + 2883) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1344)] * weight_shared[(((((int)threadIdx.x) % 3) + 2208) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1345)] * weight_shared[(((((int)threadIdx.x) % 3) + 2211) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1376)] * weight_shared[(((((int)threadIdx.x) % 3) + 2112) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1377)] * weight_shared[(((((int)threadIdx.x) % 3) + 2115) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1344)] * weight_shared[(((((int)threadIdx.x) % 3) + 2592) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1345)] * weight_shared[(((((int)threadIdx.x) % 3) + 2595) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1376)] * weight_shared[(((((int)threadIdx.x) % 3) + 2496) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1377)] * weight_shared[(((((int)threadIdx.x) % 3) + 2499) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1536)] * weight_shared[(((((int)threadIdx.x) % 3) + 1824) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1537)] * weight_shared[(((((int)threadIdx.x) % 3) + 1827) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1568)] * weight_shared[(((((int)threadIdx.x) % 3) + 1728) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1569)] * weight_shared[(((((int)threadIdx.x) % 3) + 1731) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1154)] * weight_shared[(((((int)threadIdx.x) % 3) + 2982) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1155)] * weight_shared[(((((int)threadIdx.x) % 3) + 2985) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1186)] * weight_shared[(((((int)threadIdx.x) % 3) + 2886) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1187)] * weight_shared[(((((int)threadIdx.x) % 3) + 2889) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1346)] * weight_shared[(((((int)threadIdx.x) % 3) + 2214) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1347)] * weight_shared[(((((int)threadIdx.x) % 3) + 2217) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1378)] * weight_shared[(((((int)threadIdx.x) % 3) + 2118) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1379)] * weight_shared[(((((int)threadIdx.x) % 3) + 2121) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1346)] * weight_shared[(((((int)threadIdx.x) % 3) + 2598) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1347)] * weight_shared[(((((int)threadIdx.x) % 3) + 2601) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1378)] * weight_shared[(((((int)threadIdx.x) % 3) + 2502) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1379)] * weight_shared[(((((int)threadIdx.x) % 3) + 2505) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1538)] * weight_shared[(((((int)threadIdx.x) % 3) + 1830) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1539)] * weight_shared[(((((int)threadIdx.x) % 3) + 1833) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1570)] * weight_shared[(((((int)threadIdx.x) % 3) + 1734) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1571)] * weight_shared[(((((int)threadIdx.x) % 3) + 1737) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1156)] * weight_shared[(((((int)threadIdx.x) % 3) + 2988) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1157)] * weight_shared[(((((int)threadIdx.x) % 3) + 2991) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1188)] * weight_shared[(((((int)threadIdx.x) % 3) + 2892) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1189)] * weight_shared[(((((int)threadIdx.x) % 3) + 2895) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1348)] * weight_shared[(((((int)threadIdx.x) % 3) + 2220) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1349)] * weight_shared[(((((int)threadIdx.x) % 3) + 2223) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1380)] * weight_shared[(((((int)threadIdx.x) % 3) + 2124) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1381)] * weight_shared[(((((int)threadIdx.x) % 3) + 2127) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1348)] * weight_shared[(((((int)threadIdx.x) % 3) + 2604) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1349)] * weight_shared[(((((int)threadIdx.x) % 3) + 2607) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1380)] * weight_shared[(((((int)threadIdx.x) % 3) + 2508) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1381)] * weight_shared[(((((int)threadIdx.x) % 3) + 2511) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1540)] * weight_shared[(((((int)threadIdx.x) % 3) + 1836) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1541)] * weight_shared[(((((int)threadIdx.x) % 3) + 1839) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1572)] * weight_shared[(((((int)threadIdx.x) % 3) + 1740) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1573)] * weight_shared[(((((int)threadIdx.x) % 3) + 1743) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1158)] * weight_shared[(((((int)threadIdx.x) % 3) + 2994) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1159)] * weight_shared[(((((int)threadIdx.x) % 3) + 2997) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1190)] * weight_shared[(((((int)threadIdx.x) % 3) + 2898) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1191)] * weight_shared[(((((int)threadIdx.x) % 3) + 2901) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1350)] * weight_shared[(((((int)threadIdx.x) % 3) + 2226) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1351)] * weight_shared[(((((int)threadIdx.x) % 3) + 2229) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1382)] * weight_shared[(((((int)threadIdx.x) % 3) + 2130) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1383)] * weight_shared[(((((int)threadIdx.x) % 3) + 2133) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1350)] * weight_shared[(((((int)threadIdx.x) % 3) + 2610) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1351)] * weight_shared[(((((int)threadIdx.x) % 3) + 2613) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1382)] * weight_shared[(((((int)threadIdx.x) % 3) + 2514) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1383)] * weight_shared[(((((int)threadIdx.x) % 3) + 2517) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1542)] * weight_shared[(((((int)threadIdx.x) % 3) + 1842) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1543)] * weight_shared[(((((int)threadIdx.x) % 3) + 1845) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1574)] * weight_shared[(((((int)threadIdx.x) % 3) + 1746) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1575)] * weight_shared[(((((int)threadIdx.x) % 3) + 1749) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1160)] * weight_shared[(((((int)threadIdx.x) % 3) + 3000) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1161)] * weight_shared[(((((int)threadIdx.x) % 3) + 3003) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1192)] * weight_shared[(((((int)threadIdx.x) % 3) + 2904) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1193)] * weight_shared[(((((int)threadIdx.x) % 3) + 2907) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1352)] * weight_shared[(((((int)threadIdx.x) % 3) + 2232) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1353)] * weight_shared[(((((int)threadIdx.x) % 3) + 2235) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1384)] * weight_shared[(((((int)threadIdx.x) % 3) + 2136) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1385)] * weight_shared[(((((int)threadIdx.x) % 3) + 2139) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1352)] * weight_shared[(((((int)threadIdx.x) % 3) + 2616) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1353)] * weight_shared[(((((int)threadIdx.x) % 3) + 2619) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1384)] * weight_shared[(((((int)threadIdx.x) % 3) + 2520) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1385)] * weight_shared[(((((int)threadIdx.x) % 3) + 2523) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1544)] * weight_shared[(((((int)threadIdx.x) % 3) + 1848) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1545)] * weight_shared[(((((int)threadIdx.x) % 3) + 1851) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1576)] * weight_shared[(((((int)threadIdx.x) % 3) + 1752) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1577)] * weight_shared[(((((int)threadIdx.x) % 3) + 1755) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1162)] * weight_shared[(((((int)threadIdx.x) % 3) + 3006) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1163)] * weight_shared[(((((int)threadIdx.x) % 3) + 3009) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1194)] * weight_shared[(((((int)threadIdx.x) % 3) + 2910) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1195)] * weight_shared[(((((int)threadIdx.x) % 3) + 2913) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1354)] * weight_shared[(((((int)threadIdx.x) % 3) + 2238) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1355)] * weight_shared[(((((int)threadIdx.x) % 3) + 2241) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1386)] * weight_shared[(((((int)threadIdx.x) % 3) + 2142) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1387)] * weight_shared[(((((int)threadIdx.x) % 3) + 2145) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1354)] * weight_shared[(((((int)threadIdx.x) % 3) + 2622) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1355)] * weight_shared[(((((int)threadIdx.x) % 3) + 2625) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1386)] * weight_shared[(((((int)threadIdx.x) % 3) + 2526) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1387)] * weight_shared[(((((int)threadIdx.x) % 3) + 2529) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1546)] * weight_shared[(((((int)threadIdx.x) % 3) + 1854) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1547)] * weight_shared[(((((int)threadIdx.x) % 3) + 1857) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1578)] * weight_shared[(((((int)threadIdx.x) % 3) + 1758) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1579)] * weight_shared[(((((int)threadIdx.x) % 3) + 1761) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1164)] * weight_shared[(((((int)threadIdx.x) % 3) + 3012) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1165)] * weight_shared[(((((int)threadIdx.x) % 3) + 3015) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1196)] * weight_shared[(((((int)threadIdx.x) % 3) + 2916) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1197)] * weight_shared[(((((int)threadIdx.x) % 3) + 2919) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1356)] * weight_shared[(((((int)threadIdx.x) % 3) + 2244) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1357)] * weight_shared[(((((int)threadIdx.x) % 3) + 2247) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1388)] * weight_shared[(((((int)threadIdx.x) % 3) + 2148) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1389)] * weight_shared[(((((int)threadIdx.x) % 3) + 2151) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1356)] * weight_shared[(((((int)threadIdx.x) % 3) + 2628) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1357)] * weight_shared[(((((int)threadIdx.x) % 3) + 2631) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1388)] * weight_shared[(((((int)threadIdx.x) % 3) + 2532) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1389)] * weight_shared[(((((int)threadIdx.x) % 3) + 2535) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1548)] * weight_shared[(((((int)threadIdx.x) % 3) + 1860) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1549)] * weight_shared[(((((int)threadIdx.x) % 3) + 1863) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1580)] * weight_shared[(((((int)threadIdx.x) % 3) + 1764) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1581)] * weight_shared[(((((int)threadIdx.x) % 3) + 1767) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1166)] * weight_shared[(((((int)threadIdx.x) % 3) + 3018) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1167)] * weight_shared[(((((int)threadIdx.x) % 3) + 3021) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1198)] * weight_shared[(((((int)threadIdx.x) % 3) + 2922) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1199)] * weight_shared[(((((int)threadIdx.x) % 3) + 2925) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1358)] * weight_shared[(((((int)threadIdx.x) % 3) + 2250) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1359)] * weight_shared[(((((int)threadIdx.x) % 3) + 2253) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1390)] * weight_shared[(((((int)threadIdx.x) % 3) + 2154) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1391)] * weight_shared[(((((int)threadIdx.x) % 3) + 2157) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1358)] * weight_shared[(((((int)threadIdx.x) % 3) + 2634) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1359)] * weight_shared[(((((int)threadIdx.x) % 3) + 2637) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1390)] * weight_shared[(((((int)threadIdx.x) % 3) + 2538) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1391)] * weight_shared[(((((int)threadIdx.x) % 3) + 2541) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1550)] * weight_shared[(((((int)threadIdx.x) % 3) + 1866) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1551)] * weight_shared[(((((int)threadIdx.x) % 3) + 1869) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1582)] * weight_shared[(((((int)threadIdx.x) % 3) + 1770) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1583)] * weight_shared[(((((int)threadIdx.x) % 3) + 1773) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1168)] * weight_shared[(((((int)threadIdx.x) % 3) + 3024) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1169)] * weight_shared[(((((int)threadIdx.x) % 3) + 3027) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1200)] * weight_shared[(((((int)threadIdx.x) % 3) + 2928) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1201)] * weight_shared[(((((int)threadIdx.x) % 3) + 2931) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1360)] * weight_shared[(((((int)threadIdx.x) % 3) + 2256) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1361)] * weight_shared[(((((int)threadIdx.x) % 3) + 2259) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1392)] * weight_shared[(((((int)threadIdx.x) % 3) + 2160) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1393)] * weight_shared[(((((int)threadIdx.x) % 3) + 2163) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1360)] * weight_shared[(((((int)threadIdx.x) % 3) + 2640) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1361)] * weight_shared[(((((int)threadIdx.x) % 3) + 2643) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1392)] * weight_shared[(((((int)threadIdx.x) % 3) + 2544) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1393)] * weight_shared[(((((int)threadIdx.x) % 3) + 2547) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1552)] * weight_shared[(((((int)threadIdx.x) % 3) + 1872) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1553)] * weight_shared[(((((int)threadIdx.x) % 3) + 1875) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1584)] * weight_shared[(((((int)threadIdx.x) % 3) + 1776) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1585)] * weight_shared[(((((int)threadIdx.x) % 3) + 1779) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1170)] * weight_shared[(((((int)threadIdx.x) % 3) + 3030) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1171)] * weight_shared[(((((int)threadIdx.x) % 3) + 3033) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1202)] * weight_shared[(((((int)threadIdx.x) % 3) + 2934) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1203)] * weight_shared[(((((int)threadIdx.x) % 3) + 2937) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1362)] * weight_shared[(((((int)threadIdx.x) % 3) + 2262) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1363)] * weight_shared[(((((int)threadIdx.x) % 3) + 2265) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1394)] * weight_shared[(((((int)threadIdx.x) % 3) + 2166) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1395)] * weight_shared[(((((int)threadIdx.x) % 3) + 2169) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1362)] * weight_shared[(((((int)threadIdx.x) % 3) + 2646) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1363)] * weight_shared[(((((int)threadIdx.x) % 3) + 2649) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1394)] * weight_shared[(((((int)threadIdx.x) % 3) + 2550) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1395)] * weight_shared[(((((int)threadIdx.x) % 3) + 2553) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1554)] * weight_shared[(((((int)threadIdx.x) % 3) + 1878) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1555)] * weight_shared[(((((int)threadIdx.x) % 3) + 1881) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1586)] * weight_shared[(((((int)threadIdx.x) % 3) + 1782) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1587)] * weight_shared[(((((int)threadIdx.x) % 3) + 1785) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1172)] * weight_shared[(((((int)threadIdx.x) % 3) + 3036) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1173)] * weight_shared[(((((int)threadIdx.x) % 3) + 3039) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1204)] * weight_shared[(((((int)threadIdx.x) % 3) + 2940) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1205)] * weight_shared[(((((int)threadIdx.x) % 3) + 2943) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1364)] * weight_shared[(((((int)threadIdx.x) % 3) + 2268) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1365)] * weight_shared[(((((int)threadIdx.x) % 3) + 2271) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1396)] * weight_shared[(((((int)threadIdx.x) % 3) + 2172) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1397)] * weight_shared[(((((int)threadIdx.x) % 3) + 2175) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1364)] * weight_shared[(((((int)threadIdx.x) % 3) + 2652) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1365)] * weight_shared[(((((int)threadIdx.x) % 3) + 2655) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1396)] * weight_shared[(((((int)threadIdx.x) % 3) + 2556) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1397)] * weight_shared[(((((int)threadIdx.x) % 3) + 2559) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1556)] * weight_shared[(((((int)threadIdx.x) % 3) + 1884) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1557)] * weight_shared[(((((int)threadIdx.x) % 3) + 1887) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1588)] * weight_shared[(((((int)threadIdx.x) % 3) + 1788) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1589)] * weight_shared[(((((int)threadIdx.x) % 3) + 1791) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1174)] * weight_shared[(((((int)threadIdx.x) % 3) + 3042) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1175)] * weight_shared[(((((int)threadIdx.x) % 3) + 3045) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1206)] * weight_shared[(((((int)threadIdx.x) % 3) + 2946) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1207)] * weight_shared[(((((int)threadIdx.x) % 3) + 2949) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1366)] * weight_shared[(((((int)threadIdx.x) % 3) + 2274) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1367)] * weight_shared[(((((int)threadIdx.x) % 3) + 2277) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1398)] * weight_shared[(((((int)threadIdx.x) % 3) + 2178) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1399)] * weight_shared[(((((int)threadIdx.x) % 3) + 2181) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1366)] * weight_shared[(((((int)threadIdx.x) % 3) + 2658) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1367)] * weight_shared[(((((int)threadIdx.x) % 3) + 2661) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1398)] * weight_shared[(((((int)threadIdx.x) % 3) + 2562) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1399)] * weight_shared[(((((int)threadIdx.x) % 3) + 2565) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1558)] * weight_shared[(((((int)threadIdx.x) % 3) + 1890) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1559)] * weight_shared[(((((int)threadIdx.x) % 3) + 1893) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1590)] * weight_shared[(((((int)threadIdx.x) % 3) + 1794) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1591)] * weight_shared[(((((int)threadIdx.x) % 3) + 1797) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1176)] * weight_shared[(((((int)threadIdx.x) % 3) + 3048) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1177)] * weight_shared[(((((int)threadIdx.x) % 3) + 3051) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1208)] * weight_shared[(((((int)threadIdx.x) % 3) + 2952) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1209)] * weight_shared[(((((int)threadIdx.x) % 3) + 2955) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1368)] * weight_shared[(((((int)threadIdx.x) % 3) + 2280) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1369)] * weight_shared[(((((int)threadIdx.x) % 3) + 2283) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1400)] * weight_shared[(((((int)threadIdx.x) % 3) + 2184) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1401)] * weight_shared[(((((int)threadIdx.x) % 3) + 2187) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1368)] * weight_shared[(((((int)threadIdx.x) % 3) + 2664) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1369)] * weight_shared[(((((int)threadIdx.x) % 3) + 2667) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1400)] * weight_shared[(((((int)threadIdx.x) % 3) + 2568) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1401)] * weight_shared[(((((int)threadIdx.x) % 3) + 2571) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1560)] * weight_shared[(((((int)threadIdx.x) % 3) + 1896) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1561)] * weight_shared[(((((int)threadIdx.x) % 3) + 1899) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1592)] * weight_shared[(((((int)threadIdx.x) % 3) + 1800) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1593)] * weight_shared[(((((int)threadIdx.x) % 3) + 1803) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1178)] * weight_shared[(((((int)threadIdx.x) % 3) + 3054) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1179)] * weight_shared[(((((int)threadIdx.x) % 3) + 3057) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1210)] * weight_shared[(((((int)threadIdx.x) % 3) + 2958) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1211)] * weight_shared[(((((int)threadIdx.x) % 3) + 2961) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1370)] * weight_shared[(((((int)threadIdx.x) % 3) + 2286) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1371)] * weight_shared[(((((int)threadIdx.x) % 3) + 2289) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1402)] * weight_shared[(((((int)threadIdx.x) % 3) + 2190) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1403)] * weight_shared[(((((int)threadIdx.x) % 3) + 2193) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1370)] * weight_shared[(((((int)threadIdx.x) % 3) + 2670) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1371)] * weight_shared[(((((int)threadIdx.x) % 3) + 2673) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1402)] * weight_shared[(((((int)threadIdx.x) % 3) + 2574) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1403)] * weight_shared[(((((int)threadIdx.x) % 3) + 2577) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1562)] * weight_shared[(((((int)threadIdx.x) % 3) + 1902) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1563)] * weight_shared[(((((int)threadIdx.x) % 3) + 1905) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1594)] * weight_shared[(((((int)threadIdx.x) % 3) + 1806) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1595)] * weight_shared[(((((int)threadIdx.x) % 3) + 1809) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1180)] * weight_shared[(((((int)threadIdx.x) % 3) + 3060) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1181)] * weight_shared[(((((int)threadIdx.x) % 3) + 3063) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1212)] * weight_shared[(((((int)threadIdx.x) % 3) + 2964) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1213)] * weight_shared[(((((int)threadIdx.x) % 3) + 2967) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1372)] * weight_shared[(((((int)threadIdx.x) % 3) + 2292) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1373)] * weight_shared[(((((int)threadIdx.x) % 3) + 2295) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1404)] * weight_shared[(((((int)threadIdx.x) % 3) + 2196) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1405)] * weight_shared[(((((int)threadIdx.x) % 3) + 2199) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1372)] * weight_shared[(((((int)threadIdx.x) % 3) + 2676) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1373)] * weight_shared[(((((int)threadIdx.x) % 3) + 2679) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1404)] * weight_shared[(((((int)threadIdx.x) % 3) + 2580) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1405)] * weight_shared[(((((int)threadIdx.x) % 3) + 2583) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1564)] * weight_shared[(((((int)threadIdx.x) % 3) + 1908) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1565)] * weight_shared[(((((int)threadIdx.x) % 3) + 1911) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1596)] * weight_shared[(((((int)threadIdx.x) % 3) + 1812) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1597)] * weight_shared[(((((int)threadIdx.x) % 3) + 1815) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1182)] * weight_shared[(((((int)threadIdx.x) % 3) + 3066) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1183)] * weight_shared[(((((int)threadIdx.x) % 3) + 3069) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1214)] * weight_shared[(((((int)threadIdx.x) % 3) + 2970) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1215)] * weight_shared[(((((int)threadIdx.x) % 3) + 2973) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1374)] * weight_shared[(((((int)threadIdx.x) % 3) + 2298) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1375)] * weight_shared[(((((int)threadIdx.x) % 3) + 2301) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1406)] * weight_shared[(((((int)threadIdx.x) % 3) + 2202) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1407)] * weight_shared[(((((int)threadIdx.x) % 3) + 2205) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1374)] * weight_shared[(((((int)threadIdx.x) % 3) + 2682) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1375)] * weight_shared[(((((int)threadIdx.x) % 3) + 2685) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1406)] * weight_shared[(((((int)threadIdx.x) % 3) + 2586) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1407)] * weight_shared[(((((int)threadIdx.x) % 3) + 2589) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1566)] * weight_shared[(((((int)threadIdx.x) % 3) + 1914) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1567)] * weight_shared[(((((int)threadIdx.x) % 3) + 1917) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1598)] * weight_shared[(((((int)threadIdx.x) % 3) + 1818) - (rw_1_1 * 192))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) / 12) * 192) + (((((int)threadIdx.x) % 12) / 3) * 32)) + (rw_1_1 * 32)) + 1599)] * weight_shared[(((((int)threadIdx.x) % 3) + 1821) - (rw_1_1 * 192))]));
  }
  conv2d_transpose_nhwc[((((((((int)blockIdx.x) >> 3) * 1536) + ((((int)threadIdx.x) / 12) * 384)) + ((((int)blockIdx.x) & 7) * 24)) + (((((int)threadIdx.x) % 12) / 3) * 6)) + (((int)threadIdx.x) % 3))] = conv2d_transpose_nhwc_local[0];
  conv2d_transpose_nhwc[(((((((((int)blockIdx.x) >> 3) * 1536) + ((((int)threadIdx.x) / 12) * 384)) + ((((int)blockIdx.x) & 7) * 24)) + (((((int)threadIdx.x) % 12) / 3) * 6)) + (((int)threadIdx.x) % 3)) + 3)] = conv2d_transpose_nhwc_local[1];
  conv2d_transpose_nhwc[(((((((((int)blockIdx.x) >> 3) * 1536) + ((((int)threadIdx.x) / 12) * 384)) + ((((int)blockIdx.x) & 7) * 24)) + (((((int)threadIdx.x) % 12) / 3) * 6)) + (((int)threadIdx.x) % 3)) + 192)] = conv2d_transpose_nhwc_local[2];
  conv2d_transpose_nhwc[(((((((((int)blockIdx.x) >> 3) * 1536) + ((((int)threadIdx.x) / 12) * 384)) + ((((int)blockIdx.x) & 7) * 24)) + (((((int)threadIdx.x) % 12) / 3) * 6)) + (((int)threadIdx.x) % 3)) + 195)] = conv2d_transpose_nhwc_local[3];
}


The time of T2D is 0.015 ms
2025-07-24 11:04:49 [INFO] Logging directory: /tmp/tmp4oe9uxdd/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:08:32 [DEBUG] XGB iter   0: tr-p-rmse: 0.543682	tr-a-peak@32: 0.640138	tr-rmse: 0.238039	tr-rmse: 0.238039
2025-07-24 11:08:32 [DEBUG] XGB iter  25: tr-p-rmse: 0.054882	tr-a-peak@32: 1.000000	tr-rmse: 0.317406	tr-rmse: 0.317406
2025-07-24 11:08:32 [DEBUG] XGB iter  50: tr-p-rmse: 0.054882	tr-a-peak@32: 1.000000	tr-rmse: 0.317406	tr-rmse: 0.317406
2025-07-24 11:08:32 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.05488	tr-a-peak@32:1.00000	tr-rmse:0.31741	tr-rmse:0.31741 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:12:10 [DEBUG] XGB validation: p-rmse: 0.171909	a-peak@32: 0.858497
2025-07-24 11:12:10 [DEBUG] XGB iter   0: tr-p-rmse: 0.549238	tr-a-peak@32: 0.478104	tr-rmse: 0.230498	tr-rmse: 0.230498
2025-07-24 11:12:10 [DEBUG] XGB iter  25: tr-p-rmse: 0.051539	tr-a-peak@32: 1.000000	tr-rmse: 0.312285	tr-rmse: 0.312285
2025-07-24 11:12:10 [DEBUG] XGB iter  50: tr-p-rmse: 0.051539	tr-a-peak@32: 1.000000	tr-rmse: 0.312285	tr-rmse: 0.312285
2025-07-24 11:12:10 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05154	tr-a-peak@32:1.00000	tr-rmse:0.31228	tr-rmse:0.31228 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:16:54 [DEBUG] XGB validation: p-rmse: 0.227061	a-peak@32: 0.933972
2025-07-24 11:16:54 [DEBUG] XGB iter   0: tr-p-rmse: 0.524167	tr-a-peak@32: 0.973382	tr-rmse: 0.296146	tr-rmse: 0.296146
2025-07-24 11:16:54 [DEBUG] XGB iter  25: tr-p-rmse: 0.055606	tr-a-peak@32: 1.000000	tr-rmse: 0.380192	tr-rmse: 0.380192
2025-07-24 11:16:54 [DEBUG] XGB iter  50: tr-p-rmse: 0.055606	tr-a-peak@32: 1.000000	tr-rmse: 0.380192	tr-rmse: 0.380192
2025-07-24 11:16:54 [DEBUG] XGB iter  75: tr-p-rmse: 0.055606	tr-a-peak@32: 1.000000	tr-rmse: 0.380192	tr-rmse: 0.380192
2025-07-24 11:16:54 [DEBUG] XGB stopped. Best iteration: [25] tr-p-rmse:0.05561	tr-a-peak@32:1.00000	tr-rmse:0.38019	tr-rmse:0.38019 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:21:23 [DEBUG] XGB validation: p-rmse: 0.229382	a-peak@32: 0.808105
2025-07-24 11:21:23 [DEBUG] XGB iter   0: tr-p-rmse: 0.514376	tr-a-peak@32: 0.983501	tr-rmse: 0.326301	tr-rmse: 0.326301
2025-07-24 11:21:23 [DEBUG] XGB iter  25: tr-p-rmse: 0.073528	tr-a-peak@32: 0.987254	tr-rmse: 0.412382	tr-rmse: 0.412382
2025-07-24 11:21:23 [DEBUG] XGB iter  50: tr-p-rmse: 0.073528	tr-a-peak@32: 0.987254	tr-rmse: 0.412382	tr-rmse: 0.412382
2025-07-24 11:21:23 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.07353	tr-a-peak@32:0.98725	tr-rmse:0.41238	tr-rmse:0.41238 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:26:03 [DEBUG] XGB validation: p-rmse: 0.207701	a-peak@32: 0.744657
2025-07-24 11:26:03 [DEBUG] XGB iter   0: tr-p-rmse: 0.499130	tr-a-peak@32: 0.834721	tr-rmse: 0.321822	tr-rmse: 0.321822
2025-07-24 11:26:03 [DEBUG] XGB iter  25: tr-p-rmse: 0.081080	tr-a-peak@32: 0.995410	tr-rmse: 0.412962	tr-rmse: 0.412962
2025-07-24 11:26:03 [DEBUG] XGB iter  50: tr-p-rmse: 0.081080	tr-a-peak@32: 0.995410	tr-rmse: 0.412962	tr-rmse: 0.412962
2025-07-24 11:26:03 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.08108	tr-a-peak@32:0.99541	tr-rmse:0.41296	tr-rmse:0.41296 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:30:34 [DEBUG] XGB validation: p-rmse: 0.173372	a-peak@32: 0.804402
2025-07-24 11:30:34 [DEBUG] XGB iter   0: tr-p-rmse: 0.472192	tr-a-peak@32: 0.915303	tr-rmse: 0.334704	tr-rmse: 0.334704
2025-07-24 11:30:34 [DEBUG] XGB iter  25: tr-p-rmse: 0.086491	tr-a-peak@32: 0.987595	tr-rmse: 0.429009	tr-rmse: 0.429009
2025-07-24 11:30:34 [DEBUG] XGB iter  50: tr-p-rmse: 0.086491	tr-a-peak@32: 0.987595	tr-rmse: 0.429009	tr-rmse: 0.429009
2025-07-24 11:30:34 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.08649	tr-a-peak@32:0.98760	tr-rmse:0.42901	tr-rmse:0.42901 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:34:57 [DEBUG] XGB validation: p-rmse: 0.194744	a-peak@32: 0.927303
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:39:23 [DEBUG] XGB validation: p-rmse: 0.163068	a-peak@32: 0.999566
2025-07-24 11:39:23 [DEBUG] XGB iter   0: tr-p-rmse: 0.484164	tr-a-peak@32: 0.657785	tr-rmse: 0.264908	tr-rmse: 0.264908
2025-07-24 11:39:24 [DEBUG] XGB iter  25: tr-p-rmse: 0.087883	tr-a-peak@32: 0.946395	tr-rmse: 0.370619	tr-rmse: 0.370619
2025-07-24 11:39:24 [DEBUG] XGB iter  50: tr-p-rmse: 0.087883	tr-a-peak@32: 0.946395	tr-rmse: 0.370619	tr-rmse: 0.370619
2025-07-24 11:39:24 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.08788	tr-a-peak@32:0.94639	tr-rmse:0.37062	tr-rmse:0.37062 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:43:47 [DEBUG] XGB validation: p-rmse: 0.234096	a-peak@32: 0.965995
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:48:11 [DEBUG] XGB validation: p-rmse: 0.202024	a-peak@32: 0.843635
2025-07-24 11:48:11 [DEBUG] XGB iter   0: tr-p-rmse: 0.497632	tr-a-peak@32: 0.629200	tr-rmse: 0.228293	tr-rmse: 0.228293
2025-07-24 11:48:11 [DEBUG] XGB iter  25: tr-p-rmse: 0.091136	tr-a-peak@32: 0.962988	tr-rmse: 0.334617	tr-rmse: 0.334617
2025-07-24 11:48:11 [DEBUG] XGB iter  50: tr-p-rmse: 0.091136	tr-a-peak@32: 0.962988	tr-rmse: 0.334617	tr-rmse: 0.334617
2025-07-24 11:48:11 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.09114	tr-a-peak@32:0.96299	tr-rmse:0.33462	tr-rmse:0.33462 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:52:33 [DEBUG] XGB validation: p-rmse: 0.181238	a-peak@32: 0.945340
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 11:56:59 [DEBUG] XGB validation: p-rmse: 0.143704	a-peak@32: 0.895692
2025-07-24 11:56:59 [DEBUG] XGB iter   0: tr-p-rmse: 0.493525	tr-a-peak@32: 0.762636	tr-rmse: 0.248210	tr-rmse: 0.248210
2025-07-24 11:57:00 [DEBUG] XGB iter  25: tr-p-rmse: 0.100405	tr-a-peak@32: 0.919706	tr-rmse: 0.352453	tr-rmse: 0.352453
2025-07-24 11:57:00 [DEBUG] XGB iter  50: tr-p-rmse: 0.100405	tr-a-peak@32: 0.919706	tr-rmse: 0.352453	tr-rmse: 0.352453
2025-07-24 11:57:00 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.10040	tr-a-peak@32:0.91971	tr-rmse:0.35245	tr-rmse:0.35245 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:01:23 [DEBUG] XGB validation: p-rmse: 0.118594	a-peak@32: 0.977855
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:05:46 [DEBUG] XGB validation: p-rmse: 0.144202	a-peak@32: 0.741869
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:10:10 [DEBUG] XGB validation: p-rmse: 0.163965	a-peak@32: 0.824262
2025-07-24 12:10:10 [DEBUG] XGB iter   0: tr-p-rmse: 0.486257	tr-a-peak@32: 0.910302	tr-rmse: 0.246204	tr-rmse: 0.246204
2025-07-24 12:10:10 [DEBUG] XGB iter  25: tr-p-rmse: 0.098531	tr-a-peak@32: 0.951819	tr-rmse: 0.352671	tr-rmse: 0.352671
2025-07-24 12:10:10 [DEBUG] XGB iter  50: tr-p-rmse: 0.098531	tr-a-peak@32: 0.951819	tr-rmse: 0.352671	tr-rmse: 0.352671
2025-07-24 12:10:10 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.09853	tr-a-peak@32:0.95182	tr-rmse:0.35267	tr-rmse:0.35267 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:14:32 [DEBUG] XGB validation: p-rmse: 0.132970	a-peak@32: 0.982978
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ conv2d_capsule_nhwijc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ conv2d_capsule_nhwijc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[1];
  nvcuda::wmma::fill_fragment(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  uint4 condval;
  if (((2 <= ((int)blockIdx.x)) && ((((int)blockIdx.x) & 1) == 1))) {
    condval = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 2304));
  } else {
    condval = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8))) = condval;
  uint4 condval_1;
  if ((2 <= ((int)blockIdx.x))) {
    condval_1 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 2048));
  } else {
    condval_1 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 288)) = condval_1;
  uint4 condval_2;
  if ((2 <= ((int)blockIdx.x))) {
    condval_2 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 1792));
  } else {
    condval_2 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 576)) = condval_2;
  uint4 condval_3;
  if ((2 <= ((int)blockIdx.x))) {
    condval_3 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 1536));
  } else {
    condval_3 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 864)) = condval_3;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1152)) = *(uint4*)(weight + ((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1792)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 1024));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 2432)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 2048));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 3072)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 3072));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1152])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1792])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2432])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3072])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_4;
  if ((2 <= ((int)blockIdx.x))) {
    condval_4 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 2048));
  } else {
    condval_4 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8))) = condval_4;
  uint4 condval_5;
  if ((2 <= ((int)blockIdx.x))) {
    condval_5 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 1792));
  } else {
    condval_5 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 288)) = condval_5;
  uint4 condval_6;
  if ((2 <= ((int)blockIdx.x))) {
    condval_6 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 1536));
  } else {
    condval_6 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 576)) = condval_6;
  uint4 condval_7;
  if ((2 <= ((int)blockIdx.x))) {
    condval_7 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 1280));
  } else {
    condval_7 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 864)) = condval_7;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1152)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 4096));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1792)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 5120));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 2432)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 6144));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 3072)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 7168));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1152])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1792])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2432])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3072])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_8;
  if ((2 <= ((int)blockIdx.x))) {
    condval_8 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 1792));
  } else {
    condval_8 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8))) = condval_8;
  uint4 condval_9;
  if ((2 <= ((int)blockIdx.x))) {
    condval_9 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 1536));
  } else {
    condval_9 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 288)) = condval_9;
  uint4 condval_10;
  if ((2 <= ((int)blockIdx.x))) {
    condval_10 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 1280));
  } else {
    condval_10 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 576)) = condval_10;
  uint4 condval_11;
  if (((2 <= ((int)blockIdx.x)) && ((((int)blockIdx.x) & 1) < 1))) {
    condval_11 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 1024));
  } else {
    condval_11 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 864)) = condval_11;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1152)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 8192));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1792)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 9216));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 2432)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 10240));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 3072)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 11264));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1152])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1792])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2432])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3072])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_12;
  if (((((int)blockIdx.x) & 1) == 1)) {
    condval_12 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) - 256));
  } else {
    condval_12 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8))) = condval_12;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 288)) = *(uint4*)(inputs + ((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 576)) = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 256));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 864)) = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 512));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1152)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 12288));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1792)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 13312));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 2432)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 14336));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 3072)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 15360));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1152])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1792])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2432])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3072])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8))) = *(uint4*)(inputs + ((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 288)) = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 256));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 576)) = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 512));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 864)) = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 768));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1152)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 16384));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1792)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 17408));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 2432)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 18432));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 3072)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 19456));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1152])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1792])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2432])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3072])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8))) = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 256));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 288)) = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 512));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 576)) = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 768));
  uint4 condval_13;
  if (((((int)blockIdx.x) & 1) < 1)) {
    condval_13 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 1024));
  } else {
    condval_13 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 864)) = condval_13;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1152)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 20480));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1792)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 21504));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 2432)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 22528));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 3072)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 23552));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1152])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1792])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2432])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3072])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_14;
  if (((((int)blockIdx.x) < 14) && ((((int)blockIdx.x) & 1) == 1))) {
    condval_14 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 1792));
  } else {
    condval_14 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8))) = condval_14;
  uint4 condval_15;
  if ((((int)blockIdx.x) < 14)) {
    condval_15 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 2048));
  } else {
    condval_15 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 288)) = condval_15;
  uint4 condval_16;
  if ((((int)blockIdx.x) < 14)) {
    condval_16 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 2304));
  } else {
    condval_16 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 576)) = condval_16;
  uint4 condval_17;
  if ((((int)blockIdx.x) < 14)) {
    condval_17 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 2560));
  } else {
    condval_17 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 864)) = condval_17;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1152)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 24576));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1792)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 25600));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 2432)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 26624));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 3072)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 27648));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1152])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1792])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2432])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3072])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_18;
  if ((((int)blockIdx.x) < 14)) {
    condval_18 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 2048));
  } else {
    condval_18 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8))) = condval_18;
  uint4 condval_19;
  if ((((int)blockIdx.x) < 14)) {
    condval_19 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 2304));
  } else {
    condval_19 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 288)) = condval_19;
  uint4 condval_20;
  if ((((int)blockIdx.x) < 14)) {
    condval_20 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 2560));
  } else {
    condval_20 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 576)) = condval_20;
  uint4 condval_21;
  if ((((int)blockIdx.x) < 14)) {
    condval_21 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 2816));
  } else {
    condval_21 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 864)) = condval_21;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1152)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 28672));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1792)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 29696));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 2432)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 30720));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 3072)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 31744));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1152])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1792])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2432])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3072])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_22;
  if ((((int)blockIdx.x) < 14)) {
    condval_22 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 2304));
  } else {
    condval_22 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8))) = condval_22;
  uint4 condval_23;
  if ((((int)blockIdx.x) < 14)) {
    condval_23 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 2560));
  } else {
    condval_23 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 288)) = condval_23;
  uint4 condval_24;
  if ((((int)blockIdx.x) < 14)) {
    condval_24 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 2816));
  } else {
    condval_24 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 576)) = condval_24;
  uint4 condval_25;
  if (((((int)blockIdx.x) < 13) && ((((int)blockIdx.x) & 1) < 1))) {
    condval_25 = *(uint4*)(inputs + (((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)) + 3072));
  } else {
    condval_25 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 864)) = condval_25;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1152)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 32768));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1792)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 33792));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 2432)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 34816));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 3072)) = *(uint4*)(weight + (((((int)blockIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 35840));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1152])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1792])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2432])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3072])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[0])), conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half2*)(conv2d_capsule_nhwijc + ((((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) >> 3) * 64)) + (((int)blockIdx.y) * 16)) + ((((int)threadIdx.x) & 7) * 2))) = *(half2*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 2));
  *(half2*)(conv2d_capsule_nhwijc + (((((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) >> 3) * 64)) + (((int)blockIdx.y) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 256)) = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 64));
  *(half2*)(conv2d_capsule_nhwijc + (((((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) >> 3) * 64)) + (((int)blockIdx.y) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 512)) = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 128));
  *(half2*)(conv2d_capsule_nhwijc + (((((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) >> 3) * 64)) + (((int)blockIdx.y) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 768)) = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 192));
}


The time of CAP is 0.011 ms
2025-07-24 12:14:33 [INFO] Logging directory: /tmp/tmp8kdaf7aa/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:15:38 [DEBUG] XGB iter   0: tr-p-rmse: 0.584914	tr-a-peak@32: 0.994884	tr-rmse: 0.441447	tr-rmse: 0.441447
2025-07-24 12:15:38 [DEBUG] XGB iter  25: tr-p-rmse: 0.024648	tr-a-peak@32: 0.999999	tr-rmse: 0.512037	tr-rmse: 0.512037
2025-07-24 12:15:38 [DEBUG] XGB iter  50: tr-p-rmse: 0.024648	tr-a-peak@32: 0.999999	tr-rmse: 0.512037	tr-rmse: 0.512037
2025-07-24 12:15:38 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.02465	tr-a-peak@32:1.00000	tr-rmse:0.51204	tr-rmse:0.51204 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====

#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ < 700)
#define __shfl_sync(mask, var, lane, width) \
        __shfl((var), (lane), (width))

#define __shfl_down_sync(mask, var, offset, width) \
        __shfl_down((var), (offset), (width))

#define __shfl_up_sync(mask, var, offset, width) \
        __shfl_up((var), (offset), (width))
#endif


#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(512) main_kernel(float* __restrict__ A, float* __restrict__ D);
extern "C" __global__ void __launch_bounds__(512) main_kernel(float* __restrict__ A, float* __restrict__ D) {
  float in_thread_C_shared[1];
  __shared__ float red_result[1];
  __shared__ float C_shared[1];
  in_thread_C_shared[0] = 0.000000e+00f;
  for (int ax1_ax2_fused_0 = 0; ax1_ax2_fused_0 < 8192; ++ax1_ax2_fused_0) {
    in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[((ax1_ax2_fused_0 * 512) + ((int)threadIdx.x))] * A[((ax1_ax2_fused_0 * 512) + ((int)threadIdx.x))]));
  }
  float red_buf0[1];
  uint mask[1];
  float t0[1];
  float red_buf0_1[1];
  uint mask_1[1];
  float t0_1[1];
  __shared__ float red_buf_staging[16];
  red_buf0_1[0] = in_thread_C_shared[0];
  mask_1[0] = __activemask();
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 16, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 8, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 4, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 2, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 1, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  if ((((int)threadIdx.x) % 32) == 0) {
    red_buf_staging[(((int)threadIdx.x) >> 5)] = red_buf0_1[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) < 16) {
    red_buf0[0] = red_buf_staging[((int)threadIdx.x)];
  }
  mask[0] = __activemask();
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 8, 32);
  red_buf0[0] = (red_buf0[0] + t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 4, 32);
  red_buf0[0] = (red_buf0[0] + t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 2, 32);
  red_buf0[0] = (red_buf0[0] + t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 1, 32);
  red_buf0[0] = (red_buf0[0] + t0[0]);
  if (((int)threadIdx.x) == 0) {
    ((volatile float*)red_result)[0] = red_buf0[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) == 0) {
    C_shared[0] = ((volatile float*)red_result)[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) < 1) {
    D[0] = sqrtf(C_shared[0]);
  }
}


The time of NRM is 0.351 ms
2025-07-24 12:15:48 [INFO] Logging directory: /tmp/tmp6yxpepf0/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:16:55 [DEBUG] XGB iter   0: tr-p-rmse: 0.487426	tr-a-peak@32: 0.950358	tr-rmse: 0.445467	tr-rmse: 0.445467
2025-07-24 12:16:55 [DEBUG] XGB iter  25: tr-p-rmse: 0.064053	tr-a-peak@32: 1.000000	tr-rmse: 0.444778	tr-rmse: 0.444778
2025-07-24 12:16:55 [DEBUG] XGB iter  50: tr-p-rmse: 0.064053	tr-a-peak@32: 1.000000	tr-rmse: 0.444778	tr-rmse: 0.444778
2025-07-24 12:16:55 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.06405	tr-a-peak@32:1.00000	tr-rmse:0.44478	tr-rmse:0.44478 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:17:53 [DEBUG] XGB validation: p-rmse: 0.122266	a-peak@32: 1.000000
2025-07-24 12:17:53 [DEBUG] XGB iter   0: tr-p-rmse: 0.460865	tr-a-peak@32: 0.954139	tr-rmse: 0.419318	tr-rmse: 0.419318
2025-07-24 12:17:53 [DEBUG] XGB iter  25: tr-p-rmse: 0.060563	tr-a-peak@32: 1.000000	tr-rmse: 0.419590	tr-rmse: 0.419590
2025-07-24 12:17:54 [DEBUG] XGB iter  50: tr-p-rmse: 0.060563	tr-a-peak@32: 1.000000	tr-rmse: 0.419590	tr-rmse: 0.419590
2025-07-24 12:17:54 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.06056	tr-a-peak@32:1.00000	tr-rmse:0.41959	tr-rmse:0.41959 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:18:57 [DEBUG] XGB validation: p-rmse: 0.233967	a-peak@32: 0.959604
2025-07-24 12:18:57 [DEBUG] XGB iter   0: tr-p-rmse: 0.441901	tr-a-peak@32: 0.940317	tr-rmse: 0.542430	tr-rmse: 0.542430
2025-07-24 12:18:58 [DEBUG] XGB iter  25: tr-p-rmse: 0.059216	tr-a-peak@32: 1.000000	tr-rmse: 0.536858	tr-rmse: 0.536858
2025-07-24 12:18:58 [DEBUG] XGB iter  50: tr-p-rmse: 0.059216	tr-a-peak@32: 1.000000	tr-rmse: 0.536858	tr-rmse: 0.536858
2025-07-24 12:18:58 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.05922	tr-a-peak@32:1.00000	tr-rmse:0.53686	tr-rmse:0.53686 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:19:59 [DEBUG] XGB validation: p-rmse: 0.072370	a-peak@32: 0.989241
2025-07-24 12:19:59 [DEBUG] XGB iter   0: tr-p-rmse: 0.438219	tr-a-peak@32: 0.933450	tr-rmse: 0.497654	tr-rmse: 0.497654
2025-07-24 12:19:59 [DEBUG] XGB iter  25: tr-p-rmse: 0.056321	tr-a-peak@32: 1.000000	tr-rmse: 0.494589	tr-rmse: 0.494589
2025-07-24 12:19:59 [DEBUG] XGB iter  50: tr-p-rmse: 0.056321	tr-a-peak@32: 1.000000	tr-rmse: 0.494589	tr-rmse: 0.494589
2025-07-24 12:20:08 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.05632	tr-a-peak@32:1.00000	tr-rmse:0.49459	tr-rmse:0.49459 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:21:11 [DEBUG] XGB validation: p-rmse: 0.067317	a-peak@32: 0.987881
2025-07-24 12:21:11 [DEBUG] XGB iter   0: tr-p-rmse: 0.440697	tr-a-peak@32: 0.991624	tr-rmse: 0.470347	tr-rmse: 0.470347
2025-07-24 12:21:11 [DEBUG] XGB iter  25: tr-p-rmse: 0.053073	tr-a-peak@32: 0.999452	tr-rmse: 0.467986	tr-rmse: 0.467986
2025-07-24 12:21:11 [DEBUG] XGB iter  50: tr-p-rmse: 0.053073	tr-a-peak@32: 0.999452	tr-rmse: 0.467986	tr-rmse: 0.467986
2025-07-24 12:21:11 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.05307	tr-a-peak@32:0.99945	tr-rmse:0.46799	tr-rmse:0.46799 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:22:14 [DEBUG] XGB validation: p-rmse: 0.055946	a-peak@32: 0.986291
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:23:16 [DEBUG] XGB validation: p-rmse: 0.057469	a-peak@32: 0.993671
2025-07-24 12:23:16 [DEBUG] XGB iter   0: tr-p-rmse: 0.449838	tr-a-peak@32: 0.923662	tr-rmse: 0.436921	tr-rmse: 0.436921
2025-07-24 12:23:16 [DEBUG] XGB iter  25: tr-p-rmse: 0.044541	tr-a-peak@32: 1.000000	tr-rmse: 0.435183	tr-rmse: 0.435183
2025-07-24 12:23:16 [DEBUG] XGB iter  50: tr-p-rmse: 0.044541	tr-a-peak@32: 1.000000	tr-rmse: 0.435183	tr-rmse: 0.435183
2025-07-24 12:23:17 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.04454	tr-a-peak@32:1.00000	tr-rmse:0.43518	tr-rmse:0.43518 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:24:17 [DEBUG] XGB validation: p-rmse: 0.026404	a-peak@32: 0.983452
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:25:23 [DEBUG] XGB validation: p-rmse: 0.068199	a-peak@32: 0.994141
2025-07-24 12:25:23 [DEBUG] XGB iter   0: tr-p-rmse: 0.457446	tr-a-peak@32: 0.952515	tr-rmse: 0.419077	tr-rmse: 0.419077
2025-07-24 12:25:23 [DEBUG] XGB iter  25: tr-p-rmse: 0.043469	tr-a-peak@32: 1.000000	tr-rmse: 0.417676	tr-rmse: 0.417676
2025-07-24 12:25:23 [DEBUG] XGB iter  50: tr-p-rmse: 0.043469	tr-a-peak@32: 1.000000	tr-rmse: 0.417676	tr-rmse: 0.417676
2025-07-24 12:25:23 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.04345	tr-a-peak@32:1.00000	tr-rmse:0.41769	tr-rmse:0.41769 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:26:23 [DEBUG] XGB validation: p-rmse: 0.073102	a-peak@32: 0.984552
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:26:55 [DEBUG] XGB validation: p-rmse: 0.064834	a-peak@32: 0.958023
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:27:20 [DEBUG] XGB validation: p-rmse: 0.061197	a-peak@32: 0.936694
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:27:44 [DEBUG] XGB validation: p-rmse: 0.071951	a-peak@32: 0.968062
2025-07-24 12:27:44 [DEBUG] XGB iter   0: tr-p-rmse: 0.461378	tr-a-peak@32: 0.941887	tr-rmse: 0.408667	tr-rmse: 0.408667
2025-07-24 12:27:44 [DEBUG] XGB iter  25: tr-p-rmse: 0.045653	tr-a-peak@32: 1.000000	tr-rmse: 0.407709	tr-rmse: 0.407709
2025-07-24 12:27:44 [DEBUG] XGB iter  50: tr-p-rmse: 0.045653	tr-a-peak@32: 1.000000	tr-rmse: 0.407709	tr-rmse: 0.407709
2025-07-24 12:27:44 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.04565	tr-a-peak@32:1.00000	tr-rmse:0.40771	tr-rmse:0.40771 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:28:01 [DEBUG] XGB validation: p-rmse: 0.052906	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:28:20 [DEBUG] XGB validation: p-rmse: 0.019174	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:28:35 [DEBUG] XGB validation: p-rmse: 0.058273	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:28:59 [DEBUG] XGB validation: p-rmse: 0.021365	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-24 12:29:23 [DEBUG] XGB validation: p-rmse: 0.018629	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====

#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ < 700)
#define __shfl_sync(mask, var, lane, width) \
        __shfl((var), (lane), (width))

#define __shfl_down_sync(mask, var, offset, width) \
        __shfl_down((var), (offset), (width))

#define __shfl_up_sync(mask, var, offset, width) \
        __shfl_up((var), (offset), (width))
#endif


#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(float* __restrict__ A, float* __restrict__ T_softmax_norm);
extern "C" __global__ void __launch_bounds__(128) main_kernel(float* __restrict__ A, float* __restrict__ T_softmax_norm) {
  float in_thread_T_softmax_maxelem_shared[1];
  __shared__ float red_result[1];
  __shared__ float T_softmax_maxelem_shared[1];
  float in_thread_T_softmax_expsum_shared[1];
  __shared__ float red_result_1[1];
  __shared__ float T_softmax_expsum_shared[1];
  in_thread_T_softmax_maxelem_shared[0] = -3.402823e+38f;
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[((((int)blockIdx.x) * 2048) + ((int)threadIdx.x))]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 128)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 256)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 384)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 512)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 640)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 768)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 896)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1024)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1152)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1280)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1408)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1536)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1664)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1792)]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1920)]);
  float red_buf0[1];
  uint mask[1];
  float t0[1];
  float red_buf0_1[1];
  uint mask_1[1];
  float t0_1[1];
  __shared__ float red_buf_staging[4];
  red_buf0_1[0] = in_thread_T_softmax_maxelem_shared[0];
  mask_1[0] = __activemask();
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 16, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 8, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 4, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 2, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 1, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  if ((((int)threadIdx.x) % 32) == 0) {
    red_buf_staging[(((int)threadIdx.x) >> 5)] = red_buf0_1[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) < 4) {
    red_buf0[0] = red_buf_staging[((int)threadIdx.x)];
  }
  mask[0] = __activemask();
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 2, 32);
  red_buf0[0] = max(red_buf0[0], t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 1, 32);
  red_buf0[0] = max(red_buf0[0], t0[0]);
  if (((int)threadIdx.x) == 0) {
    ((volatile float*)red_result)[0] = red_buf0[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) == 0) {
    T_softmax_maxelem_shared[0] = ((volatile float*)red_result)[0];
  }
  in_thread_T_softmax_expsum_shared[0] = 0.000000e+00f;
  __syncthreads();
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[((((int)blockIdx.x) * 2048) + ((int)threadIdx.x))] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 128)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 256)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 384)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 512)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 640)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 768)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 896)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1024)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1152)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1280)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1408)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1536)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1664)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1792)] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1920)] - T_softmax_maxelem_shared[0])));
  float red_buf0_2[1];
  uint mask_2[1];
  float t0_2[1];
  float red_buf0_3[1];
  uint mask_3[1];
  float t0_3[1];
  __shared__ float red_buf_staging_1[4];
  red_buf0_3[0] = in_thread_T_softmax_expsum_shared[0];
  mask_3[0] = __activemask();
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 16, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 8, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 4, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 2, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 1, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  if ((((int)threadIdx.x) % 32) == 0) {
    red_buf_staging_1[(((int)threadIdx.x) >> 5)] = red_buf0_3[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) < 4) {
    red_buf0_2[0] = red_buf_staging_1[((int)threadIdx.x)];
  }
  mask_2[0] = __activemask();
  t0_2[0] = __shfl_down_sync(mask_2[0], red_buf0_2[0], 2, 32);
  red_buf0_2[0] = (red_buf0_2[0] + t0_2[0]);
  t0_2[0] = __shfl_down_sync(mask_2[0], red_buf0_2[0], 1, 32);
  red_buf0_2[0] = (red_buf0_2[0] + t0_2[0]);
  if (((int)threadIdx.x) == 0) {
    ((volatile float*)red_result_1)[0] = red_buf0_2[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) == 0) {
    T_softmax_expsum_shared[0] = ((volatile float*)red_result_1)[0];
  }
  __syncthreads();
  T_softmax_norm[((((int)blockIdx.x) * 2048) + ((int)threadIdx.x))] = (__expf((A[((((int)blockIdx.x) * 2048) + ((int)threadIdx.x))] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 128)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 128)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 256)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 256)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 384)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 384)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 512)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 512)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 640)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 640)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 768)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 768)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 896)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 896)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1024)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1024)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1152)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1152)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1280)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1280)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1408)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1408)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1536)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1536)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1664)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1664)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1792)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1792)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1920)] = (__expf((A[(((((int)blockIdx.x) * 2048) + ((int)threadIdx.x)) + 1920)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
}


The time of SFM is 0.031 ms
2025-07-24 12:29:52 [INFO] Logging directory: /tmp/tmp6uo1y7f4/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2KTraceback (most recent call last):
  File "/workspace/test/xpiler-eval/CodeGen/tensorcore_codegen.py", line 86, in <module>
    test_tune_matmul_cuda(op_name, order)
  File "/workspace/test/xpiler-eval/CodeGen/tensorcore_codegen.py", line 26, in test_tune_matmul_cuda
    database = ms.tir_integration.tune_tir(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/workspace/test/tvm/python/tvm/meta_schedule/tir_integration.py", line 145, in tune_tir
    return tune_tasks(
           ^^^^^^^^^^^
  File "/workspace/test/tvm/python/tvm/meta_schedule/tune.py", line 118, in tune_tasks
    task_scheduler.tune(
  File "/workspace/test/tvm/python/tvm/meta_schedule/task_scheduler/task_scheduler.py", line 132, in tune
    _ffi_api.TaskSchedulerTune(  # type: ignore # pylint: disable=no-member
  File "/workspace/test/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 245, in __call__
    raise_last_ffi_error()
  File "/workspace/test/tvm/python/tvm/_ffi/base.py", line 481, in raise_last_ffi_error
    raise py_err
tvm._ffi.base.TVMError: Traceback (most recent call last):
  7: _ZN3tvm7runtime13PackedFunc
  6: tvm::runtime::TypedPackedFunc<void (tvm::meta_schedule::TaskScheduler, tvm::runtime::Array<tvm::meta_schedule::TuneContext, void>, tvm::runtime::Array<tvm::FloatImm, void>, int, int, int, tvm::meta_schedule::Builder, tvm::meta_schedule::Runner, tvm::runtime::Array<tvm::meta_schedule::MeasureCallback, void>, tvm::runtime::Optional<tvm::meta_schedule::Database>, tvm::runtime::Optional<tvm::meta_schedule::CostModel>)>::AssignTypedLambda<tvm::runtime::Registry::set_body_method<tvm::meta_schedule::TaskScheduler, tvm::meta_schedule::TaskSchedulerNode, void, tvm::runtime::Array<tvm::meta_schedule::TuneContext, void>, tvm::runtime::Array<tvm::FloatImm, void>, int, int, int, tvm::meta_schedule::Builder, tvm::meta_schedule::Runner, tvm::runtime::Array<tvm::meta_schedule::MeasureCallback, void>, tvm::runtime::Optional<tvm::meta_schedule::Database>, tvm::runtime::Optional<tvm::meta_schedule::CostModel>, void>(void (tvm::meta_schedule::TaskSchedulerNode::*)(tvm::runtime::Array<tvm::meta_schedule::TuneContext, void>, tvm::runtime::Array<tvm::FloatImm, void>, int, int, int, tvm::meta_schedule::Builder, tvm::meta_schedule::Runner, tvm::runtime::Array<tvm::meta_schedule::MeasureCallback, void>, tvm::runtime::Optional<tvm::meta_schedule::Database>, tvm::runtime::Optional<tvm::meta_schedule::CostModel>))::{lambda(tvm::meta_schedule::TaskScheduler, tvm::runtime::Array<tvm::meta_schedule::TuneContext, void>, tvm::runtime::Array<tvm::FloatImm, void>, int, int, int, tvm::meta_schedule::Builder, tvm::meta_schedule::Runner, tvm::runtime::Array<tvm::meta_schedule::MeasureCallback, void>, tvm::runtime::Optional<tvm::meta_schedule::Database>, tvm::runtime::Optional<tvm::meta_schedule::CostModel>)#1}>(tvm::runtime::Registry::set_body_method<tvm::meta_schedule::TaskScheduler, tvm::meta_schedule::TaskSchedulerNode, void, tvm::runtime::Array<tvm::meta_schedule::TuneContext, void>, tvm::runtime::Array<tvm::FloatImm, void>, int, int, int, tvm::meta_schedule::Builder, tvm::meta_schedule::Runner, tvm::runtime::Array<tvm::meta_schedule::MeasureCallback, void>, tvm::runtime::Optional<tvm::meta_schedule::Database>, tvm::runtime::Optional<tvm::meta_schedule::CostModel>, void>(void (tvm::meta_schedule::TaskSchedulerNode::*)(tvm::runtime::Array<tvm::meta_schedule::TuneContext, void>, tvm::runtime::Array<tvm::FloatImm, void>, int, int, int, tvm::meta_schedule::Builder, tvm::meta_schedule::Runner, tvm::runtime::Array<tvm::meta_schedule::MeasureCallback, void>, tvm::runtime::Optional<tvm::meta_schedule::Database>, tvm::runtime::Optional<tvm::meta_schedule::CostModel>))::{lambda(tvm::meta_schedule::TaskScheduler, tvm::runtime::Array<tvm::meta_schedule::TuneContext, void>, tvm::runtime::Array<tvm::FloatImm, void>, int, int, int, tvm::meta_schedule::Builder, tvm::meta_schedule::Runner, tvm::runtime::Array<tvm::meta_schedule::MeasureCallback, void>, tvm::runtime::Optional<tvm::meta_schedule::Database>, tvm::runtime::Optional<tvm::meta_schedule::CostModel>)#1}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const [clone .isra.0]
  5: tvm::meta_schedule::GradientBasedNode::Tune(tvm::runtime::Array<tvm::meta_schedule::TuneContext, void>, tvm::runtime::Array<tvm::FloatImm, void>, int, int, int, tvm::meta_schedule::Builder, tvm::meta_schedule::Runner, tvm::runtime::Array<tvm::meta_schedule::MeasureCallback, void>, tvm::runtime::Optional<tvm::meta_schedule::Database>, tvm::runtime::Optional<tvm::meta_schedule::CostModel>)
  4: tvm::meta_schedule::TaskSchedulerNode::Tune(tvm::runtime::Array<tvm::meta_schedule::TuneContext, void>, tvm::runtime::Array<tvm::FloatImm, void>, int, int, int, tvm::meta_schedule::Builder, tvm::meta_schedule::Runner, tvm::runtime::Array<tvm::meta_schedule::MeasureCallback, void>, tvm::runtime::Optional<tvm::meta_schedule::Database>, tvm::runtime::Optional<tvm::meta_schedule::CostModel>)
  3: tvm::meta_schedule::EvolutionarySearchNode::GenerateMeasureCandidates()
  2: tvm::meta_schedule::EvolutionarySearchNode::State::GenerateMeasureCandidates()
  1: tvm::meta_schedule::EvolutionarySearchNode::State::EvolveWithCostModel(std::vector<tvm::tir::Schedule, std::allocator<tvm::tir::Schedule> >, int)
  0: tvm::support::parallel_for_dynamic(int, int, int, std::function<void (int, int)> const&) [clone .cold]
  File "/workspace/test/tvm/src/support/parallel_for.cc", line 139
RuntimeError: parallel_for_dynamic error with ScheduleError: (not rendered)

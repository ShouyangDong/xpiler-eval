===========================
2025-07-22 03:03:26 [INFO] Logging directory: /tmp/tmpqhdy2bdu/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:05:31 [DEBUG] XGB iter   0: tr-p-rmse: 0.517179	tr-a-peak@32: 0.995520	tr-rmse: 0.366403	tr-rmse: 0.366403
2025-07-22 03:05:31 [DEBUG] XGB iter  25: tr-p-rmse: 0.041500	tr-a-peak@32: 0.999860	tr-rmse: 0.435693	tr-rmse: 0.435693
2025-07-22 03:05:31 [DEBUG] XGB iter  50: tr-p-rmse: 0.041500	tr-a-peak@32: 0.999860	tr-rmse: 0.435693	tr-rmse: 0.435693
2025-07-22 03:05:31 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.04150	tr-a-peak@32:0.99986	tr-rmse:0.43569	tr-rmse:0.43569 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:07:28 [DEBUG] XGB validation: p-rmse: 0.181767	a-peak@32: 0.987795
2025-07-22 03:07:28 [DEBUG] XGB iter   0: tr-p-rmse: 0.494618	tr-a-peak@32: 0.997200	tr-rmse: 0.356527	tr-rmse: 0.356527
2025-07-22 03:07:28 [DEBUG] XGB iter  25: tr-p-rmse: 0.032707	tr-a-peak@32: 1.000000	tr-rmse: 0.434302	tr-rmse: 0.434302
2025-07-22 03:07:28 [DEBUG] XGB iter  50: tr-p-rmse: 0.032707	tr-a-peak@32: 1.000000	tr-rmse: 0.434302	tr-rmse: 0.434302
2025-07-22 03:07:28 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.03271	tr-a-peak@32:1.00000	tr-rmse:0.43430	tr-rmse:0.43430 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:09:46 [DEBUG] XGB validation: p-rmse: 0.433470	a-peak@32: 0.847887
2025-07-22 03:09:46 [DEBUG] XGB iter   0: tr-p-rmse: 0.480128	tr-a-peak@32: 0.828400	tr-rmse: 0.336017	tr-rmse: 0.336017
2025-07-22 03:09:46 [DEBUG] XGB iter  25: tr-p-rmse: 0.057399	tr-a-peak@32: 0.997483	tr-rmse: 0.421014	tr-rmse: 0.421014
2025-07-22 03:09:46 [DEBUG] XGB iter  50: tr-p-rmse: 0.057399	tr-a-peak@32: 0.997483	tr-rmse: 0.421014	tr-rmse: 0.421014
2025-07-22 03:09:46 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.05739	tr-a-peak@32:0.99748	tr-rmse:0.42103	tr-rmse:0.42103 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:12:06 [DEBUG] XGB validation: p-rmse: 0.297356	a-peak@32: 0.990758
2025-07-22 03:12:06 [DEBUG] XGB iter   0: tr-p-rmse: 0.469281	tr-a-peak@32: 0.818941	tr-rmse: 0.341584	tr-rmse: 0.341584
2025-07-22 03:12:06 [DEBUG] XGB iter  25: tr-p-rmse: 0.074279	tr-a-peak@32: 0.990859	tr-rmse: 0.429527	tr-rmse: 0.429527
2025-07-22 03:12:06 [DEBUG] XGB iter  50: tr-p-rmse: 0.074279	tr-a-peak@32: 0.990859	tr-rmse: 0.429527	tr-rmse: 0.429527
2025-07-22 03:12:06 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.07428	tr-a-peak@32:0.99086	tr-rmse:0.42953	tr-rmse:0.42953 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:14:25 [DEBUG] XGB validation: p-rmse: 0.345825	a-peak@32: 0.932458
2025-07-22 03:14:25 [DEBUG] XGB iter   0: tr-p-rmse: 0.461133	tr-a-peak@32: 0.914921	tr-rmse: 0.325267	tr-rmse: 0.325267
2025-07-22 03:14:25 [DEBUG] XGB iter  25: tr-p-rmse: 0.080225	tr-a-peak@32: 0.998943	tr-rmse: 0.418574	tr-rmse: 0.418574
2025-07-22 03:14:25 [DEBUG] XGB iter  50: tr-p-rmse: 0.080225	tr-a-peak@32: 0.998943	tr-rmse: 0.418574	tr-rmse: 0.418574
2025-07-22 03:14:25 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.08023	tr-a-peak@32:0.99894	tr-rmse:0.41857	tr-rmse:0.41857 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:16:43 [DEBUG] XGB validation: p-rmse: 0.261046	a-peak@32: 0.936350
2025-07-22 03:16:43 [DEBUG] XGB iter   0: tr-p-rmse: 0.455675	tr-a-peak@32: 0.691199	tr-rmse: 0.316604	tr-rmse: 0.316604
2025-07-22 03:16:43 [DEBUG] XGB iter  25: tr-p-rmse: 0.088611	tr-a-peak@32: 0.986617	tr-rmse: 0.413746	tr-rmse: 0.413746
2025-07-22 03:16:43 [DEBUG] XGB iter  50: tr-p-rmse: 0.088611	tr-a-peak@32: 0.986617	tr-rmse: 0.413746	tr-rmse: 0.413746
2025-07-22 03:16:43 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.08861	tr-a-peak@32:0.98662	tr-rmse:0.41374	tr-rmse:0.41374 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:19:03 [DEBUG] XGB validation: p-rmse: 0.242057	a-peak@32: 0.827322
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:21:21 [DEBUG] XGB validation: p-rmse: 0.225673	a-peak@32: 0.843615
2025-07-22 03:21:21 [DEBUG] XGB iter   0: tr-p-rmse: 0.450405	tr-a-peak@32: 0.739676	tr-rmse: 0.307159	tr-rmse: 0.307159
2025-07-22 03:21:22 [DEBUG] XGB iter  25: tr-p-rmse: 0.085167	tr-a-peak@32: 0.993581	tr-rmse: 0.406823	tr-rmse: 0.406823
2025-07-22 03:21:22 [DEBUG] XGB iter  50: tr-p-rmse: 0.085167	tr-a-peak@32: 0.993581	tr-rmse: 0.406823	tr-rmse: 0.406823
2025-07-22 03:21:22 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.08517	tr-a-peak@32:0.99358	tr-rmse:0.40682	tr-rmse:0.40682 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:23:39 [DEBUG] XGB validation: p-rmse: 0.163764	a-peak@32: 0.990575
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:25:56 [DEBUG] XGB validation: p-rmse: 0.161069	a-peak@32: 1.000000
2025-07-22 03:25:56 [DEBUG] XGB iter   0: tr-p-rmse: 0.438234	tr-a-peak@32: 0.884526	tr-rmse: 0.305270	tr-rmse: 0.305270
2025-07-22 03:25:56 [DEBUG] XGB iter  25: tr-p-rmse: 0.094960	tr-a-peak@32: 0.985612	tr-rmse: 0.409315	tr-rmse: 0.409315
2025-07-22 03:25:56 [DEBUG] XGB iter  50: tr-p-rmse: 0.094960	tr-a-peak@32: 0.985612	tr-rmse: 0.409315	tr-rmse: 0.409315
2025-07-22 03:25:56 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.09496	tr-a-peak@32:0.98561	tr-rmse:0.40931	tr-rmse:0.40931 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:28:15 [DEBUG] XGB validation: p-rmse: 0.199002	a-peak@32: 0.991806
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:30:31 [DEBUG] XGB validation: p-rmse: 0.186424	a-peak@32: 0.996295
2025-07-22 03:30:31 [DEBUG] XGB iter   0: tr-p-rmse: 0.457331	tr-a-peak@32: 0.759252	tr-rmse: 0.258360	tr-rmse: 0.258360
2025-07-22 03:30:31 [DEBUG] XGB iter  25: tr-p-rmse: 0.086053	tr-a-peak@32: 0.980003	tr-rmse: 0.366954	tr-rmse: 0.366954
2025-07-22 03:30:31 [DEBUG] XGB iter  50: tr-p-rmse: 0.086053	tr-a-peak@32: 0.980003	tr-rmse: 0.366954	tr-rmse: 0.366954
2025-07-22 03:30:31 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.08605	tr-a-peak@32:0.98000	tr-rmse:0.36695	tr-rmse:0.36695 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:32:50 [DEBUG] XGB validation: p-rmse: 0.177262	a-peak@32: 0.992314
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:35:16 [DEBUG] XGB validation: p-rmse: 0.199018	a-peak@32: 0.987610
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:37:35 [DEBUG] XGB validation: p-rmse: 0.231427	a-peak@32: 0.993796
2025-07-22 03:37:35 [DEBUG] XGB iter   0: tr-p-rmse: 0.467209	tr-a-peak@32: 0.749301	tr-rmse: 0.237931	tr-rmse: 0.237931
2025-07-22 03:37:35 [DEBUG] XGB iter  25: tr-p-rmse: 0.085080	tr-a-peak@32: 0.995084	tr-rmse: 0.347785	tr-rmse: 0.347785
2025-07-22 03:37:35 [DEBUG] XGB iter  50: tr-p-rmse: 0.085080	tr-a-peak@32: 0.995084	tr-rmse: 0.347785	tr-rmse: 0.347785
2025-07-22 03:37:35 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.08508	tr-a-peak@32:0.99508	tr-rmse:0.34778	tr-rmse:0.34778 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:39:55 [DEBUG] XGB validation: p-rmse: 0.136705	a-peak@32: 0.990111
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:41:43 [DEBUG] XGB validation: p-rmse: 0.259368	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ conv1d_nlc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ conv1d_nlc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv1d_nlc_reindex_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[1];
  nvcuda::wmma::fill_fragment(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4))) = *(half4*)(inputs + (((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 144)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 512));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 288)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 1024));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 432)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 1536));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 576)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 720)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 2560));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 864)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 3072));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 1008)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 3584));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 1152)) = *(half4*)(weight + (((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 1472)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 1792)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 4096));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2112)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 6144));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2432)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 8192));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2752)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 10240));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3072)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 12288));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3392)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 14336));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1152])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1792])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2432])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3072])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4))) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 64));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 144)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 576));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 288)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 1088));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 432)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 1600));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 576)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 2112));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 720)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 2624));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 864)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 3136));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 72) + ((((int)threadIdx.x) & 15) * 4)) + 1008)) = *(half4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 4)) + 3648));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 1152)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 16384));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 1472)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 18432));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 1792)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 20480));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2112)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 22528));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2432)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 24576));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 2752)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 26624));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3072)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 28672));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 4)) + 3392)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 2) * 256) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 30720));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1152])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1792])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2432])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3072])), 40);
  nvcuda::wmma::mma_sync(conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[0])), conv1d_nlc_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half2*)(conv1d_nlc + (((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 7) * 2))) = *(half2*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 2));
  *(half2*)(conv1d_nlc + ((((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 1024)) = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 64));
  *(half2*)(conv1d_nlc + ((((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 2048)) = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 128));
  *(half2*)(conv1d_nlc + ((((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)blockIdx.x) >> 3) * 4096)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 3072)) = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 192));
}


The time of C1D is 0.007 ms
2025-07-22 03:41:44 [INFO] Logging directory: /tmp/tmp8zfhn32e/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:44:00 [DEBUG] XGB iter   0: tr-p-rmse: 0.451609	tr-a-peak@32: 0.832847	tr-rmse: 0.355967	tr-rmse: 0.355967
2025-07-22 03:44:00 [DEBUG] XGB iter  25: tr-p-rmse: 0.024153	tr-a-peak@32: 1.000000	tr-rmse: 0.441156	tr-rmse: 0.441156
2025-07-22 03:44:00 [DEBUG] XGB iter  50: tr-p-rmse: 0.024153	tr-a-peak@32: 1.000000	tr-rmse: 0.441156	tr-rmse: 0.441156
2025-07-22 03:44:00 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.02415	tr-a-peak@32:1.00000	tr-rmse:0.44116	tr-rmse:0.44116 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:46:05 [DEBUG] XGB validation: p-rmse: 0.175485	a-peak@32: 0.968549
2025-07-22 03:46:06 [DEBUG] XGB iter   0: tr-p-rmse: 0.455680	tr-a-peak@32: 0.830547	tr-rmse: 0.342012	tr-rmse: 0.342012
2025-07-22 03:46:06 [DEBUG] XGB iter  25: tr-p-rmse: 0.033625	tr-a-peak@32: 1.000000	tr-rmse: 0.427956	tr-rmse: 0.427956
2025-07-22 03:46:06 [DEBUG] XGB iter  50: tr-p-rmse: 0.033625	tr-a-peak@32: 1.000000	tr-rmse: 0.427956	tr-rmse: 0.427956
2025-07-22 03:46:06 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.03363	tr-a-peak@32:1.00000	tr-rmse:0.42796	tr-rmse:0.42796 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:48:33 [DEBUG] XGB validation: p-rmse: 0.327871	a-peak@32: 0.925306
2025-07-22 03:48:33 [DEBUG] XGB iter   0: tr-p-rmse: 0.441066	tr-a-peak@32: 0.732358	tr-rmse: 0.323722	tr-rmse: 0.323722
2025-07-22 03:48:33 [DEBUG] XGB iter  25: tr-p-rmse: 0.055179	tr-a-peak@32: 1.000000	tr-rmse: 0.418687	tr-rmse: 0.418687
2025-07-22 03:48:33 [DEBUG] XGB iter  50: tr-p-rmse: 0.055179	tr-a-peak@32: 1.000000	tr-rmse: 0.418687	tr-rmse: 0.418687
2025-07-22 03:48:33 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05518	tr-a-peak@32:1.00000	tr-rmse:0.41869	tr-rmse:0.41869 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:51:01 [DEBUG] XGB validation: p-rmse: 0.331720	a-peak@32: 0.749240
2025-07-22 03:51:01 [DEBUG] XGB iter   0: tr-p-rmse: 0.521918	tr-a-peak@32: 0.376605	tr-rmse: 0.211036	tr-rmse: 0.211036
2025-07-22 03:51:01 [DEBUG] XGB iter  25: tr-p-rmse: 0.053473	tr-a-peak@32: 0.989761	tr-rmse: 0.300998	tr-rmse: 0.300998
2025-07-22 03:51:01 [DEBUG] XGB iter  50: tr-p-rmse: 0.053473	tr-a-peak@32: 0.989761	tr-rmse: 0.300998	tr-rmse: 0.300998
2025-07-22 03:51:01 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05347	tr-a-peak@32:0.98976	tr-rmse:0.30100	tr-rmse:0.30100 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:53:28 [DEBUG] XGB validation: p-rmse: 0.353729	a-peak@32: 0.997878
2025-07-22 03:53:28 [DEBUG] XGB iter   0: tr-p-rmse: 0.517426	tr-a-peak@32: 0.419601	tr-rmse: 0.195017	tr-rmse: 0.195017
2025-07-22 03:53:28 [DEBUG] XGB iter  25: tr-p-rmse: 0.078799	tr-a-peak@32: 0.811529	tr-rmse: 0.292410	tr-rmse: 0.292410
2025-07-22 03:53:28 [DEBUG] XGB iter  50: tr-p-rmse: 0.078799	tr-a-peak@32: 0.811529	tr-rmse: 0.292410	tr-rmse: 0.292410
2025-07-22 03:53:28 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.07880	tr-a-peak@32:0.81153	tr-rmse:0.29241	tr-rmse:0.29241 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:55:54 [DEBUG] XGB validation: p-rmse: 0.239268	a-peak@32: 0.927099
2025-07-22 03:55:55 [DEBUG] XGB iter   0: tr-p-rmse: 0.514908	tr-a-peak@32: 0.411505	tr-rmse: 0.182935	tr-rmse: 0.182935
2025-07-22 03:55:55 [DEBUG] XGB iter  25: tr-p-rmse: 0.088578	tr-a-peak@32: 0.719348	tr-rmse: 0.284214	tr-rmse: 0.284214
2025-07-22 03:55:55 [DEBUG] XGB iter  50: tr-p-rmse: 0.088578	tr-a-peak@32: 0.719348	tr-rmse: 0.284214	tr-rmse: 0.284214
2025-07-22 03:55:55 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.08858	tr-a-peak@32:0.71935	tr-rmse:0.28421	tr-rmse:0.28421 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 03:58:20 [DEBUG] XGB validation: p-rmse: 0.159310	a-peak@32: 0.989121
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:00:50 [DEBUG] XGB validation: p-rmse: 0.145722	a-peak@32: 0.972490
2025-07-22 04:00:50 [DEBUG] XGB iter   0: tr-p-rmse: 0.511882	tr-a-peak@32: 0.379205	tr-rmse: 0.190840	tr-rmse: 0.190840
2025-07-22 04:00:50 [DEBUG] XGB iter  25: tr-p-rmse: 0.088170	tr-a-peak@32: 0.706829	tr-rmse: 0.292701	tr-rmse: 0.292701
2025-07-22 04:00:50 [DEBUG] XGB iter  50: tr-p-rmse: 0.088170	tr-a-peak@32: 0.706829	tr-rmse: 0.292701	tr-rmse: 0.292701
2025-07-22 04:00:50 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.08817	tr-a-peak@32:0.70683	tr-rmse:0.29270	tr-rmse:0.29270 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:03:18 [DEBUG] XGB validation: p-rmse: 0.202082	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:05:44 [DEBUG] XGB validation: p-rmse: 0.212788	a-peak@32: 0.976961
2025-07-22 04:05:44 [DEBUG] XGB iter   0: tr-p-rmse: 0.509421	tr-a-peak@32: 0.948832	tr-rmse: 0.176607	tr-rmse: 0.176607
2025-07-22 04:05:44 [DEBUG] XGB iter  25: tr-p-rmse: 0.093102	tr-a-peak@32: 0.685443	tr-rmse: 0.282334	tr-rmse: 0.282334
2025-07-22 04:05:44 [DEBUG] XGB iter  50: tr-p-rmse: 0.093102	tr-a-peak@32: 0.685443	tr-rmse: 0.282334	tr-rmse: 0.282334
2025-07-22 04:05:44 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.09310	tr-a-peak@32:0.68544	tr-rmse:0.28233	tr-rmse:0.28233 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:08:11 [DEBUG] XGB validation: p-rmse: 0.142278	a-peak@32: 0.952092
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:10:37 [DEBUG] XGB validation: p-rmse: 0.143373	a-peak@32: 1.000000
2025-07-22 04:10:37 [DEBUG] XGB iter   0: tr-p-rmse: 0.506998	tr-a-peak@32: 0.399786	tr-rmse: 0.165412	tr-rmse: 0.165412
2025-07-22 04:10:37 [DEBUG] XGB iter  25: tr-p-rmse: 0.090371	tr-a-peak@32: 0.692870	tr-rmse: 0.273700	tr-rmse: 0.273700
2025-07-22 04:10:37 [DEBUG] XGB iter  50: tr-p-rmse: 0.090371	tr-a-peak@32: 0.692870	tr-rmse: 0.273700	tr-rmse: 0.273700
2025-07-22 04:10:37 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.09037	tr-a-peak@32:0.69287	tr-rmse:0.27370	tr-rmse:0.27370 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:13:05 [DEBUG] XGB validation: p-rmse: 0.274636	a-peak@32: 0.959607
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:15:31 [DEBUG] XGB validation: p-rmse: 0.118781	a-peak@32: 0.987979
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:17:55 [DEBUG] XGB validation: p-rmse: 0.119717	a-peak@32: 0.943265
2025-07-22 04:17:55 [DEBUG] XGB iter   0: tr-p-rmse: 0.511343	tr-a-peak@32: 0.553243	tr-rmse: 0.198543	tr-rmse: 0.198543
2025-07-22 04:17:55 [DEBUG] XGB iter  25: tr-p-rmse: 0.108944	tr-a-peak@32: 0.710985	tr-rmse: 0.301702	tr-rmse: 0.301702
2025-07-22 04:17:55 [DEBUG] XGB iter  50: tr-p-rmse: 0.108944	tr-a-peak@32: 0.710985	tr-rmse: 0.301702	tr-rmse: 0.301702
2025-07-22 04:17:55 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.10894	tr-a-peak@32:0.71098	tr-rmse:0.30170	tr-rmse:0.30170 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:20:20 [DEBUG] XGB validation: p-rmse: 0.233354	a-peak@32: 0.977918
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[4];
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3], 0.000000e+00f);
  *(half2*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 2)) = *(half2*)(inputs + (((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 72)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 64));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 144)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 128));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 216)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 192));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 288)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 256));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 360)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 320));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 432)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 384));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 504)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 448));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 576)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 512));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 648)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 576));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 720)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 640));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 792)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 704));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 864)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 768));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 936)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 832));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1008)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 896));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1080)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 960));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1152)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1024));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1224)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1088));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1296)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1152));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1368)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1216));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1440)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1280));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1512)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1344));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1584)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1408));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1656)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1472));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1728)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1536));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1800)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1600));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1872)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1664));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 1944)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1728));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 2016)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1792));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 2088)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1856));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 2160)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1920));
  *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.x) * 2) + 2232)) = *(half2*)(inputs + ((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + (((int)threadIdx.x) * 2)) + 1984));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 2304)) = *(half2*)(weight + ((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 2384)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 128));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 2464)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 256));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 2544)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 384));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 2624)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 512));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 2704)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 640));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 2784)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 768));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 2864)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 896));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 2944)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 1024));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3024)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 1152));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3104)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 1280));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3184)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 1408));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3264)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 1536));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3344)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 1664));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3424)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 1792));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3504)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 1920));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3584)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 2048));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3664)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 2176));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3744)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 2304));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3824)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 2432));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3904)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 2560));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 3984)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 2688));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 4064)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 2816));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 4144)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 2944));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 4224)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 3072));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 4304)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 3200));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 4384)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 3328));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 4464)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 3456));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 4544)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 3584));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 4624)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 3712));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 4704)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 3840));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 4) * 40) + ((((int)threadIdx.x) & 15) * 2)) + 4784)) = *(half2*)(weight + (((((((int)threadIdx.x) >> 4) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 3968));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 72);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[1152])), 72);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[1168])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2304])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2320])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[2944])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[2960])), 40);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 72);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[1184])), 72);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[1200])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3584])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[3600])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[4224])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[4240])), 40);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3]);
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[0])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[256])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  conv2d_nhwc[(((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15))] = ((half*)buf_dyn_shmem)[((int)threadIdx.x)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 128)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 32)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 256)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 64)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 384)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 96)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 512)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 128)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 640)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 160)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 768)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 192)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 896)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 224)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 16)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 256)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 144)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 288)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 272)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 320)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 400)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 352)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 528)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 384)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 656)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 416)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 784)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 448)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 912)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 480)];
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[0])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2], 16, nvcuda::wmma::mem_row_major);
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[256])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1024)] = ((half*)buf_dyn_shmem)[((int)threadIdx.x)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1152)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 32)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1280)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 64)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1408)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 96)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1536)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 128)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1664)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 160)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1792)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 192)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1920)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 224)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1040)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 256)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1168)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 288)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1296)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 320)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1424)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 352)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1552)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 384)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1680)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 416)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1808)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 448)];
  conv2d_nhwc[((((((((int)blockIdx.y) * 28672) + ((((int)blockIdx.x) >> 1) * 2048)) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 15)) + 1936)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 480)];
}


The time of C2D is 0.007 ms
2025-07-22 04:20:21 [INFO] Logging directory: /tmp/tmpxoyohfje/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:23:07 [DEBUG] XGB iter   0: tr-p-rmse: 0.430431	tr-a-peak@32: 0.923712	tr-rmse: 0.333436	tr-rmse: 0.333436
2025-07-22 04:23:07 [DEBUG] XGB iter  25: tr-p-rmse: 0.023108	tr-a-peak@32: 0.999897	tr-rmse: 0.425977	tr-rmse: 0.425977
2025-07-22 04:23:07 [DEBUG] XGB iter  50: tr-p-rmse: 0.023108	tr-a-peak@32: 0.999897	tr-rmse: 0.425977	tr-rmse: 0.425977
2025-07-22 04:23:07 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.02311	tr-a-peak@32:0.99990	tr-rmse:0.42598	tr-rmse:0.42598 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:25:44 [DEBUG] XGB validation: p-rmse: 0.203806	a-peak@32: 0.962013
2025-07-22 04:25:44 [DEBUG] XGB iter   0: tr-p-rmse: 0.454286	tr-a-peak@32: 0.617665	tr-rmse: 0.310487	tr-rmse: 0.310487
2025-07-22 04:25:44 [DEBUG] XGB iter  25: tr-p-rmse: 0.044574	tr-a-peak@32: 0.973983	tr-rmse: 0.402275	tr-rmse: 0.402275
2025-07-22 04:25:44 [DEBUG] XGB iter  50: tr-p-rmse: 0.044574	tr-a-peak@32: 0.973983	tr-rmse: 0.402275	tr-rmse: 0.402275
2025-07-22 04:25:44 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.04457	tr-a-peak@32:0.97398	tr-rmse:0.40228	tr-rmse:0.40228 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:28:46 [DEBUG] XGB validation: p-rmse: 0.269841	a-peak@32: 0.835910
2025-07-22 04:28:46 [DEBUG] XGB iter   0: tr-p-rmse: 0.434317	tr-a-peak@32: 0.873629	tr-rmse: 0.305160	tr-rmse: 0.305160
2025-07-22 04:28:46 [DEBUG] XGB iter  25: tr-p-rmse: 0.063741	tr-a-peak@32: 0.928646	tr-rmse: 0.405979	tr-rmse: 0.405979
2025-07-22 04:28:46 [DEBUG] XGB iter  50: tr-p-rmse: 0.063741	tr-a-peak@32: 0.928646	tr-rmse: 0.405979	tr-rmse: 0.405979
2025-07-22 04:28:46 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.06374	tr-a-peak@32:0.92865	tr-rmse:0.40598	tr-rmse:0.40598 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:31:49 [DEBUG] XGB validation: p-rmse: 0.210208	a-peak@32: 0.921774
2025-07-22 04:31:49 [DEBUG] XGB iter   0: tr-p-rmse: 0.427632	tr-a-peak@32: 0.890492	tr-rmse: 0.297234	tr-rmse: 0.297234
2025-07-22 04:31:49 [DEBUG] XGB iter  25: tr-p-rmse: 0.073343	tr-a-peak@32: 0.943944	tr-rmse: 0.402580	tr-rmse: 0.402580
2025-07-22 04:31:49 [DEBUG] XGB iter  50: tr-p-rmse: 0.073343	tr-a-peak@32: 0.943944	tr-rmse: 0.402580	tr-rmse: 0.402580
2025-07-22 04:31:49 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.07334	tr-a-peak@32:0.94394	tr-rmse:0.40258	tr-rmse:0.40258 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:34:49 [DEBUG] XGB validation: p-rmse: 0.147673	a-peak@32: 0.879477
2025-07-22 04:34:49 [DEBUG] XGB iter   0: tr-p-rmse: 0.420699	tr-a-peak@32: 0.946622	tr-rmse: 0.298668	tr-rmse: 0.298668
2025-07-22 04:34:49 [DEBUG] XGB iter  25: tr-p-rmse: 0.074823	tr-a-peak@32: 0.890024	tr-rmse: 0.405391	tr-rmse: 0.405391
2025-07-22 04:34:49 [DEBUG] XGB iter  50: tr-p-rmse: 0.074823	tr-a-peak@32: 0.890024	tr-rmse: 0.405391	tr-rmse: 0.405391
2025-07-22 04:34:49 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.07482	tr-a-peak@32:0.89002	tr-rmse:0.40539	tr-rmse:0.40539 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:37:49 [DEBUG] XGB validation: p-rmse: 0.141806	a-peak@32: 0.925118
2025-07-22 04:37:49 [DEBUG] XGB iter   0: tr-p-rmse: 0.416374	tr-a-peak@32: 0.742545	tr-rmse: 0.299381	tr-rmse: 0.299381
2025-07-22 04:37:49 [DEBUG] XGB iter  25: tr-p-rmse: 0.078866	tr-a-peak@32: 0.903148	tr-rmse: 0.407373	tr-rmse: 0.407373
2025-07-22 04:37:49 [DEBUG] XGB iter  50: tr-p-rmse: 0.078866	tr-a-peak@32: 0.903148	tr-rmse: 0.407373	tr-rmse: 0.407373
2025-07-22 04:37:49 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.07887	tr-a-peak@32:0.90315	tr-rmse:0.40737	tr-rmse:0.40737 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:40:50 [DEBUG] XGB validation: p-rmse: 0.131002	a-peak@32: 0.866304
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:43:50 [DEBUG] XGB validation: p-rmse: 0.138436	a-peak@32: 0.933242
2025-07-22 04:43:50 [DEBUG] XGB iter   0: tr-p-rmse: 0.408407	tr-a-peak@32: 0.679862	tr-rmse: 0.298274	tr-rmse: 0.298274
2025-07-22 04:43:50 [DEBUG] XGB iter  25: tr-p-rmse: 0.076720	tr-a-peak@32: 0.914222	tr-rmse: 0.408074	tr-rmse: 0.408074
2025-07-22 04:43:50 [DEBUG] XGB iter  50: tr-p-rmse: 0.076720	tr-a-peak@32: 0.914222	tr-rmse: 0.408074	tr-rmse: 0.408074
2025-07-22 04:43:50 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.07672	tr-a-peak@32:0.91422	tr-rmse:0.40807	tr-rmse:0.40807 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:46:54 [DEBUG] XGB validation: p-rmse: 0.106132	a-peak@32: 0.824006
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:49:57 [DEBUG] XGB validation: p-rmse: 0.117481	a-peak@32: 0.959392
2025-07-22 04:49:57 [DEBUG] XGB iter   0: tr-p-rmse: 0.404081	tr-a-peak@32: 0.700501	tr-rmse: 0.299192	tr-rmse: 0.299192
2025-07-22 04:49:57 [DEBUG] XGB iter  25: tr-p-rmse: 0.079664	tr-a-peak@32: 0.894562	tr-rmse: 0.409875	tr-rmse: 0.409875
2025-07-22 04:49:58 [DEBUG] XGB iter  50: tr-p-rmse: 0.079664	tr-a-peak@32: 0.894562	tr-rmse: 0.409875	tr-rmse: 0.409875
2025-07-22 04:49:58 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.07966	tr-a-peak@32:0.89456	tr-rmse:0.40987	tr-rmse:0.40987 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:52:57 [DEBUG] XGB validation: p-rmse: 0.109348	a-peak@32: 0.896091
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:55:59 [DEBUG] XGB validation: p-rmse: 0.109715	a-peak@32: 0.882089
2025-07-22 04:55:59 [DEBUG] XGB iter   0: tr-p-rmse: 0.400364	tr-a-peak@32: 0.712215	tr-rmse: 0.300301	tr-rmse: 0.300301
2025-07-22 04:55:59 [DEBUG] XGB iter  25: tr-p-rmse: 0.081100	tr-a-peak@32: 0.888826	tr-rmse: 0.411458	tr-rmse: 0.411458
2025-07-22 04:55:59 [DEBUG] XGB iter  50: tr-p-rmse: 0.081100	tr-a-peak@32: 0.888826	tr-rmse: 0.411458	tr-rmse: 0.411458
2025-07-22 04:55:59 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.08110	tr-a-peak@32:0.88883	tr-rmse:0.41146	tr-rmse:0.41146 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 04:59:00 [DEBUG] XGB validation: p-rmse: 0.107838	a-peak@32: 0.942640
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:02:01 [DEBUG] XGB validation: p-rmse: 0.115352	a-peak@32: 0.935741
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:05:03 [DEBUG] XGB validation: p-rmse: 0.114247	a-peak@32: 0.936675
2025-07-22 05:05:03 [DEBUG] XGB iter   0: tr-p-rmse: 0.397073	tr-a-peak@32: 0.729060	tr-rmse: 0.302701	tr-rmse: 0.302701
2025-07-22 05:05:03 [DEBUG] XGB iter  25: tr-p-rmse: 0.082938	tr-a-peak@32: 0.806376	tr-rmse: 0.414080	tr-rmse: 0.414080
2025-07-22 05:05:03 [DEBUG] XGB iter  50: tr-p-rmse: 0.082938	tr-a-peak@32: 0.806376	tr-rmse: 0.414080	tr-rmse: 0.414080
2025-07-22 05:05:03 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.08294	tr-a-peak@32:0.80638	tr-rmse:0.41408	tr-rmse:0.41408 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:08:03 [DEBUG] XGB validation: p-rmse: 0.112996	a-peak@32: 0.953713
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:10:16 [DEBUG] XGB validation: p-rmse: 0.080698	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv3d_ndhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv3d_ndhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[16];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[4];
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[1], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[4], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[5], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[8], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[9], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[12], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[13], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[2], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[3], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[6], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[7], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[10], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[11], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[14], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[15], 0.000000e+00f);
  for (int ax0_ax1_fused_0 = 0; ax0_ax1_fused_0 < 64; ++ax0_ax1_fused_0) {
    *(half2*)(((half*)buf_dyn_shmem) + ((((ax0_ax1_fused_0 * 288) + (((int)threadIdx.y) * 72)) + (((int)threadIdx.x) * 2)) + 4608)) = *(half2*)(inputs + (((((((int)blockIdx.y) * 802816) + (((int)blockIdx.x) * 16384)) + (ax0_ax1_fused_0 * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4))) = *(half4*)(weight + ((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 576)) = *(half4*)(weight + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 512));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 1152)) = *(half4*)(weight + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 1024));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 1728)) = *(half4*)(weight + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 1536));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 2304)) = *(half4*)(weight + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 2880)) = *(half4*)(weight + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 2560));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 3456)) = *(half4*)(weight + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 3072));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 4032)) = *(half4*)(weight + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 3584));
  __syncthreads();
  for (int ax5_0_1 = 0; ax5_0_1 < 4; ++ax5_0_1) {
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) * 4608) + (ax5_0_1 * 16)) + 4608)])), 72);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) * 4608) + (ax5_0_1 * 16)) + 5760)])), 72);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) * 4608) + (ax5_0_1 * 16)) + 6912)])), 72);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) * 4608) + (ax5_0_1 * 16)) + 8064)])), 72);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(ax5_0_1 * 1152)])), 72);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[((ax5_0_1 * 1152) + 16)])), 72);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[((ax5_0_1 * 1152) + 32)])), 72);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[((ax5_0_1 * 1152) + 48)])), 72);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[1]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[4], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[0], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[4]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[5], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[5]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[8], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[0], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[8]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[9], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[1], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[9]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[12], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[0], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[12]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[13], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[1], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[13]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[2], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[2], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[2]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[3], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[3], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[3]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[6], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[6]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[7], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[7]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[10], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[2], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[10]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[11], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[3], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[11]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[14], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[2], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[14]);
    nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[15], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[3], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[15]);
  }
  for (int ax2 = 0; ax2 < 4; ++ax2) {
    __syncthreads();
    nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 1024)])), conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[(ax2 * 4)], 16, nvcuda::wmma::mem_row_major);
    nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1024) + 256)])), conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[((ax2 * 4) + 1)], 16, nvcuda::wmma::mem_row_major);
    nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1024) + 512)])), conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[((ax2 * 4) + 2)], 16, nvcuda::wmma::mem_row_major);
    nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1024) + 768)])), conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[((ax2 * 4) + 3)], 16, nvcuda::wmma::mem_row_major);
    __syncthreads();
    *(half4*)(conv3d_ndhwc + (((((((((int)blockIdx.y) * 802816) + (((int)blockIdx.x) * 16384)) + (ax2 * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4))) = *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)));
    *(half4*)(conv3d_ndhwc + ((((((((((int)blockIdx.y) * 802816) + (((int)blockIdx.x) * 16384)) + (ax2 * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 32)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 512));
    *(half4*)(conv3d_ndhwc + ((((((((((int)blockIdx.y) * 802816) + (((int)blockIdx.x) * 16384)) + (ax2 * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 4096)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 1024));
    *(half4*)(conv3d_ndhwc + ((((((((((int)blockIdx.y) * 802816) + (((int)blockIdx.x) * 16384)) + (ax2 * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 4128)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 1536));
    *(half4*)(conv3d_ndhwc + ((((((((((int)blockIdx.y) * 802816) + (((int)blockIdx.x) * 16384)) + (ax2 * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 8192)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 2048));
    *(half4*)(conv3d_ndhwc + ((((((((((int)blockIdx.y) * 802816) + (((int)blockIdx.x) * 16384)) + (ax2 * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 8224)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 2560));
    *(half4*)(conv3d_ndhwc + ((((((((((int)blockIdx.y) * 802816) + (((int)blockIdx.x) * 16384)) + (ax2 * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 12288)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 3072));
    *(half4*)(conv3d_ndhwc + ((((((((((int)blockIdx.y) * 802816) + (((int)blockIdx.x) * 16384)) + (ax2 * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((int)threadIdx.y) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 12320)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 3584));
  }
}


The time of C3D is 0.018 ms
2025-07-22 05:10:17 [INFO] Logging directory: /tmp/tmpsdh5wlkh/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:12:21 [DEBUG] XGB iter   0: tr-p-rmse: 0.494902	tr-a-peak@32: 0.953738	tr-rmse: 0.249375	tr-rmse: 0.249375
2025-07-22 05:12:22 [DEBUG] XGB iter  25: tr-p-rmse: 0.030516	tr-a-peak@32: 1.000000	tr-rmse: 0.343798	tr-rmse: 0.343798
2025-07-22 05:12:22 [DEBUG] XGB iter  50: tr-p-rmse: 0.030516	tr-a-peak@32: 1.000000	tr-rmse: 0.343798	tr-rmse: 0.343798
2025-07-22 05:12:22 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.03052	tr-a-peak@32:1.00000	tr-rmse:0.34380	tr-rmse:0.34380 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:14:21 [DEBUG] XGB validation: p-rmse: 0.177957	a-peak@32: 0.741116
2025-07-22 05:14:21 [DEBUG] XGB iter   0: tr-p-rmse: 0.504314	tr-a-peak@32: 0.846310	tr-rmse: 0.236097	tr-rmse: 0.236097
2025-07-22 05:14:21 [DEBUG] XGB iter  25: tr-p-rmse: 0.030435	tr-a-peak@32: 1.000000	tr-rmse: 0.323886	tr-rmse: 0.323886
2025-07-22 05:14:22 [DEBUG] XGB iter  50: tr-p-rmse: 0.030435	tr-a-peak@32: 1.000000	tr-rmse: 0.323886	tr-rmse: 0.323886
2025-07-22 05:14:22 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.03044	tr-a-peak@32:1.00000	tr-rmse:0.32388	tr-rmse:0.32388 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:16:39 [DEBUG] XGB validation: p-rmse: 0.308085	a-peak@32: 0.814145
2025-07-22 05:16:39 [DEBUG] XGB iter   0: tr-p-rmse: 0.489294	tr-a-peak@32: 0.993012	tr-rmse: 0.305298	tr-rmse: 0.305298
2025-07-22 05:16:39 [DEBUG] XGB iter  25: tr-p-rmse: 0.054273	tr-a-peak@32: 0.997920	tr-rmse: 0.392408	tr-rmse: 0.392408
2025-07-22 05:16:39 [DEBUG] XGB iter  50: tr-p-rmse: 0.054273	tr-a-peak@32: 0.997920	tr-rmse: 0.392408	tr-rmse: 0.392408
2025-07-22 05:16:39 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.05427	tr-a-peak@32:0.99792	tr-rmse:0.39241	tr-rmse:0.39241 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:18:55 [DEBUG] XGB validation: p-rmse: 0.204481	a-peak@32: 0.991535
2025-07-22 05:18:55 [DEBUG] XGB iter   0: tr-p-rmse: 0.468743	tr-a-peak@32: 0.963013	tr-rmse: 0.315162	tr-rmse: 0.315162
2025-07-22 05:18:55 [DEBUG] XGB iter  25: tr-p-rmse: 0.064393	tr-a-peak@32: 0.997208	tr-rmse: 0.408063	tr-rmse: 0.408063
2025-07-22 05:18:55 [DEBUG] XGB iter  50: tr-p-rmse: 0.064393	tr-a-peak@32: 0.997208	tr-rmse: 0.408064	tr-rmse: 0.408064
2025-07-22 05:18:55 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.06439	tr-a-peak@32:0.99721	tr-rmse:0.40806	tr-rmse:0.40806 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:21:12 [DEBUG] XGB validation: p-rmse: 0.248306	a-peak@32: 0.953124
2025-07-22 05:21:12 [DEBUG] XGB iter   0: tr-p-rmse: 0.494927	tr-a-peak@32: 0.687240	tr-rmse: 0.247333	tr-rmse: 0.247333
2025-07-22 05:21:12 [DEBUG] XGB iter  25: tr-p-rmse: 0.057623	tr-a-peak@32: 0.985768	tr-rmse: 0.344632	tr-rmse: 0.344632
2025-07-22 05:21:12 [DEBUG] XGB iter  50: tr-p-rmse: 0.057623	tr-a-peak@32: 0.985768	tr-rmse: 0.344632	tr-rmse: 0.344632
2025-07-22 05:21:12 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.05762	tr-a-peak@32:0.98577	tr-rmse:0.34463	tr-rmse:0.34463 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:23:31 [DEBUG] XGB validation: p-rmse: 0.280000	a-peak@32: 0.944683
2025-07-22 05:23:31 [DEBUG] XGB iter   0: tr-p-rmse: 0.487326	tr-a-peak@32: 0.735329	tr-rmse: 0.238285	tr-rmse: 0.238285
2025-07-22 05:23:31 [DEBUG] XGB iter  25: tr-p-rmse: 0.081440	tr-a-peak@32: 0.971095	tr-rmse: 0.342757	tr-rmse: 0.342757
2025-07-22 05:23:31 [DEBUG] XGB iter  50: tr-p-rmse: 0.081440	tr-a-peak@32: 0.971095	tr-rmse: 0.342757	tr-rmse: 0.342757
2025-07-22 05:23:31 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.08144	tr-a-peak@32:0.97110	tr-rmse:0.34276	tr-rmse:0.34276 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:25:51 [DEBUG] XGB validation: p-rmse: 0.194489	a-peak@32: 0.972728
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:28:10 [DEBUG] XGB validation: p-rmse: 0.187542	a-peak@32: 0.778474
2025-07-22 05:28:10 [DEBUG] XGB iter   0: tr-p-rmse: 0.481430	tr-a-peak@32: 0.761986	tr-rmse: 0.294964	tr-rmse: 0.294964
2025-07-22 05:28:10 [DEBUG] XGB iter  25: tr-p-rmse: 0.112106	tr-a-peak@32: 0.910181	tr-rmse: 0.392623	tr-rmse: 0.392623
2025-07-22 05:28:10 [DEBUG] XGB iter  50: tr-p-rmse: 0.112106	tr-a-peak@32: 0.910181	tr-rmse: 0.392623	tr-rmse: 0.392623
2025-07-22 05:28:10 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.11211	tr-a-peak@32:0.91018	tr-rmse:0.39262	tr-rmse:0.39262 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:30:31 [DEBUG] XGB validation: p-rmse: 0.158719	a-peak@32: 0.997473
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:32:51 [DEBUG] XGB validation: p-rmse: 0.238977	a-peak@32: 0.816683
2025-07-22 05:32:51 [DEBUG] XGB iter   0: tr-p-rmse: 0.476538	tr-a-peak@32: 0.724478	tr-rmse: 0.286095	tr-rmse: 0.286095
2025-07-22 05:32:51 [DEBUG] XGB iter  25: tr-p-rmse: 0.111715	tr-a-peak@32: 0.907564	tr-rmse: 0.386747	tr-rmse: 0.386747
2025-07-22 05:32:51 [DEBUG] XGB iter  50: tr-p-rmse: 0.111715	tr-a-peak@32: 0.907564	tr-rmse: 0.386747	tr-rmse: 0.386747
2025-07-22 05:32:51 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.11171	tr-a-peak@32:0.90756	tr-rmse:0.38675	tr-rmse:0.38675 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:35:17 [DEBUG] XGB validation: p-rmse: 0.170722	a-peak@32: 0.812247
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:37:37 [DEBUG] XGB validation: p-rmse: 0.154314	a-peak@32: 0.809435
2025-07-22 05:37:37 [DEBUG] XGB iter   0: tr-p-rmse: 0.473782	tr-a-peak@32: 0.498644	tr-rmse: 0.274040	tr-rmse: 0.274040
2025-07-22 05:37:37 [DEBUG] XGB iter  25: tr-p-rmse: 0.111264	tr-a-peak@32: 0.910126	tr-rmse: 0.377863	tr-rmse: 0.377863
2025-07-22 05:37:37 [DEBUG] XGB iter  50: tr-p-rmse: 0.111264	tr-a-peak@32: 0.910126	tr-rmse: 0.377864	tr-rmse: 0.377864
2025-07-22 05:37:37 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.11126	tr-a-peak@32:0.91013	tr-rmse:0.37786	tr-rmse:0.37786 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:39:56 [DEBUG] XGB validation: p-rmse: 0.113658	a-peak@32: 0.981736
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:42:16 [DEBUG] XGB validation: p-rmse: 0.162835	a-peak@32: 0.836280
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:44:36 [DEBUG] XGB validation: p-rmse: 0.178214	a-peak@32: 0.981112
2025-07-22 05:44:36 [DEBUG] XGB iter   0: tr-p-rmse: 0.496610	tr-a-peak@32: 0.480947	tr-rmse: 0.195378	tr-rmse: 0.195378
2025-07-22 05:44:36 [DEBUG] XGB iter  25: tr-p-rmse: 0.091464	tr-a-peak@32: 0.981112	tr-rmse: 0.306504	tr-rmse: 0.306504
2025-07-22 05:44:36 [DEBUG] XGB iter  50: tr-p-rmse: 0.091464	tr-a-peak@32: 0.981112	tr-rmse: 0.306504	tr-rmse: 0.306504
2025-07-22 05:44:36 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.09146	tr-a-peak@32:0.98111	tr-rmse:0.30650	tr-rmse:0.30650 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:46:56 [DEBUG] XGB validation: p-rmse: 0.209402	a-peak@32: 0.786623
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:48:45 [DEBUG] XGB validation: p-rmse: 0.065820	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ X, half* __restrict__ Y, half* __restrict__ Z);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ X, half* __restrict__ Y, half* __restrict__ Z) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> Z_reindex_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> X_reindex_shared_dyn_wmma_matrix_a[2];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> Y_reindex_shared_dyn_wmma_matrix_b[2];
  nvcuda::wmma::fill_fragment(Z_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = *(uint4*)(X + (((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 1088)) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 4096));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 8192));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 3264)) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 12288));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 4352)) = *(uint4*)(Y + ((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 5632)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 1024));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 6912)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 2048));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 8192)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 3072));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 1) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 4352)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 4992)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 5632)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 6272)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 6912)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 7552)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 8192)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 8832)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 128));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 1088)) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 4224));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 8320));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 3264)) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 12416));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 4352)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 4096));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 5632)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 5120));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 6912)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 6144));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 8192)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 7168));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 1) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 4352)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 4992)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 5632)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 6272)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 6912)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 7552)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 8192)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 8832)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 256));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 1088)) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 4352));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 8448));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 3264)) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 12544));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 4352)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 8192));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 5632)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 9216));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 6912)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 10240));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 8192)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 11264));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 1) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 4352)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 4992)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 5632)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 6272)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 6912)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 7552)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 8192)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 8832)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 384));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 1088)) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 4480));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 8576));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 3264)) = *(uint4*)(X + ((((((((int)blockIdx.y) * 65536) + (((int)blockIdx.x) * 16384)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)threadIdx.x) & 15) * 8)) + 12672));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 4352)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 12288));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 5632)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 13312));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 6912)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 14336));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 8192)) = *(uint4*)(Y + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 15360));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 1) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 4352)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 4992)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 5632)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 6272)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 6912)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 7552)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 8192)])), 40);
  nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 8832)])), 40);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 256)])), Z_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half2*)(Z + (((((((int)blockIdx.y) * 4096) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 3) * 32)) + ((((int)threadIdx.x) & 7) * 2))) = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)));
  *(half2*)(Z + ((((((((int)blockIdx.y) * 4096) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 3) * 32)) + ((((int)threadIdx.x) & 7) * 2)) + 16)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 256));
  *(half2*)(Z + ((((((((int)blockIdx.y) * 4096) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 3) * 32)) + ((((int)threadIdx.x) & 7) * 2)) + 512)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 512));
  *(half2*)(Z + ((((((((int)blockIdx.y) * 4096) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + ((((int)threadIdx.x) >> 3) * 32)) + ((((int)threadIdx.x) & 7) * 2)) + 528)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 768));
}


The time of GMM is 0.008 ms
2025-07-22 05:48:46 [INFO] Logging directory: /tmp/tmprlns352g/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:50:15 [DEBUG] XGB iter   0: tr-p-rmse: 0.488151	tr-a-peak@32: 0.988114	tr-rmse: 0.408761	tr-rmse: 0.408761
2025-07-22 05:50:15 [DEBUG] XGB iter  25: tr-p-rmse: 0.025889	tr-a-peak@32: 1.000000	tr-rmse: 0.459253	tr-rmse: 0.459253
2025-07-22 05:50:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.025889	tr-a-peak@32: 1.000000	tr-rmse: 0.459253	tr-rmse: 0.459253
2025-07-22 05:50:18 [DEBUG] XGB stopped. Best iteration: [10] tr-p-rmse:0.02589	tr-a-peak@32:1.00000	tr-rmse:0.45925	tr-rmse:0.45925 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:51:53 [DEBUG] XGB validation: p-rmse: 0.169743	a-peak@32: 0.970229
2025-07-22 05:51:53 [DEBUG] XGB iter   0: tr-p-rmse: 0.470272	tr-a-peak@32: 0.924394	tr-rmse: 0.381467	tr-rmse: 0.381467
2025-07-22 05:51:53 [DEBUG] XGB iter  25: tr-p-rmse: 0.035322	tr-a-peak@32: 1.000000	tr-rmse: 0.428064	tr-rmse: 0.428064
2025-07-22 05:51:53 [DEBUG] XGB iter  50: tr-p-rmse: 0.035322	tr-a-peak@32: 1.000000	tr-rmse: 0.428064	tr-rmse: 0.428064
2025-07-22 05:51:53 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.03532	tr-a-peak@32:1.00000	tr-rmse:0.42806	tr-rmse:0.42806 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:53:19 [DEBUG] XGB validation: p-rmse: 0.429057	a-peak@32: 0.990755
2025-07-22 05:53:19 [DEBUG] XGB iter   0: tr-p-rmse: 0.439993	tr-a-peak@32: 0.952684	tr-rmse: 0.413914	tr-rmse: 0.413914
2025-07-22 05:53:22 [DEBUG] XGB iter  25: tr-p-rmse: 0.047604	tr-a-peak@32: 0.999689	tr-rmse: 0.461355	tr-rmse: 0.461355
2025-07-22 05:53:22 [DEBUG] XGB iter  50: tr-p-rmse: 0.047604	tr-a-peak@32: 0.999689	tr-rmse: 0.461355	tr-rmse: 0.461355
2025-07-22 05:53:22 [DEBUG] XGB stopped. Best iteration: [9] tr-p-rmse:0.04759	tr-a-peak@32:0.99969	tr-rmse:0.46137	tr-rmse:0.46137 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:54:52 [DEBUG] XGB validation: p-rmse: 0.438199	a-peak@32: 1.000000
2025-07-22 05:54:52 [DEBUG] XGB iter   0: tr-p-rmse: 0.418411	tr-a-peak@32: 0.692013	tr-rmse: 0.387317	tr-rmse: 0.387317
2025-07-22 05:54:52 [DEBUG] XGB iter  25: tr-p-rmse: 0.072964	tr-a-peak@32: 0.998443	tr-rmse: 0.440745	tr-rmse: 0.440745
2025-07-22 05:54:52 [DEBUG] XGB iter  50: tr-p-rmse: 0.072964	tr-a-peak@32: 0.998443	tr-rmse: 0.440745	tr-rmse: 0.440745
2025-07-22 05:54:52 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.07294	tr-a-peak@32:0.99844	tr-rmse:0.44077	tr-rmse:0.44077 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:56:14 [DEBUG] XGB validation: p-rmse: 0.379172	a-peak@32: 0.928403
2025-07-22 05:56:15 [DEBUG] XGB iter   0: tr-p-rmse: 0.403471	tr-a-peak@32: 0.574301	tr-rmse: 0.372519	tr-rmse: 0.372519
2025-07-22 05:56:15 [DEBUG] XGB iter  25: tr-p-rmse: 0.074830	tr-a-peak@32: 0.987486	tr-rmse: 0.429250	tr-rmse: 0.429250
2025-07-22 05:56:15 [DEBUG] XGB iter  50: tr-p-rmse: 0.074830	tr-a-peak@32: 0.987486	tr-rmse: 0.429250	tr-rmse: 0.429250
2025-07-22 05:56:15 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.07483	tr-a-peak@32:0.98749	tr-rmse:0.42925	tr-rmse:0.42925 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:57:39 [DEBUG] XGB validation: p-rmse: 0.248997	a-peak@32: 0.981152
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 05:59:06 [DEBUG] XGB validation: p-rmse: 0.396879	a-peak@32: 0.956324
2025-07-22 05:59:06 [DEBUG] XGB iter   0: tr-p-rmse: 0.390969	tr-a-peak@32: 0.493092	tr-rmse: 0.314915	tr-rmse: 0.314915
2025-07-22 05:59:07 [DEBUG] XGB iter  25: tr-p-rmse: 0.076066	tr-a-peak@32: 0.997627	tr-rmse: 0.376826	tr-rmse: 0.376826
2025-07-22 05:59:07 [DEBUG] XGB iter  50: tr-p-rmse: 0.076066	tr-a-peak@32: 0.997627	tr-rmse: 0.376826	tr-rmse: 0.376826
2025-07-22 05:59:07 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.07607	tr-a-peak@32:0.99763	tr-rmse:0.37683	tr-rmse:0.37683 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:00:29 [DEBUG] XGB validation: p-rmse: 0.166197	a-peak@32: 0.962791
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:01:49 [DEBUG] XGB validation: p-rmse: 0.201769	a-peak@32: 0.978617
2025-07-22 06:01:49 [DEBUG] XGB iter   0: tr-p-rmse: 0.395888	tr-a-peak@32: 0.529996	tr-rmse: 0.350251	tr-rmse: 0.350251
2025-07-22 06:01:49 [DEBUG] XGB iter  25: tr-p-rmse: 0.080920	tr-a-peak@32: 0.993032	tr-rmse: 0.406135	tr-rmse: 0.406135
2025-07-22 06:01:49 [DEBUG] XGB iter  50: tr-p-rmse: 0.080920	tr-a-peak@32: 0.993032	tr-rmse: 0.406135	tr-rmse: 0.406135
2025-07-22 06:01:49 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.08092	tr-a-peak@32:0.99303	tr-rmse:0.40613	tr-rmse:0.40613 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:03:36 [DEBUG] XGB validation: p-rmse: 0.319259	a-peak@32: 0.954347
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:04:56 [DEBUG] XGB validation: p-rmse: 0.307549	a-peak@32: 0.494806
2025-07-22 06:04:56 [DEBUG] XGB iter   0: tr-p-rmse: 0.389852	tr-a-peak@32: 0.499198	tr-rmse: 0.333659	tr-rmse: 0.333659
2025-07-22 06:04:56 [DEBUG] XGB iter  25: tr-p-rmse: 0.093008	tr-a-peak@32: 1.000000	tr-rmse: 0.393433	tr-rmse: 0.393433
2025-07-22 06:04:56 [DEBUG] XGB iter  50: tr-p-rmse: 0.093008	tr-a-peak@32: 1.000000	tr-rmse: 0.393433	tr-rmse: 0.393433
2025-07-22 06:04:56 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.09301	tr-a-peak@32:1.00000	tr-rmse:0.39343	tr-rmse:0.39343 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:06:18 [DEBUG] XGB validation: p-rmse: 0.270032	a-peak@32: 0.913238
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:07:38 [DEBUG] XGB validation: p-rmse: 0.230795	a-peak@32: 0.916124
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:09:01 [DEBUG] XGB validation: p-rmse: 0.201013	a-peak@32: 0.976590
2025-07-22 06:09:01 [DEBUG] XGB iter   0: tr-p-rmse: 0.380513	tr-a-peak@32: 0.523852	tr-rmse: 0.318850	tr-rmse: 0.318850
2025-07-22 06:09:01 [DEBUG] XGB iter  25: tr-p-rmse: 0.090900	tr-a-peak@32: 0.965462	tr-rmse: 0.381762	tr-rmse: 0.381762
2025-07-22 06:09:01 [DEBUG] XGB iter  50: tr-p-rmse: 0.090900	tr-a-peak@32: 0.965462	tr-rmse: 0.381762	tr-rmse: 0.381762
2025-07-22 06:09:01 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.09090	tr-a-peak@32:0.96546	tr-rmse:0.38176	tr-rmse:0.38176 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:10:26 [DEBUG] XGB validation: p-rmse: 0.142019	a-peak@32: 0.902532
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:11:47 [DEBUG] XGB validation: p-rmse: 0.138194	a-peak@32: 0.922016
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(448) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(448) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  half conv2d_nhwc_local[8];
  __shared__ half PadInput_shared[3584];
  __shared__ half weight_shared[512];
  conv2d_nhwc_local[0] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[1] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[2] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[3] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[4] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[5] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[6] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[7] = __float2half_rn(0.000000e+00f);
  *(half4*)(PadInput_shared + (((int)threadIdx.x) * 4)) = *(half4*)(inputs + (((((((((int)blockIdx.x) >> 2) * 14336) + ((((int)threadIdx.x) / 224) * 3584)) + (((((int)blockIdx.x) & 3) >> 1) * 1792)) + (((((int)threadIdx.x) % 224) >> 3) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 7) * 4)));
  *(half4*)(PadInput_shared + ((((int)threadIdx.x) * 4) + 1792)) = *(half4*)(inputs + ((((((((((int)blockIdx.x) >> 2) * 14336) + ((((int)threadIdx.x) / 224) * 3584)) + (((((int)blockIdx.x) & 3) >> 1) * 1792)) + (((((int)threadIdx.x) % 224) >> 3) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 7) * 4)) + 7168));
  if (((int)threadIdx.x) < 64) {
    *(uint4*)(weight_shared + (((int)threadIdx.x) * 8)) = *(uint4*)(weight + ((((((int)threadIdx.x) >> 2) * 64) + ((((int)blockIdx.x) & 1) * 32)) + ((((int)threadIdx.x) & 3) * 8)));
  }
  __syncthreads();
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16))] * weight_shared[(((int)threadIdx.x) & 31)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 224)] * weight_shared[(((int)threadIdx.x) & 31)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 448)] * weight_shared[(((int)threadIdx.x) & 31)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 672)] * weight_shared[(((int)threadIdx.x) & 31)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1792)] * weight_shared[(((int)threadIdx.x) & 31)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2016)] * weight_shared[(((int)threadIdx.x) & 31)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2240)] * weight_shared[(((int)threadIdx.x) & 31)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2464)] * weight_shared[(((int)threadIdx.x) & 31)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1)] * weight_shared[((((int)threadIdx.x) & 31) + 32)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 225)] * weight_shared[((((int)threadIdx.x) & 31) + 32)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 449)] * weight_shared[((((int)threadIdx.x) & 31) + 32)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 673)] * weight_shared[((((int)threadIdx.x) & 31) + 32)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1793)] * weight_shared[((((int)threadIdx.x) & 31) + 32)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2017)] * weight_shared[((((int)threadIdx.x) & 31) + 32)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2241)] * weight_shared[((((int)threadIdx.x) & 31) + 32)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2465)] * weight_shared[((((int)threadIdx.x) & 31) + 32)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2)] * weight_shared[((((int)threadIdx.x) & 31) + 64)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 226)] * weight_shared[((((int)threadIdx.x) & 31) + 64)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 450)] * weight_shared[((((int)threadIdx.x) & 31) + 64)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 674)] * weight_shared[((((int)threadIdx.x) & 31) + 64)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1794)] * weight_shared[((((int)threadIdx.x) & 31) + 64)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2018)] * weight_shared[((((int)threadIdx.x) & 31) + 64)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2242)] * weight_shared[((((int)threadIdx.x) & 31) + 64)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2466)] * weight_shared[((((int)threadIdx.x) & 31) + 64)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 3)] * weight_shared[((((int)threadIdx.x) & 31) + 96)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 227)] * weight_shared[((((int)threadIdx.x) & 31) + 96)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 451)] * weight_shared[((((int)threadIdx.x) & 31) + 96)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 675)] * weight_shared[((((int)threadIdx.x) & 31) + 96)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1795)] * weight_shared[((((int)threadIdx.x) & 31) + 96)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2019)] * weight_shared[((((int)threadIdx.x) & 31) + 96)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2243)] * weight_shared[((((int)threadIdx.x) & 31) + 96)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2467)] * weight_shared[((((int)threadIdx.x) & 31) + 96)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 4)] * weight_shared[((((int)threadIdx.x) & 31) + 128)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 228)] * weight_shared[((((int)threadIdx.x) & 31) + 128)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 452)] * weight_shared[((((int)threadIdx.x) & 31) + 128)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 676)] * weight_shared[((((int)threadIdx.x) & 31) + 128)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1796)] * weight_shared[((((int)threadIdx.x) & 31) + 128)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2020)] * weight_shared[((((int)threadIdx.x) & 31) + 128)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2244)] * weight_shared[((((int)threadIdx.x) & 31) + 128)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2468)] * weight_shared[((((int)threadIdx.x) & 31) + 128)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 5)] * weight_shared[((((int)threadIdx.x) & 31) + 160)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 229)] * weight_shared[((((int)threadIdx.x) & 31) + 160)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 453)] * weight_shared[((((int)threadIdx.x) & 31) + 160)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 677)] * weight_shared[((((int)threadIdx.x) & 31) + 160)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1797)] * weight_shared[((((int)threadIdx.x) & 31) + 160)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2021)] * weight_shared[((((int)threadIdx.x) & 31) + 160)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2245)] * weight_shared[((((int)threadIdx.x) & 31) + 160)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2469)] * weight_shared[((((int)threadIdx.x) & 31) + 160)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 6)] * weight_shared[((((int)threadIdx.x) & 31) + 192)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 230)] * weight_shared[((((int)threadIdx.x) & 31) + 192)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 454)] * weight_shared[((((int)threadIdx.x) & 31) + 192)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 678)] * weight_shared[((((int)threadIdx.x) & 31) + 192)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1798)] * weight_shared[((((int)threadIdx.x) & 31) + 192)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2022)] * weight_shared[((((int)threadIdx.x) & 31) + 192)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2246)] * weight_shared[((((int)threadIdx.x) & 31) + 192)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2470)] * weight_shared[((((int)threadIdx.x) & 31) + 192)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 7)] * weight_shared[((((int)threadIdx.x) & 31) + 224)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 231)] * weight_shared[((((int)threadIdx.x) & 31) + 224)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 455)] * weight_shared[((((int)threadIdx.x) & 31) + 224)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 679)] * weight_shared[((((int)threadIdx.x) & 31) + 224)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1799)] * weight_shared[((((int)threadIdx.x) & 31) + 224)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2023)] * weight_shared[((((int)threadIdx.x) & 31) + 224)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2247)] * weight_shared[((((int)threadIdx.x) & 31) + 224)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2471)] * weight_shared[((((int)threadIdx.x) & 31) + 224)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 8)] * weight_shared[((((int)threadIdx.x) & 31) + 256)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 232)] * weight_shared[((((int)threadIdx.x) & 31) + 256)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 456)] * weight_shared[((((int)threadIdx.x) & 31) + 256)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 680)] * weight_shared[((((int)threadIdx.x) & 31) + 256)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1800)] * weight_shared[((((int)threadIdx.x) & 31) + 256)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2024)] * weight_shared[((((int)threadIdx.x) & 31) + 256)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2248)] * weight_shared[((((int)threadIdx.x) & 31) + 256)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2472)] * weight_shared[((((int)threadIdx.x) & 31) + 256)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 9)] * weight_shared[((((int)threadIdx.x) & 31) + 288)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 233)] * weight_shared[((((int)threadIdx.x) & 31) + 288)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 457)] * weight_shared[((((int)threadIdx.x) & 31) + 288)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 681)] * weight_shared[((((int)threadIdx.x) & 31) + 288)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1801)] * weight_shared[((((int)threadIdx.x) & 31) + 288)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2025)] * weight_shared[((((int)threadIdx.x) & 31) + 288)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2249)] * weight_shared[((((int)threadIdx.x) & 31) + 288)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2473)] * weight_shared[((((int)threadIdx.x) & 31) + 288)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 10)] * weight_shared[((((int)threadIdx.x) & 31) + 320)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 234)] * weight_shared[((((int)threadIdx.x) & 31) + 320)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 458)] * weight_shared[((((int)threadIdx.x) & 31) + 320)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 682)] * weight_shared[((((int)threadIdx.x) & 31) + 320)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1802)] * weight_shared[((((int)threadIdx.x) & 31) + 320)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2026)] * weight_shared[((((int)threadIdx.x) & 31) + 320)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2250)] * weight_shared[((((int)threadIdx.x) & 31) + 320)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2474)] * weight_shared[((((int)threadIdx.x) & 31) + 320)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 11)] * weight_shared[((((int)threadIdx.x) & 31) + 352)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 235)] * weight_shared[((((int)threadIdx.x) & 31) + 352)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 459)] * weight_shared[((((int)threadIdx.x) & 31) + 352)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 683)] * weight_shared[((((int)threadIdx.x) & 31) + 352)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1803)] * weight_shared[((((int)threadIdx.x) & 31) + 352)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2027)] * weight_shared[((((int)threadIdx.x) & 31) + 352)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2251)] * weight_shared[((((int)threadIdx.x) & 31) + 352)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2475)] * weight_shared[((((int)threadIdx.x) & 31) + 352)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 12)] * weight_shared[((((int)threadIdx.x) & 31) + 384)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 236)] * weight_shared[((((int)threadIdx.x) & 31) + 384)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 460)] * weight_shared[((((int)threadIdx.x) & 31) + 384)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 684)] * weight_shared[((((int)threadIdx.x) & 31) + 384)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1804)] * weight_shared[((((int)threadIdx.x) & 31) + 384)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2028)] * weight_shared[((((int)threadIdx.x) & 31) + 384)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2252)] * weight_shared[((((int)threadIdx.x) & 31) + 384)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2476)] * weight_shared[((((int)threadIdx.x) & 31) + 384)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 13)] * weight_shared[((((int)threadIdx.x) & 31) + 416)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 237)] * weight_shared[((((int)threadIdx.x) & 31) + 416)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 461)] * weight_shared[((((int)threadIdx.x) & 31) + 416)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 685)] * weight_shared[((((int)threadIdx.x) & 31) + 416)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1805)] * weight_shared[((((int)threadIdx.x) & 31) + 416)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2029)] * weight_shared[((((int)threadIdx.x) & 31) + 416)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2253)] * weight_shared[((((int)threadIdx.x) & 31) + 416)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2477)] * weight_shared[((((int)threadIdx.x) & 31) + 416)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 14)] * weight_shared[((((int)threadIdx.x) & 31) + 448)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 238)] * weight_shared[((((int)threadIdx.x) & 31) + 448)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 462)] * weight_shared[((((int)threadIdx.x) & 31) + 448)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 686)] * weight_shared[((((int)threadIdx.x) & 31) + 448)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1806)] * weight_shared[((((int)threadIdx.x) & 31) + 448)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2030)] * weight_shared[((((int)threadIdx.x) & 31) + 448)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2254)] * weight_shared[((((int)threadIdx.x) & 31) + 448)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2478)] * weight_shared[((((int)threadIdx.x) & 31) + 448)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 15)] * weight_shared[((((int)threadIdx.x) & 31) + 480)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 239)] * weight_shared[((((int)threadIdx.x) & 31) + 480)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 463)] * weight_shared[((((int)threadIdx.x) & 31) + 480)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 687)] * weight_shared[((((int)threadIdx.x) & 31) + 480)]));
  conv2d_nhwc_local[4] = (conv2d_nhwc_local[4] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 1807)] * weight_shared[((((int)threadIdx.x) & 31) + 480)]));
  conv2d_nhwc_local[5] = (conv2d_nhwc_local[5] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2031)] * weight_shared[((((int)threadIdx.x) & 31) + 480)]));
  conv2d_nhwc_local[6] = (conv2d_nhwc_local[6] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2255)] * weight_shared[((((int)threadIdx.x) & 31) + 480)]));
  conv2d_nhwc_local[7] = (conv2d_nhwc_local[7] + (PadInput_shared[((((((int)threadIdx.x) / 224) * 896) + (((((int)threadIdx.x) % 224) >> 4) * 16)) + 2479)] * weight_shared[((((int)threadIdx.x) & 31) + 480)]));
  conv2d_nhwc[(((((((((int)blockIdx.x) >> 2) * 14336) + ((((int)threadIdx.x) / 224) * 3584)) + (((((int)blockIdx.x) & 3) >> 1) * 1792)) + (((((int)threadIdx.x) % 224) >> 5) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 31))] = conv2d_nhwc_local[0];
  conv2d_nhwc[((((((((((int)blockIdx.x) >> 2) * 14336) + ((((int)threadIdx.x) / 224) * 3584)) + (((((int)blockIdx.x) & 3) >> 1) * 1792)) + (((((int)threadIdx.x) % 224) >> 5) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 31)) + 448)] = conv2d_nhwc_local[1];
  conv2d_nhwc[((((((((((int)blockIdx.x) >> 2) * 14336) + ((((int)threadIdx.x) / 224) * 3584)) + (((((int)blockIdx.x) & 3) >> 1) * 1792)) + (((((int)threadIdx.x) % 224) >> 5) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 31)) + 896)] = conv2d_nhwc_local[2];
  conv2d_nhwc[((((((((((int)blockIdx.x) >> 2) * 14336) + ((((int)threadIdx.x) / 224) * 3584)) + (((((int)blockIdx.x) & 3) >> 1) * 1792)) + (((((int)threadIdx.x) % 224) >> 5) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 31)) + 1344)] = conv2d_nhwc_local[3];
  conv2d_nhwc[((((((((((int)blockIdx.x) >> 2) * 14336) + ((((int)threadIdx.x) / 224) * 3584)) + (((((int)blockIdx.x) & 3) >> 1) * 1792)) + (((((int)threadIdx.x) % 224) >> 5) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 31)) + 7168)] = conv2d_nhwc_local[4];
  conv2d_nhwc[((((((((((int)blockIdx.x) >> 2) * 14336) + ((((int)threadIdx.x) / 224) * 3584)) + (((((int)blockIdx.x) & 3) >> 1) * 1792)) + (((((int)threadIdx.x) % 224) >> 5) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 31)) + 7616)] = conv2d_nhwc_local[5];
  conv2d_nhwc[((((((((((int)blockIdx.x) >> 2) * 14336) + ((((int)threadIdx.x) / 224) * 3584)) + (((((int)blockIdx.x) & 3) >> 1) * 1792)) + (((((int)threadIdx.x) % 224) >> 5) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 31)) + 8064)] = conv2d_nhwc_local[6];
  conv2d_nhwc[((((((((((int)blockIdx.x) >> 2) * 14336) + ((((int)threadIdx.x) / 224) * 3584)) + (((((int)blockIdx.x) & 3) >> 1) * 1792)) + (((((int)threadIdx.x) % 224) >> 5) * 64)) + ((((int)blockIdx.x) & 1) * 32)) + (((int)threadIdx.x) & 31)) + 8512)] = conv2d_nhwc_local[7];
}


The time of GRP is 0.005 ms
2025-07-22 06:11:48 [INFO] Logging directory: /tmp/tmprnp1c71m/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:14:04 [DEBUG] XGB iter   0: tr-p-rmse: 0.478243	tr-a-peak@32: 0.753974	tr-rmse: 0.322502	tr-rmse: 0.322502
2025-07-22 06:14:04 [DEBUG] XGB iter  25: tr-p-rmse: 0.029336	tr-a-peak@32: 1.000000	tr-rmse: 0.407444	tr-rmse: 0.407444
2025-07-22 06:14:04 [DEBUG] XGB iter  50: tr-p-rmse: 0.029336	tr-a-peak@32: 1.000000	tr-rmse: 0.407444	tr-rmse: 0.407444
2025-07-22 06:14:04 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.02934	tr-a-peak@32:1.00000	tr-rmse:0.40744	tr-rmse:0.40744 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:16:12 [DEBUG] XGB validation: p-rmse: 0.255501	a-peak@32: 0.993792
2025-07-22 06:16:12 [DEBUG] XGB iter   0: tr-p-rmse: 0.483845	tr-a-peak@32: 0.980135	tr-rmse: 0.337651	tr-rmse: 0.337651
2025-07-22 06:16:12 [DEBUG] XGB iter  25: tr-p-rmse: 0.034742	tr-a-peak@32: 1.000000	tr-rmse: 0.420521	tr-rmse: 0.420521
2025-07-22 06:16:12 [DEBUG] XGB iter  50: tr-p-rmse: 0.034742	tr-a-peak@32: 1.000000	tr-rmse: 0.420521	tr-rmse: 0.420521
2025-07-22 06:16:12 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.03474	tr-a-peak@32:1.00000	tr-rmse:0.42052	tr-rmse:0.42052 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:18:37 [DEBUG] XGB validation: p-rmse: 0.478502	a-peak@32: 0.885933
2025-07-22 06:18:37 [DEBUG] XGB iter   0: tr-p-rmse: 0.479202	tr-a-peak@32: 0.960349	tr-rmse: 0.322859	tr-rmse: 0.322859
2025-07-22 06:18:37 [DEBUG] XGB iter  25: tr-p-rmse: 0.070006	tr-a-peak@32: 0.982699	tr-rmse: 0.409959	tr-rmse: 0.409959
2025-07-22 06:18:38 [DEBUG] XGB iter  50: tr-p-rmse: 0.070006	tr-a-peak@32: 0.982699	tr-rmse: 0.409959	tr-rmse: 0.409959
2025-07-22 06:18:38 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.07001	tr-a-peak@32:0.98270	tr-rmse:0.40996	tr-rmse:0.40996 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:21:06 [DEBUG] XGB validation: p-rmse: 0.334377	a-peak@32: 0.980661
2025-07-22 06:21:06 [DEBUG] XGB iter   0: tr-p-rmse: 0.486232	tr-a-peak@32: 0.680150	tr-rmse: 0.270275	tr-rmse: 0.270275
2025-07-22 06:21:06 [DEBUG] XGB iter  25: tr-p-rmse: 0.074655	tr-a-peak@32: 0.999218	tr-rmse: 0.365532	tr-rmse: 0.365532
2025-07-22 06:21:06 [DEBUG] XGB iter  50: tr-p-rmse: 0.074655	tr-a-peak@32: 0.999218	tr-rmse: 0.365532	tr-rmse: 0.365532
2025-07-22 06:21:06 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.07465	tr-a-peak@32:0.99922	tr-rmse:0.36553	tr-rmse:0.36553 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:23:33 [DEBUG] XGB validation: p-rmse: 0.317998	a-peak@32: 0.927769
2025-07-22 06:23:33 [DEBUG] XGB iter   0: tr-p-rmse: 0.482062	tr-a-peak@32: 0.641639	tr-rmse: 0.254194	tr-rmse: 0.254194
2025-07-22 06:23:33 [DEBUG] XGB iter  25: tr-p-rmse: 0.081294	tr-a-peak@32: 1.000000	tr-rmse: 0.355558	tr-rmse: 0.355558
2025-07-22 06:23:33 [DEBUG] XGB iter  50: tr-p-rmse: 0.081294	tr-a-peak@32: 1.000000	tr-rmse: 0.355558	tr-rmse: 0.355558
2025-07-22 06:23:33 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.08129	tr-a-peak@32:1.00000	tr-rmse:0.35556	tr-rmse:0.35556 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:25:59 [DEBUG] XGB validation: p-rmse: 0.198356	a-peak@32: 0.983872
2025-07-22 06:25:59 [DEBUG] XGB iter   0: tr-p-rmse: 0.481349	tr-a-peak@32: 0.821753	tr-rmse: 0.260563	tr-rmse: 0.260563
2025-07-22 06:25:59 [DEBUG] XGB iter  25: tr-p-rmse: 0.084522	tr-a-peak@32: 0.999334	tr-rmse: 0.360269	tr-rmse: 0.360269
2025-07-22 06:25:59 [DEBUG] XGB iter  50: tr-p-rmse: 0.084522	tr-a-peak@32: 0.999334	tr-rmse: 0.360269	tr-rmse: 0.360269
2025-07-22 06:25:59 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.08452	tr-a-peak@32:0.99933	tr-rmse:0.36027	tr-rmse:0.36027 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:28:25 [DEBUG] XGB validation: p-rmse: 0.333806	a-peak@32: 0.858553
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:30:51 [DEBUG] XGB validation: p-rmse: 0.226654	a-peak@32: 0.990182
2025-07-22 06:30:51 [DEBUG] XGB iter   0: tr-p-rmse: 0.479805	tr-a-peak@32: 0.464319	tr-rmse: 0.248646	tr-rmse: 0.248646
2025-07-22 06:30:51 [DEBUG] XGB iter  25: tr-p-rmse: 0.087577	tr-a-peak@32: 0.999218	tr-rmse: 0.351917	tr-rmse: 0.351917
2025-07-22 06:30:51 [DEBUG] XGB iter  50: tr-p-rmse: 0.087577	tr-a-peak@32: 0.999218	tr-rmse: 0.351917	tr-rmse: 0.351917
2025-07-22 06:30:51 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.08758	tr-a-peak@32:0.99922	tr-rmse:0.35192	tr-rmse:0.35192 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:33:17 [DEBUG] XGB validation: p-rmse: 0.155345	a-peak@32: 0.989157
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:35:44 [DEBUG] XGB validation: p-rmse: 0.162954	a-peak@32: 0.989530
2025-07-22 06:35:44 [DEBUG] XGB iter   0: tr-p-rmse: 0.474510	tr-a-peak@32: 0.637330	tr-rmse: 0.245419	tr-rmse: 0.245419
2025-07-22 06:35:44 [DEBUG] XGB iter  25: tr-p-rmse: 0.091491	tr-a-peak@32: 0.999907	tr-rmse: 0.351149	tr-rmse: 0.351149
2025-07-22 06:35:44 [DEBUG] XGB iter  50: tr-p-rmse: 0.091491	tr-a-peak@32: 0.999907	tr-rmse: 0.351149	tr-rmse: 0.351149
2025-07-22 06:35:44 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.09149	tr-a-peak@32:0.99991	tr-rmse:0.35115	tr-rmse:0.35115 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:38:10 [DEBUG] XGB validation: p-rmse: 0.180396	a-peak@32: 0.980874
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:40:36 [DEBUG] XGB validation: p-rmse: 0.192604	a-peak@32: 0.986093
2025-07-22 06:40:36 [DEBUG] XGB iter   0: tr-p-rmse: 0.487976	tr-a-peak@32: 0.899997	tr-rmse: 0.194223	tr-rmse: 0.194223
2025-07-22 06:40:36 [DEBUG] XGB iter  25: tr-p-rmse: 0.082273	tr-a-peak@32: 1.000000	tr-rmse: 0.305634	tr-rmse: 0.305634
2025-07-22 06:40:37 [DEBUG] XGB iter  50: tr-p-rmse: 0.082273	tr-a-peak@32: 1.000000	tr-rmse: 0.305635	tr-rmse: 0.305635
2025-07-22 06:40:37 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.08227	tr-a-peak@32:1.00000	tr-rmse:0.30563	tr-rmse:0.30563 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:43:00 [DEBUG] XGB validation: p-rmse: 0.174375	a-peak@32: 0.996405
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:45:29 [DEBUG] XGB validation: p-rmse: 0.187815	a-peak@32: 0.993315
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:47:55 [DEBUG] XGB validation: p-rmse: 0.165307	a-peak@32: 0.938147
2025-07-22 06:47:55 [DEBUG] XGB iter   0: tr-p-rmse: 0.486727	tr-a-peak@32: 0.782709	tr-rmse: 0.182917	tr-rmse: 0.182917
2025-07-22 06:47:55 [DEBUG] XGB iter  25: tr-p-rmse: 0.085100	tr-a-peak@32: 0.940511	tr-rmse: 0.297235	tr-rmse: 0.297235
2025-07-22 06:47:55 [DEBUG] XGB iter  50: tr-p-rmse: 0.085100	tr-a-peak@32: 0.940511	tr-rmse: 0.297235	tr-rmse: 0.297235
2025-07-22 06:47:55 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.08510	tr-a-peak@32:0.94051	tr-rmse:0.29723	tr-rmse:0.29723 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:50:24 [DEBUG] XGB validation: p-rmse: 0.118016	a-peak@32: 0.980184
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[1];
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 2560)) = *(half4*)(inputs + ((((((int)blockIdx.y) >> 1) * 4096) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 3712)) = *(half4*)(inputs + (((((((int)blockIdx.y) >> 1) * 4096) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1024));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 4864)) = *(half4*)(inputs + (((((((int)blockIdx.y) >> 1) * 4096) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 6016)) = *(half4*)(inputs + (((((((int)blockIdx.y) >> 1) * 4096) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 3072));
  *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2))) = *(half2*)(weight + ((((((int)threadIdx.y) * 128) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.y) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 640)) = *(half2*)(weight + (((((((int)threadIdx.y) * 128) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.y) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 1024));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 1280)) = *(half2*)(weight + (((((((int)threadIdx.y) * 128) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.y) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 2048));
  *(half2*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 1920)) = *(half2*)(weight + (((((((int)threadIdx.y) * 128) + ((((int)threadIdx.x) >> 4) * 64)) + ((((int)blockIdx.y) & 1) * 32)) + ((((int)threadIdx.x) & 15) * 2)) + 3072));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 1152) + 2560)])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) & 1) * 16)])), 40);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 1152) + 2576)])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 640)])), 40);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 1152) + 2592)])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 1280)])), 40);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 1152) + 2608)])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 16) + 1920)])), 40);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 256)])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(uint4*)(conv2d_nhwc + (((((((((int)blockIdx.y) >> 1) * 4096) + ((((int)threadIdx.y) >> 1) * 1024)) + ((((int)threadIdx.x) >> 1) * 64)) + ((((int)blockIdx.y) & 1) * 32)) + ((((int)threadIdx.y) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)));
}


The time of DIL is 0.009 ms
2025-07-22 06:50:26 [INFO] Logging directory: /tmp/tmpjwlhhfm5/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:52:43 [DEBUG] XGB iter   0: tr-p-rmse: 0.480592	tr-a-peak@32: 0.992574	tr-rmse: 0.359722	tr-rmse: 0.359722
2025-07-22 06:52:43 [DEBUG] XGB iter  25: tr-p-rmse: 0.043600	tr-a-peak@32: 0.999033	tr-rmse: 0.405767	tr-rmse: 0.405767
2025-07-22 06:52:43 [DEBUG] XGB iter  50: tr-p-rmse: 0.043600	tr-a-peak@32: 0.999033	tr-rmse: 0.405767	tr-rmse: 0.405767
2025-07-22 06:52:43 [DEBUG] XGB stopped. Best iteration: [10] tr-p-rmse:0.04360	tr-a-peak@32:0.99903	tr-rmse:0.40577	tr-rmse:0.40577 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:55:24 [DEBUG] XGB validation: p-rmse: 0.184147	a-peak@32: 0.977073
2025-07-22 06:55:24 [DEBUG] XGB iter   0: tr-p-rmse: 0.490893	tr-a-peak@32: 0.995688	tr-rmse: 0.338347	tr-rmse: 0.338347
2025-07-22 06:55:24 [DEBUG] XGB iter  25: tr-p-rmse: 0.036591	tr-a-peak@32: 1.000000	tr-rmse: 0.379183	tr-rmse: 0.379183
2025-07-22 06:55:24 [DEBUG] XGB iter  50: tr-p-rmse: 0.036591	tr-a-peak@32: 1.000000	tr-rmse: 0.379183	tr-rmse: 0.379183
2025-07-22 06:55:24 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.03659	tr-a-peak@32:1.00000	tr-rmse:0.37918	tr-rmse:0.37918 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 06:58:06 [DEBUG] XGB validation: p-rmse: 0.517119	a-peak@32: 0.767033
2025-07-22 06:58:06 [DEBUG] XGB iter   0: tr-p-rmse: 0.446208	tr-a-peak@32: 1.000000	tr-rmse: 0.374240	tr-rmse: 0.374240
2025-07-22 06:58:06 [DEBUG] XGB iter  25: tr-p-rmse: 0.040352	tr-a-peak@32: 0.998071	tr-rmse: 0.425320	tr-rmse: 0.425320
2025-07-22 06:58:06 [DEBUG] XGB iter  50: tr-p-rmse: 0.040352	tr-a-peak@32: 0.998071	tr-rmse: 0.425320	tr-rmse: 0.425320
2025-07-22 06:58:06 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.04035	tr-a-peak@32:0.99807	tr-rmse:0.42532	tr-rmse:0.42532 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:00:39 [DEBUG] XGB validation: p-rmse: 0.316002	a-peak@32: 0.825323
2025-07-22 07:00:39 [DEBUG] XGB iter   0: tr-p-rmse: 0.408864	tr-a-peak@32: 0.695461	tr-rmse: 0.384018	tr-rmse: 0.384018
2025-07-22 07:00:39 [DEBUG] XGB iter  25: tr-p-rmse: 0.050001	tr-a-peak@32: 0.985533	tr-rmse: 0.442027	tr-rmse: 0.442027
2025-07-22 07:00:39 [DEBUG] XGB iter  50: tr-p-rmse: 0.050001	tr-a-peak@32: 0.985533	tr-rmse: 0.442027	tr-rmse: 0.442027
2025-07-22 07:00:39 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.05000	tr-a-peak@32:0.98553	tr-rmse:0.44203	tr-rmse:0.44203 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:03:11 [DEBUG] XGB validation: p-rmse: 0.154490	a-peak@32: 0.917762
2025-07-22 07:03:11 [DEBUG] XGB iter   0: tr-p-rmse: 0.390881	tr-a-peak@32: 0.776366	tr-rmse: 0.393617	tr-rmse: 0.393617
2025-07-22 07:03:11 [DEBUG] XGB iter  25: tr-p-rmse: 0.051744	tr-a-peak@32: 0.986820	tr-rmse: 0.453579	tr-rmse: 0.453579
2025-07-22 07:03:11 [DEBUG] XGB iter  50: tr-p-rmse: 0.051744	tr-a-peak@32: 0.986820	tr-rmse: 0.453579	tr-rmse: 0.453579
2025-07-22 07:03:11 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.05174	tr-a-peak@32:0.98682	tr-rmse:0.45358	tr-rmse:0.45358 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:05:50 [DEBUG] XGB validation: p-rmse: 0.148612	a-peak@32: 0.765671
2025-07-22 07:05:50 [DEBUG] XGB iter   0: tr-p-rmse: 0.380941	tr-a-peak@32: 0.783583	tr-rmse: 0.401107	tr-rmse: 0.401107
2025-07-22 07:05:50 [DEBUG] XGB iter  25: tr-p-rmse: 0.050498	tr-a-peak@32: 0.961023	tr-rmse: 0.461569	tr-rmse: 0.461569
2025-07-22 07:05:50 [DEBUG] XGB iter  50: tr-p-rmse: 0.050498	tr-a-peak@32: 0.961023	tr-rmse: 0.461569	tr-rmse: 0.461569
2025-07-22 07:05:50 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05050	tr-a-peak@32:0.96102	tr-rmse:0.46157	tr-rmse:0.46157 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:08:16 [DEBUG] XGB validation: p-rmse: 0.101814	a-peak@32: 0.932999
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:10:34 [DEBUG] XGB validation: p-rmse: 0.119475	a-peak@32: 0.900672
2025-07-22 07:10:34 [DEBUG] XGB iter   0: tr-p-rmse: 0.360676	tr-a-peak@32: 0.704046	tr-rmse: 0.413535	tr-rmse: 0.413535
2025-07-22 07:10:34 [DEBUG] XGB iter  25: tr-p-rmse: 0.053963	tr-a-peak@32: 1.000000	tr-rmse: 0.475718	tr-rmse: 0.475718
2025-07-22 07:10:34 [DEBUG] XGB iter  50: tr-p-rmse: 0.053963	tr-a-peak@32: 1.000000	tr-rmse: 0.475718	tr-rmse: 0.475718
2025-07-22 07:10:34 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.05396	tr-a-peak@32:1.00000	tr-rmse:0.47572	tr-rmse:0.47572 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:12:58 [DEBUG] XGB validation: p-rmse: 0.139064	a-peak@32: 0.942659
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:15:28 [DEBUG] XGB validation: p-rmse: 0.149675	a-peak@32: 0.813857
2025-07-22 07:15:28 [DEBUG] XGB iter   0: tr-p-rmse: 0.351897	tr-a-peak@32: 0.694965	tr-rmse: 0.424341	tr-rmse: 0.424341
2025-07-22 07:15:28 [DEBUG] XGB iter  25: tr-p-rmse: 0.055448	tr-a-peak@32: 0.881224	tr-rmse: 0.486081	tr-rmse: 0.486081
2025-07-22 07:15:28 [DEBUG] XGB iter  50: tr-p-rmse: 0.055448	tr-a-peak@32: 0.881224	tr-rmse: 0.486081	tr-rmse: 0.486081
2025-07-22 07:15:28 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.05545	tr-a-peak@32:0.88122	tr-rmse:0.48608	tr-rmse:0.48608 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:17:50 [DEBUG] XGB validation: p-rmse: 0.206069	a-peak@32: 0.955109
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:20:20 [DEBUG] XGB validation: p-rmse: 0.281930	a-peak@32: 0.674428
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:22:44 [DEBUG] XGB validation: p-rmse: 0.236764	a-peak@32: 0.769490
2025-07-22 07:22:44 [DEBUG] XGB iter   0: tr-p-rmse: 0.350748	tr-a-peak@32: 0.735833	tr-rmse: 0.386589	tr-rmse: 0.386589
2025-07-22 07:22:44 [DEBUG] XGB iter  25: tr-p-rmse: 0.051746	tr-a-peak@32: 1.000000	tr-rmse: 0.450623	tr-rmse: 0.450623
2025-07-22 07:22:44 [DEBUG] XGB iter  50: tr-p-rmse: 0.051746	tr-a-peak@32: 1.000000	tr-rmse: 0.450623	tr-rmse: 0.450623
2025-07-22 07:22:44 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05175	tr-a-peak@32:1.00000	tr-rmse:0.45062	tr-rmse:0.45062 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:25:13 [DEBUG] XGB validation: p-rmse: 0.131372	a-peak@32: 0.967994
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:27:38 [DEBUG] XGB validation: p-rmse: 0.144502	a-peak@32: 0.855741
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:29:56 [DEBUG] XGB validation: p-rmse: 0.136382	a-peak@32: 0.800459
2025-07-22 07:29:56 [DEBUG] XGB iter   0: tr-p-rmse: 0.345785	tr-a-peak@32: 0.684720	tr-rmse: 0.387268	tr-rmse: 0.387268
2025-07-22 07:29:56 [DEBUG] XGB iter  25: tr-p-rmse: 0.054869	tr-a-peak@32: 0.931751	tr-rmse: 0.452050	tr-rmse: 0.452050
2025-07-22 07:29:56 [DEBUG] XGB iter  50: tr-p-rmse: 0.054869	tr-a-peak@32: 0.931751	tr-rmse: 0.452050	tr-rmse: 0.452050
2025-07-22 07:29:56 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05487	tr-a-peak@32:0.93175	tr-rmse:0.45205	tr-rmse:0.45205 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:31:42 [DEBUG] XGB validation: p-rmse: 0.152563	a-peak@32: 0.915961
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ depth_conv2d_nhwc, half* __restrict__ placeholder, half* __restrict__ placeholder_1);
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ depth_conv2d_nhwc, half* __restrict__ placeholder, half* __restrict__ placeholder_1) {
  half depth_conv2d_nhwc_local[16];
  __shared__ half PadInput_shared[3264];
  __shared__ half placeholder_shared[576];
  depth_conv2d_nhwc_local[0] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[1] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[2] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[3] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[4] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[5] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[6] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[7] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[8] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[9] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[10] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[11] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[12] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[13] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[14] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[15] = __float2half_rn(0.000000e+00f);
  half condval;
  if (((56 <= ((int)blockIdx.x)) && (1 <= (((int)blockIdx.x) % 56)))) {
    condval = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) - 7232)];
  } else {
    condval = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((int)threadIdx.x)] = condval;
  half condval_1;
  if (((56 <= ((int)blockIdx.x)) && (1 <= (((int)blockIdx.x) % 56)))) {
    condval_1 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) - 7200)];
  } else {
    condval_1 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 32)] = condval_1;
  half condval_2;
  if ((56 <= ((int)blockIdx.x))) {
    condval_2 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) - 7168)];
  } else {
    condval_2 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 64)] = condval_2;
  half condval_3;
  if ((56 <= ((int)blockIdx.x))) {
    condval_3 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) - 7136)];
  } else {
    condval_3 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 96)] = condval_3;
  half condval_4;
  if ((56 <= ((int)blockIdx.x))) {
    condval_4 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) - 7104)];
  } else {
    condval_4 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 128)] = condval_4;
  half condval_5;
  if ((56 <= ((int)blockIdx.x))) {
    condval_5 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) - 7072)];
  } else {
    condval_5 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 160)] = condval_5;
  half condval_6;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_6 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) - 64)];
  } else {
    condval_6 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 192)] = condval_6;
  half condval_7;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_7 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) - 32)];
  } else {
    condval_7 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 224)] = condval_7;
  PadInput_shared[(((int)threadIdx.x) + 256)] = placeholder[((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x))];
  PadInput_shared[(((int)threadIdx.x) + 288)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 32)];
  PadInput_shared[(((int)threadIdx.x) + 320)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 64)];
  PadInput_shared[(((int)threadIdx.x) + 352)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 96)];
  half condval_8;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_8 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 7104)];
  } else {
    condval_8 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 384)] = condval_8;
  half condval_9;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_9 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 7136)];
  } else {
    condval_9 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 416)] = condval_9;
  PadInput_shared[(((int)threadIdx.x) + 448)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 7168)];
  PadInput_shared[(((int)threadIdx.x) + 480)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 7200)];
  PadInput_shared[(((int)threadIdx.x) + 512)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 7232)];
  PadInput_shared[(((int)threadIdx.x) + 544)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 7264)];
  half condval_10;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_10 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 14272)];
  } else {
    condval_10 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 576)] = condval_10;
  half condval_11;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_11 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 14304)];
  } else {
    condval_11 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 608)] = condval_11;
  PadInput_shared[(((int)threadIdx.x) + 640)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 14336)];
  PadInput_shared[(((int)threadIdx.x) + 672)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 14368)];
  PadInput_shared[(((int)threadIdx.x) + 704)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 14400)];
  PadInput_shared[(((int)threadIdx.x) + 736)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 14432)];
  half condval_12;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_12 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 21440)];
  } else {
    condval_12 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 768)] = condval_12;
  half condval_13;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_13 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 21472)];
  } else {
    condval_13 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 800)] = condval_13;
  PadInput_shared[(((int)threadIdx.x) + 832)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 21504)];
  PadInput_shared[(((int)threadIdx.x) + 864)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 21536)];
  PadInput_shared[(((int)threadIdx.x) + 896)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 21568)];
  PadInput_shared[(((int)threadIdx.x) + 928)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 21600)];
  half condval_14;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_14 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 28608)];
  } else {
    condval_14 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 960)] = condval_14;
  half condval_15;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_15 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 28640)];
  } else {
    condval_15 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 992)] = condval_15;
  PadInput_shared[(((int)threadIdx.x) + 1024)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 28672)];
  PadInput_shared[(((int)threadIdx.x) + 1056)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 28704)];
  PadInput_shared[(((int)threadIdx.x) + 1088)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 28736)];
  PadInput_shared[(((int)threadIdx.x) + 1120)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 28768)];
  half condval_16;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_16 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 35776)];
  } else {
    condval_16 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 1152)] = condval_16;
  half condval_17;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_17 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 35808)];
  } else {
    condval_17 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 1184)] = condval_17;
  PadInput_shared[(((int)threadIdx.x) + 1216)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 35840)];
  PadInput_shared[(((int)threadIdx.x) + 1248)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 35872)];
  PadInput_shared[(((int)threadIdx.x) + 1280)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 35904)];
  PadInput_shared[(((int)threadIdx.x) + 1312)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 35936)];
  half condval_18;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_18 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 42944)];
  } else {
    condval_18 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 1344)] = condval_18;
  half condval_19;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_19 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 42976)];
  } else {
    condval_19 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 1376)] = condval_19;
  PadInput_shared[(((int)threadIdx.x) + 1408)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 43008)];
  PadInput_shared[(((int)threadIdx.x) + 1440)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 43040)];
  PadInput_shared[(((int)threadIdx.x) + 1472)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 43072)];
  PadInput_shared[(((int)threadIdx.x) + 1504)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 43104)];
  half condval_20;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_20 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 50112)];
  } else {
    condval_20 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 1536)] = condval_20;
  half condval_21;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_21 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 50144)];
  } else {
    condval_21 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 1568)] = condval_21;
  PadInput_shared[(((int)threadIdx.x) + 1600)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 50176)];
  PadInput_shared[(((int)threadIdx.x) + 1632)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 50208)];
  PadInput_shared[(((int)threadIdx.x) + 1664)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 50240)];
  PadInput_shared[(((int)threadIdx.x) + 1696)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 50272)];
  half condval_22;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_22 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 57280)];
  } else {
    condval_22 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 1728)] = condval_22;
  half condval_23;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_23 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 57312)];
  } else {
    condval_23 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 1760)] = condval_23;
  PadInput_shared[(((int)threadIdx.x) + 1792)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 57344)];
  PadInput_shared[(((int)threadIdx.x) + 1824)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 57376)];
  PadInput_shared[(((int)threadIdx.x) + 1856)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 57408)];
  PadInput_shared[(((int)threadIdx.x) + 1888)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 57440)];
  half condval_24;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_24 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 64448)];
  } else {
    condval_24 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 1920)] = condval_24;
  half condval_25;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_25 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 64480)];
  } else {
    condval_25 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 1952)] = condval_25;
  PadInput_shared[(((int)threadIdx.x) + 1984)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 64512)];
  PadInput_shared[(((int)threadIdx.x) + 2016)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 64544)];
  PadInput_shared[(((int)threadIdx.x) + 2048)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 64576)];
  PadInput_shared[(((int)threadIdx.x) + 2080)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 64608)];
  half condval_26;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_26 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 71616)];
  } else {
    condval_26 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 2112)] = condval_26;
  half condval_27;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_27 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 71648)];
  } else {
    condval_27 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 2144)] = condval_27;
  PadInput_shared[(((int)threadIdx.x) + 2176)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 71680)];
  PadInput_shared[(((int)threadIdx.x) + 2208)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 71712)];
  PadInput_shared[(((int)threadIdx.x) + 2240)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 71744)];
  PadInput_shared[(((int)threadIdx.x) + 2272)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 71776)];
  half condval_28;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_28 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 78784)];
  } else {
    condval_28 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 2304)] = condval_28;
  half condval_29;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_29 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 78816)];
  } else {
    condval_29 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 2336)] = condval_29;
  PadInput_shared[(((int)threadIdx.x) + 2368)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 78848)];
  PadInput_shared[(((int)threadIdx.x) + 2400)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 78880)];
  PadInput_shared[(((int)threadIdx.x) + 2432)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 78912)];
  PadInput_shared[(((int)threadIdx.x) + 2464)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 78944)];
  half condval_30;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_30 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 85952)];
  } else {
    condval_30 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 2496)] = condval_30;
  half condval_31;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_31 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 85984)];
  } else {
    condval_31 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 2528)] = condval_31;
  PadInput_shared[(((int)threadIdx.x) + 2560)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 86016)];
  PadInput_shared[(((int)threadIdx.x) + 2592)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 86048)];
  PadInput_shared[(((int)threadIdx.x) + 2624)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 86080)];
  PadInput_shared[(((int)threadIdx.x) + 2656)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 86112)];
  half condval_32;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_32 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 93120)];
  } else {
    condval_32 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 2688)] = condval_32;
  half condval_33;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_33 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 93152)];
  } else {
    condval_33 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 2720)] = condval_33;
  PadInput_shared[(((int)threadIdx.x) + 2752)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 93184)];
  PadInput_shared[(((int)threadIdx.x) + 2784)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 93216)];
  PadInput_shared[(((int)threadIdx.x) + 2816)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 93248)];
  PadInput_shared[(((int)threadIdx.x) + 2848)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 93280)];
  half condval_34;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_34 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 100288)];
  } else {
    condval_34 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 2880)] = condval_34;
  half condval_35;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_35 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 100320)];
  } else {
    condval_35 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 2912)] = condval_35;
  PadInput_shared[(((int)threadIdx.x) + 2944)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 100352)];
  PadInput_shared[(((int)threadIdx.x) + 2976)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 100384)];
  PadInput_shared[(((int)threadIdx.x) + 3008)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 100416)];
  PadInput_shared[(((int)threadIdx.x) + 3040)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 100448)];
  half condval_36;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_36 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 107456)];
  } else {
    condval_36 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 3072)] = condval_36;
  half condval_37;
  if ((1 <= (((int)blockIdx.x) % 56))) {
    condval_37 = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 107488)];
  } else {
    condval_37 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) + 3104)] = condval_37;
  PadInput_shared[(((int)threadIdx.x) + 3136)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 107520)];
  PadInput_shared[(((int)threadIdx.x) + 3168)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 107552)];
  PadInput_shared[(((int)threadIdx.x) + 3200)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 107584)];
  PadInput_shared[(((int)threadIdx.x) + 3232)] = placeholder[(((((((int)blockIdx.x) / 56) * 114688) + ((((int)blockIdx.x) % 56) * 128)) + ((int)threadIdx.x)) + 107616)];
  *(uint4*)(placeholder_shared + (((int)threadIdx.x) * 8)) = *(uint4*)(placeholder_1 + (((int)threadIdx.x) * 8));
  *(uint4*)(placeholder_shared + ((((int)threadIdx.x) * 8) + 256)) = *(uint4*)(placeholder_1 + ((((int)threadIdx.x) * 8) + 256));
  if (((int)threadIdx.x) < 8) {
    *(uint4*)(placeholder_shared + ((((int)threadIdx.x) * 8) + 512)) = *(uint4*)(placeholder_1 + ((((int)threadIdx.x) * 8) + 512));
  }
  __syncthreads();
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) * 2)] * placeholder_shared[(((int)threadIdx.x) * 2)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1)] * placeholder_shared[((((int)threadIdx.x) * 2) + 1)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((int)threadIdx.x) * 2) + 384)] * placeholder_shared[(((int)threadIdx.x) * 2)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((int)threadIdx.x) * 2) + 385)] * placeholder_shared[((((int)threadIdx.x) * 2) + 1)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((int)threadIdx.x) * 2) + 768)] * placeholder_shared[(((int)threadIdx.x) * 2)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((int)threadIdx.x) * 2) + 769)] * placeholder_shared[((((int)threadIdx.x) * 2) + 1)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1152)] * placeholder_shared[(((int)threadIdx.x) * 2)]));
  depth_conv2d_nhwc_local[7] = (depth_conv2d_nhwc_local[7] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1153)] * placeholder_shared[((((int)threadIdx.x) * 2) + 1)]));
  depth_conv2d_nhwc_local[8] = (depth_conv2d_nhwc_local[8] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1536)] * placeholder_shared[(((int)threadIdx.x) * 2)]));
  depth_conv2d_nhwc_local[9] = (depth_conv2d_nhwc_local[9] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1537)] * placeholder_shared[((((int)threadIdx.x) * 2) + 1)]));
  depth_conv2d_nhwc_local[10] = (depth_conv2d_nhwc_local[10] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1920)] * placeholder_shared[(((int)threadIdx.x) * 2)]));
  depth_conv2d_nhwc_local[11] = (depth_conv2d_nhwc_local[11] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1921)] * placeholder_shared[((((int)threadIdx.x) * 2) + 1)]));
  depth_conv2d_nhwc_local[12] = (depth_conv2d_nhwc_local[12] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2304)] * placeholder_shared[(((int)threadIdx.x) * 2)]));
  depth_conv2d_nhwc_local[13] = (depth_conv2d_nhwc_local[13] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2305)] * placeholder_shared[((((int)threadIdx.x) * 2) + 1)]));
  depth_conv2d_nhwc_local[14] = (depth_conv2d_nhwc_local[14] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2688)] * placeholder_shared[(((int)threadIdx.x) * 2)]));
  depth_conv2d_nhwc_local[15] = (depth_conv2d_nhwc_local[15] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2689)] * placeholder_shared[((((int)threadIdx.x) * 2) + 1)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((int)threadIdx.x) * 2) + 64)] * placeholder_shared[((((int)threadIdx.x) * 2) + 64)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((int)threadIdx.x) * 2) + 65)] * placeholder_shared[((((int)threadIdx.x) * 2) + 65)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((int)threadIdx.x) * 2) + 448)] * placeholder_shared[((((int)threadIdx.x) * 2) + 64)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((int)threadIdx.x) * 2) + 449)] * placeholder_shared[((((int)threadIdx.x) * 2) + 65)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((int)threadIdx.x) * 2) + 832)] * placeholder_shared[((((int)threadIdx.x) * 2) + 64)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((int)threadIdx.x) * 2) + 833)] * placeholder_shared[((((int)threadIdx.x) * 2) + 65)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1216)] * placeholder_shared[((((int)threadIdx.x) * 2) + 64)]));
  depth_conv2d_nhwc_local[7] = (depth_conv2d_nhwc_local[7] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1217)] * placeholder_shared[((((int)threadIdx.x) * 2) + 65)]));
  depth_conv2d_nhwc_local[8] = (depth_conv2d_nhwc_local[8] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1600)] * placeholder_shared[((((int)threadIdx.x) * 2) + 64)]));
  depth_conv2d_nhwc_local[9] = (depth_conv2d_nhwc_local[9] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1601)] * placeholder_shared[((((int)threadIdx.x) * 2) + 65)]));
  depth_conv2d_nhwc_local[10] = (depth_conv2d_nhwc_local[10] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1984)] * placeholder_shared[((((int)threadIdx.x) * 2) + 64)]));
  depth_conv2d_nhwc_local[11] = (depth_conv2d_nhwc_local[11] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1985)] * placeholder_shared[((((int)threadIdx.x) * 2) + 65)]));
  depth_conv2d_nhwc_local[12] = (depth_conv2d_nhwc_local[12] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2368)] * placeholder_shared[((((int)threadIdx.x) * 2) + 64)]));
  depth_conv2d_nhwc_local[13] = (depth_conv2d_nhwc_local[13] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2369)] * placeholder_shared[((((int)threadIdx.x) * 2) + 65)]));
  depth_conv2d_nhwc_local[14] = (depth_conv2d_nhwc_local[14] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2752)] * placeholder_shared[((((int)threadIdx.x) * 2) + 64)]));
  depth_conv2d_nhwc_local[15] = (depth_conv2d_nhwc_local[15] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2753)] * placeholder_shared[((((int)threadIdx.x) * 2) + 65)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((int)threadIdx.x) * 2) + 128)] * placeholder_shared[((((int)threadIdx.x) * 2) + 128)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((int)threadIdx.x) * 2) + 129)] * placeholder_shared[((((int)threadIdx.x) * 2) + 129)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((int)threadIdx.x) * 2) + 512)] * placeholder_shared[((((int)threadIdx.x) * 2) + 128)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((int)threadIdx.x) * 2) + 513)] * placeholder_shared[((((int)threadIdx.x) * 2) + 129)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((int)threadIdx.x) * 2) + 896)] * placeholder_shared[((((int)threadIdx.x) * 2) + 128)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((int)threadIdx.x) * 2) + 897)] * placeholder_shared[((((int)threadIdx.x) * 2) + 129)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1280)] * placeholder_shared[((((int)threadIdx.x) * 2) + 128)]));
  depth_conv2d_nhwc_local[7] = (depth_conv2d_nhwc_local[7] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1281)] * placeholder_shared[((((int)threadIdx.x) * 2) + 129)]));
  depth_conv2d_nhwc_local[8] = (depth_conv2d_nhwc_local[8] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1664)] * placeholder_shared[((((int)threadIdx.x) * 2) + 128)]));
  depth_conv2d_nhwc_local[9] = (depth_conv2d_nhwc_local[9] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1665)] * placeholder_shared[((((int)threadIdx.x) * 2) + 129)]));
  depth_conv2d_nhwc_local[10] = (depth_conv2d_nhwc_local[10] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2048)] * placeholder_shared[((((int)threadIdx.x) * 2) + 128)]));
  depth_conv2d_nhwc_local[11] = (depth_conv2d_nhwc_local[11] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2049)] * placeholder_shared[((((int)threadIdx.x) * 2) + 129)]));
  depth_conv2d_nhwc_local[12] = (depth_conv2d_nhwc_local[12] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2432)] * placeholder_shared[((((int)threadIdx.x) * 2) + 128)]));
  depth_conv2d_nhwc_local[13] = (depth_conv2d_nhwc_local[13] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2433)] * placeholder_shared[((((int)threadIdx.x) * 2) + 129)]));
  depth_conv2d_nhwc_local[14] = (depth_conv2d_nhwc_local[14] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2816)] * placeholder_shared[((((int)threadIdx.x) * 2) + 128)]));
  depth_conv2d_nhwc_local[15] = (depth_conv2d_nhwc_local[15] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2817)] * placeholder_shared[((((int)threadIdx.x) * 2) + 129)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((int)threadIdx.x) * 2) + 192)] * placeholder_shared[((((int)threadIdx.x) * 2) + 192)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((int)threadIdx.x) * 2) + 193)] * placeholder_shared[((((int)threadIdx.x) * 2) + 193)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((int)threadIdx.x) * 2) + 576)] * placeholder_shared[((((int)threadIdx.x) * 2) + 192)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((int)threadIdx.x) * 2) + 577)] * placeholder_shared[((((int)threadIdx.x) * 2) + 193)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((int)threadIdx.x) * 2) + 960)] * placeholder_shared[((((int)threadIdx.x) * 2) + 192)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((int)threadIdx.x) * 2) + 961)] * placeholder_shared[((((int)threadIdx.x) * 2) + 193)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1344)] * placeholder_shared[((((int)threadIdx.x) * 2) + 192)]));
  depth_conv2d_nhwc_local[7] = (depth_conv2d_nhwc_local[7] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1345)] * placeholder_shared[((((int)threadIdx.x) * 2) + 193)]));
  depth_conv2d_nhwc_local[8] = (depth_conv2d_nhwc_local[8] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1728)] * placeholder_shared[((((int)threadIdx.x) * 2) + 192)]));
  depth_conv2d_nhwc_local[9] = (depth_conv2d_nhwc_local[9] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1729)] * placeholder_shared[((((int)threadIdx.x) * 2) + 193)]));
  depth_conv2d_nhwc_local[10] = (depth_conv2d_nhwc_local[10] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2112)] * placeholder_shared[((((int)threadIdx.x) * 2) + 192)]));
  depth_conv2d_nhwc_local[11] = (depth_conv2d_nhwc_local[11] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2113)] * placeholder_shared[((((int)threadIdx.x) * 2) + 193)]));
  depth_conv2d_nhwc_local[12] = (depth_conv2d_nhwc_local[12] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2496)] * placeholder_shared[((((int)threadIdx.x) * 2) + 192)]));
  depth_conv2d_nhwc_local[13] = (depth_conv2d_nhwc_local[13] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2497)] * placeholder_shared[((((int)threadIdx.x) * 2) + 193)]));
  depth_conv2d_nhwc_local[14] = (depth_conv2d_nhwc_local[14] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2880)] * placeholder_shared[((((int)threadIdx.x) * 2) + 192)]));
  depth_conv2d_nhwc_local[15] = (depth_conv2d_nhwc_local[15] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2881)] * placeholder_shared[((((int)threadIdx.x) * 2) + 193)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((int)threadIdx.x) * 2) + 256)] * placeholder_shared[((((int)threadIdx.x) * 2) + 256)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((int)threadIdx.x) * 2) + 257)] * placeholder_shared[((((int)threadIdx.x) * 2) + 257)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((int)threadIdx.x) * 2) + 640)] * placeholder_shared[((((int)threadIdx.x) * 2) + 256)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((int)threadIdx.x) * 2) + 641)] * placeholder_shared[((((int)threadIdx.x) * 2) + 257)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1024)] * placeholder_shared[((((int)threadIdx.x) * 2) + 256)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1025)] * placeholder_shared[((((int)threadIdx.x) * 2) + 257)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1408)] * placeholder_shared[((((int)threadIdx.x) * 2) + 256)]));
  depth_conv2d_nhwc_local[7] = (depth_conv2d_nhwc_local[7] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1409)] * placeholder_shared[((((int)threadIdx.x) * 2) + 257)]));
  depth_conv2d_nhwc_local[8] = (depth_conv2d_nhwc_local[8] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1792)] * placeholder_shared[((((int)threadIdx.x) * 2) + 256)]));
  depth_conv2d_nhwc_local[9] = (depth_conv2d_nhwc_local[9] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1793)] * placeholder_shared[((((int)threadIdx.x) * 2) + 257)]));
  depth_conv2d_nhwc_local[10] = (depth_conv2d_nhwc_local[10] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2176)] * placeholder_shared[((((int)threadIdx.x) * 2) + 256)]));
  depth_conv2d_nhwc_local[11] = (depth_conv2d_nhwc_local[11] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2177)] * placeholder_shared[((((int)threadIdx.x) * 2) + 257)]));
  depth_conv2d_nhwc_local[12] = (depth_conv2d_nhwc_local[12] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2560)] * placeholder_shared[((((int)threadIdx.x) * 2) + 256)]));
  depth_conv2d_nhwc_local[13] = (depth_conv2d_nhwc_local[13] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2561)] * placeholder_shared[((((int)threadIdx.x) * 2) + 257)]));
  depth_conv2d_nhwc_local[14] = (depth_conv2d_nhwc_local[14] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2944)] * placeholder_shared[((((int)threadIdx.x) * 2) + 256)]));
  depth_conv2d_nhwc_local[15] = (depth_conv2d_nhwc_local[15] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2945)] * placeholder_shared[((((int)threadIdx.x) * 2) + 257)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((int)threadIdx.x) * 2) + 320)] * placeholder_shared[((((int)threadIdx.x) * 2) + 320)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((int)threadIdx.x) * 2) + 321)] * placeholder_shared[((((int)threadIdx.x) * 2) + 321)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((int)threadIdx.x) * 2) + 704)] * placeholder_shared[((((int)threadIdx.x) * 2) + 320)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((int)threadIdx.x) * 2) + 705)] * placeholder_shared[((((int)threadIdx.x) * 2) + 321)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1088)] * placeholder_shared[((((int)threadIdx.x) * 2) + 320)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1089)] * placeholder_shared[((((int)threadIdx.x) * 2) + 321)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1472)] * placeholder_shared[((((int)threadIdx.x) * 2) + 320)]));
  depth_conv2d_nhwc_local[7] = (depth_conv2d_nhwc_local[7] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1473)] * placeholder_shared[((((int)threadIdx.x) * 2) + 321)]));
  depth_conv2d_nhwc_local[8] = (depth_conv2d_nhwc_local[8] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1856)] * placeholder_shared[((((int)threadIdx.x) * 2) + 320)]));
  depth_conv2d_nhwc_local[9] = (depth_conv2d_nhwc_local[9] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1857)] * placeholder_shared[((((int)threadIdx.x) * 2) + 321)]));
  depth_conv2d_nhwc_local[10] = (depth_conv2d_nhwc_local[10] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2240)] * placeholder_shared[((((int)threadIdx.x) * 2) + 320)]));
  depth_conv2d_nhwc_local[11] = (depth_conv2d_nhwc_local[11] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2241)] * placeholder_shared[((((int)threadIdx.x) * 2) + 321)]));
  depth_conv2d_nhwc_local[12] = (depth_conv2d_nhwc_local[12] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2624)] * placeholder_shared[((((int)threadIdx.x) * 2) + 320)]));
  depth_conv2d_nhwc_local[13] = (depth_conv2d_nhwc_local[13] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2625)] * placeholder_shared[((((int)threadIdx.x) * 2) + 321)]));
  depth_conv2d_nhwc_local[14] = (depth_conv2d_nhwc_local[14] + (PadInput_shared[((((int)threadIdx.x) * 2) + 3008)] * placeholder_shared[((((int)threadIdx.x) * 2) + 320)]));
  depth_conv2d_nhwc_local[15] = (depth_conv2d_nhwc_local[15] + (PadInput_shared[((((int)threadIdx.x) * 2) + 3009)] * placeholder_shared[((((int)threadIdx.x) * 2) + 321)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((int)threadIdx.x) * 2) + 384)] * placeholder_shared[((((int)threadIdx.x) * 2) + 384)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((int)threadIdx.x) * 2) + 385)] * placeholder_shared[((((int)threadIdx.x) * 2) + 385)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((int)threadIdx.x) * 2) + 768)] * placeholder_shared[((((int)threadIdx.x) * 2) + 384)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((int)threadIdx.x) * 2) + 769)] * placeholder_shared[((((int)threadIdx.x) * 2) + 385)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1152)] * placeholder_shared[((((int)threadIdx.x) * 2) + 384)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1153)] * placeholder_shared[((((int)threadIdx.x) * 2) + 385)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1536)] * placeholder_shared[((((int)threadIdx.x) * 2) + 384)]));
  depth_conv2d_nhwc_local[7] = (depth_conv2d_nhwc_local[7] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1537)] * placeholder_shared[((((int)threadIdx.x) * 2) + 385)]));
  depth_conv2d_nhwc_local[8] = (depth_conv2d_nhwc_local[8] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1920)] * placeholder_shared[((((int)threadIdx.x) * 2) + 384)]));
  depth_conv2d_nhwc_local[9] = (depth_conv2d_nhwc_local[9] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1921)] * placeholder_shared[((((int)threadIdx.x) * 2) + 385)]));
  depth_conv2d_nhwc_local[10] = (depth_conv2d_nhwc_local[10] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2304)] * placeholder_shared[((((int)threadIdx.x) * 2) + 384)]));
  depth_conv2d_nhwc_local[11] = (depth_conv2d_nhwc_local[11] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2305)] * placeholder_shared[((((int)threadIdx.x) * 2) + 385)]));
  depth_conv2d_nhwc_local[12] = (depth_conv2d_nhwc_local[12] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2688)] * placeholder_shared[((((int)threadIdx.x) * 2) + 384)]));
  depth_conv2d_nhwc_local[13] = (depth_conv2d_nhwc_local[13] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2689)] * placeholder_shared[((((int)threadIdx.x) * 2) + 385)]));
  depth_conv2d_nhwc_local[14] = (depth_conv2d_nhwc_local[14] + (PadInput_shared[((((int)threadIdx.x) * 2) + 3072)] * placeholder_shared[((((int)threadIdx.x) * 2) + 384)]));
  depth_conv2d_nhwc_local[15] = (depth_conv2d_nhwc_local[15] + (PadInput_shared[((((int)threadIdx.x) * 2) + 3073)] * placeholder_shared[((((int)threadIdx.x) * 2) + 385)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((int)threadIdx.x) * 2) + 448)] * placeholder_shared[((((int)threadIdx.x) * 2) + 448)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((int)threadIdx.x) * 2) + 449)] * placeholder_shared[((((int)threadIdx.x) * 2) + 449)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((int)threadIdx.x) * 2) + 832)] * placeholder_shared[((((int)threadIdx.x) * 2) + 448)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((int)threadIdx.x) * 2) + 833)] * placeholder_shared[((((int)threadIdx.x) * 2) + 449)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1216)] * placeholder_shared[((((int)threadIdx.x) * 2) + 448)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1217)] * placeholder_shared[((((int)threadIdx.x) * 2) + 449)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1600)] * placeholder_shared[((((int)threadIdx.x) * 2) + 448)]));
  depth_conv2d_nhwc_local[7] = (depth_conv2d_nhwc_local[7] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1601)] * placeholder_shared[((((int)threadIdx.x) * 2) + 449)]));
  depth_conv2d_nhwc_local[8] = (depth_conv2d_nhwc_local[8] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1984)] * placeholder_shared[((((int)threadIdx.x) * 2) + 448)]));
  depth_conv2d_nhwc_local[9] = (depth_conv2d_nhwc_local[9] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1985)] * placeholder_shared[((((int)threadIdx.x) * 2) + 449)]));
  depth_conv2d_nhwc_local[10] = (depth_conv2d_nhwc_local[10] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2368)] * placeholder_shared[((((int)threadIdx.x) * 2) + 448)]));
  depth_conv2d_nhwc_local[11] = (depth_conv2d_nhwc_local[11] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2369)] * placeholder_shared[((((int)threadIdx.x) * 2) + 449)]));
  depth_conv2d_nhwc_local[12] = (depth_conv2d_nhwc_local[12] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2752)] * placeholder_shared[((((int)threadIdx.x) * 2) + 448)]));
  depth_conv2d_nhwc_local[13] = (depth_conv2d_nhwc_local[13] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2753)] * placeholder_shared[((((int)threadIdx.x) * 2) + 449)]));
  depth_conv2d_nhwc_local[14] = (depth_conv2d_nhwc_local[14] + (PadInput_shared[((((int)threadIdx.x) * 2) + 3136)] * placeholder_shared[((((int)threadIdx.x) * 2) + 448)]));
  depth_conv2d_nhwc_local[15] = (depth_conv2d_nhwc_local[15] + (PadInput_shared[((((int)threadIdx.x) * 2) + 3137)] * placeholder_shared[((((int)threadIdx.x) * 2) + 449)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((((int)threadIdx.x) * 2) + 512)] * placeholder_shared[((((int)threadIdx.x) * 2) + 512)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[((((int)threadIdx.x) * 2) + 513)] * placeholder_shared[((((int)threadIdx.x) * 2) + 513)]));
  depth_conv2d_nhwc_local[2] = (depth_conv2d_nhwc_local[2] + (PadInput_shared[((((int)threadIdx.x) * 2) + 896)] * placeholder_shared[((((int)threadIdx.x) * 2) + 512)]));
  depth_conv2d_nhwc_local[3] = (depth_conv2d_nhwc_local[3] + (PadInput_shared[((((int)threadIdx.x) * 2) + 897)] * placeholder_shared[((((int)threadIdx.x) * 2) + 513)]));
  depth_conv2d_nhwc_local[4] = (depth_conv2d_nhwc_local[4] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1280)] * placeholder_shared[((((int)threadIdx.x) * 2) + 512)]));
  depth_conv2d_nhwc_local[5] = (depth_conv2d_nhwc_local[5] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1281)] * placeholder_shared[((((int)threadIdx.x) * 2) + 513)]));
  depth_conv2d_nhwc_local[6] = (depth_conv2d_nhwc_local[6] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1664)] * placeholder_shared[((((int)threadIdx.x) * 2) + 512)]));
  depth_conv2d_nhwc_local[7] = (depth_conv2d_nhwc_local[7] + (PadInput_shared[((((int)threadIdx.x) * 2) + 1665)] * placeholder_shared[((((int)threadIdx.x) * 2) + 513)]));
  depth_conv2d_nhwc_local[8] = (depth_conv2d_nhwc_local[8] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2048)] * placeholder_shared[((((int)threadIdx.x) * 2) + 512)]));
  depth_conv2d_nhwc_local[9] = (depth_conv2d_nhwc_local[9] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2049)] * placeholder_shared[((((int)threadIdx.x) * 2) + 513)]));
  depth_conv2d_nhwc_local[10] = (depth_conv2d_nhwc_local[10] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2432)] * placeholder_shared[((((int)threadIdx.x) * 2) + 512)]));
  depth_conv2d_nhwc_local[11] = (depth_conv2d_nhwc_local[11] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2433)] * placeholder_shared[((((int)threadIdx.x) * 2) + 513)]));
  depth_conv2d_nhwc_local[12] = (depth_conv2d_nhwc_local[12] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2816)] * placeholder_shared[((((int)threadIdx.x) * 2) + 512)]));
  depth_conv2d_nhwc_local[13] = (depth_conv2d_nhwc_local[13] + (PadInput_shared[((((int)threadIdx.x) * 2) + 2817)] * placeholder_shared[((((int)threadIdx.x) * 2) + 513)]));
  depth_conv2d_nhwc_local[14] = (depth_conv2d_nhwc_local[14] + (PadInput_shared[((((int)threadIdx.x) * 2) + 3200)] * placeholder_shared[((((int)threadIdx.x) * 2) + 512)]));
  depth_conv2d_nhwc_local[15] = (depth_conv2d_nhwc_local[15] + (PadInput_shared[((((int)threadIdx.x) * 2) + 3201)] * placeholder_shared[((((int)threadIdx.x) * 2) + 513)]));
  depth_conv2d_nhwc[((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2))] = depth_conv2d_nhwc_local[0];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 1)] = depth_conv2d_nhwc_local[1];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 3584)] = depth_conv2d_nhwc_local[2];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 3585)] = depth_conv2d_nhwc_local[3];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 7168)] = depth_conv2d_nhwc_local[4];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 7169)] = depth_conv2d_nhwc_local[5];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 10752)] = depth_conv2d_nhwc_local[6];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 10753)] = depth_conv2d_nhwc_local[7];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 14336)] = depth_conv2d_nhwc_local[8];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 14337)] = depth_conv2d_nhwc_local[9];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 17920)] = depth_conv2d_nhwc_local[10];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 17921)] = depth_conv2d_nhwc_local[11];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 21504)] = depth_conv2d_nhwc_local[12];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 21505)] = depth_conv2d_nhwc_local[13];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 25088)] = depth_conv2d_nhwc_local[14];
  depth_conv2d_nhwc[(((((((int)blockIdx.x) / 56) * 28672) + ((((int)blockIdx.x) % 56) * 64)) + (((int)threadIdx.x) * 2)) + 25089)] = depth_conv2d_nhwc_local[15];
}


The time of DEP is 0.009 ms
2025-07-22 07:31:43 [INFO] Logging directory: /tmp/tmpjwawry0m/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:34:27 [DEBUG] XGB iter   0: tr-p-rmse: 0.667033	tr-a-peak@32: 1.000000	tr-rmse: 0.392547	tr-rmse: 0.392547
2025-07-22 07:34:30 [DEBUG] XGB iter  25: tr-p-rmse: 0.166377	tr-a-peak@32: 1.000000	tr-rmse: 0.431597	tr-rmse: 0.431597
2025-07-22 07:34:30 [DEBUG] XGB iter  50: tr-p-rmse: 0.166377	tr-a-peak@32: 1.000000	tr-rmse: 0.431597	tr-rmse: 0.431597
2025-07-22 07:34:30 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.16638	tr-a-peak@32:1.00000	tr-rmse:0.43160	tr-rmse:0.43160 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:36:58 [DEBUG] XGB validation: p-rmse: 0.241119	a-peak@32: 0.949401
2025-07-22 07:36:58 [DEBUG] XGB iter   0: tr-p-rmse: 0.647046	tr-a-peak@32: 1.000000	tr-rmse: 0.385284	tr-rmse: 0.385284
2025-07-22 07:37:00 [DEBUG] XGB iter  25: tr-p-rmse: 0.174556	tr-a-peak@32: 1.000000	tr-rmse: 0.422338	tr-rmse: 0.422338
2025-07-22 07:37:01 [DEBUG] XGB iter  50: tr-p-rmse: 0.174556	tr-a-peak@32: 1.000000	tr-rmse: 0.422338	tr-rmse: 0.422338
2025-07-22 07:37:01 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.17456	tr-a-peak@32:1.00000	tr-rmse:0.42234	tr-rmse:0.42234 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:40:23 [DEBUG] XGB validation: p-rmse: 0.439301	a-peak@32: 0.910276
2025-07-22 07:40:23 [DEBUG] XGB iter   0: tr-p-rmse: 0.521973	tr-a-peak@32: 0.883256	tr-rmse: 0.493199	tr-rmse: 0.493199
2025-07-22 07:40:23 [DEBUG] XGB iter  25: tr-p-rmse: 0.124735	tr-a-peak@32: 1.000000	tr-rmse: 0.544131	tr-rmse: 0.544131
2025-07-22 07:40:23 [DEBUG] XGB iter  50: tr-p-rmse: 0.124735	tr-a-peak@32: 1.000000	tr-rmse: 0.544131	tr-rmse: 0.544131
2025-07-22 07:40:23 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.12469	tr-a-peak@32:1.00000	tr-rmse:0.54411	tr-rmse:0.54411 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:43:24 [DEBUG] XGB validation: p-rmse: 0.220131	a-peak@32: 0.947845
2025-07-22 07:43:24 [DEBUG] XGB iter   0: tr-p-rmse: 0.482808	tr-a-peak@32: 0.904300	tr-rmse: 0.550857	tr-rmse: 0.550857
2025-07-22 07:43:24 [DEBUG] XGB iter  25: tr-p-rmse: 0.110669	tr-a-peak@32: 0.998980	tr-rmse: 0.600918	tr-rmse: 0.600918
2025-07-22 07:43:24 [DEBUG] XGB iter  50: tr-p-rmse: 0.110669	tr-a-peak@32: 0.998980	tr-rmse: 0.600918	tr-rmse: 0.600918
2025-07-22 07:43:24 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.11067	tr-a-peak@32:0.99898	tr-rmse:0.60092	tr-rmse:0.60092 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:46:18 [DEBUG] XGB validation: p-rmse: 0.136961	a-peak@32: 0.969881
2025-07-22 07:46:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.456556	tr-a-peak@32: 0.864183	tr-rmse: 0.539350	tr-rmse: 0.539350
2025-07-22 07:46:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.101738	tr-a-peak@32: 1.000000	tr-rmse: 0.591636	tr-rmse: 0.591636
2025-07-22 07:46:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.101738	tr-a-peak@32: 1.000000	tr-rmse: 0.591636	tr-rmse: 0.591636
2025-07-22 07:46:18 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.10174	tr-a-peak@32:1.00000	tr-rmse:0.59164	tr-rmse:0.59164 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:49:09 [DEBUG] XGB validation: p-rmse: 0.141036	a-peak@32: 0.985558
2025-07-22 07:49:09 [DEBUG] XGB iter   0: tr-p-rmse: 0.449020	tr-a-peak@32: 0.907088	tr-rmse: 0.560924	tr-rmse: 0.560924
2025-07-22 07:49:09 [DEBUG] XGB iter  25: tr-p-rmse: 0.098776	tr-a-peak@32: 0.998823	tr-rmse: 0.612528	tr-rmse: 0.612528
2025-07-22 07:49:09 [DEBUG] XGB iter  50: tr-p-rmse: 0.098776	tr-a-peak@32: 0.998823	tr-rmse: 0.612528	tr-rmse: 0.612528
2025-07-22 07:49:09 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.09874	tr-a-peak@32:0.99882	tr-rmse:0.61243	tr-rmse:0.61243 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:51:36 [DEBUG] XGB validation: p-rmse: 0.138826	a-peak@32: 0.987234
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:54:08 [DEBUG] XGB validation: p-rmse: 0.150968	a-peak@32: 0.982484
2025-07-22 07:54:08 [DEBUG] XGB iter   0: tr-p-rmse: 0.414206	tr-a-peak@32: 0.999163	tr-rmse: 0.598238	tr-rmse: 0.598238
2025-07-22 07:54:08 [DEBUG] XGB iter  25: tr-p-rmse: 0.103550	tr-a-peak@32: 0.999591	tr-rmse: 0.650283	tr-rmse: 0.650283
2025-07-22 07:54:08 [DEBUG] XGB iter  50: tr-p-rmse: 0.103550	tr-a-peak@32: 0.999591	tr-rmse: 0.650283	tr-rmse: 0.650283
2025-07-22 07:54:08 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.10355	tr-a-peak@32:0.99959	tr-rmse:0.65028	tr-rmse:0.65028 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:56:38 [DEBUG] XGB validation: p-rmse: 0.134664	a-peak@32: 0.728077
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 07:59:30 [DEBUG] XGB validation: p-rmse: 0.306553	a-peak@32: 0.874580
2025-07-22 07:59:30 [DEBUG] XGB iter   0: tr-p-rmse: 0.448993	tr-a-peak@32: 0.878650	tr-rmse: 0.437246	tr-rmse: 0.437246
2025-07-22 07:59:30 [DEBUG] XGB iter  25: tr-p-rmse: 0.084029	tr-a-peak@32: 0.999108	tr-rmse: 0.498968	tr-rmse: 0.498968
2025-07-22 07:59:30 [DEBUG] XGB iter  50: tr-p-rmse: 0.084029	tr-a-peak@32: 0.999108	tr-rmse: 0.498968	tr-rmse: 0.498968
2025-07-22 07:59:30 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.08403	tr-a-peak@32:0.99911	tr-rmse:0.49897	tr-rmse:0.49897 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:01:57 [DEBUG] XGB validation: p-rmse: 0.246088	a-peak@32: 0.883736
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:04:23 [DEBUG] XGB validation: p-rmse: 0.249132	a-peak@32: 0.810264
2025-07-22 08:04:23 [DEBUG] XGB iter   0: tr-p-rmse: 0.463962	tr-a-peak@32: 0.947129	tr-rmse: 0.382556	tr-rmse: 0.382556
2025-07-22 08:04:23 [DEBUG] XGB iter  25: tr-p-rmse: 0.064524	tr-a-peak@32: 0.978980	tr-rmse: 0.445688	tr-rmse: 0.445688
2025-07-22 08:04:23 [DEBUG] XGB iter  50: tr-p-rmse: 0.064524	tr-a-peak@32: 0.978980	tr-rmse: 0.445688	tr-rmse: 0.445688
2025-07-22 08:04:23 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.06452	tr-a-peak@32:0.97898	tr-rmse:0.44569	tr-rmse:0.44569 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:06:40 [DEBUG] XGB validation: p-rmse: 0.145062	a-peak@32: 0.869279
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:09:06 [DEBUG] XGB validation: p-rmse: 0.416998	a-peak@32: 0.650629
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:11:25 [DEBUG] XGB validation: p-rmse: 0.206706	a-peak@32: 0.948094
2025-07-22 08:11:25 [DEBUG] XGB iter   0: tr-p-rmse: 0.438228	tr-a-peak@32: 0.846426	tr-rmse: 0.388864	tr-rmse: 0.388864
2025-07-22 08:11:25 [DEBUG] XGB iter  25: tr-p-rmse: 0.091438	tr-a-peak@32: 0.929313	tr-rmse: 0.451503	tr-rmse: 0.451503
2025-07-22 08:11:25 [DEBUG] XGB iter  50: tr-p-rmse: 0.091438	tr-a-peak@32: 0.929313	tr-rmse: 0.451503	tr-rmse: 0.451503
2025-07-22 08:11:25 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.09144	tr-a-peak@32:0.92931	tr-rmse:0.45150	tr-rmse:0.45150 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:13:59 [DEBUG] XGB validation: p-rmse: 0.050917	a-peak@32: 0.993603
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_transpose_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_transpose_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  half conv2d_transpose_nhwc_local[4];
  __shared__ half PadInput_shared[5120];
  __shared__ half weight_shared[16384];
  conv2d_transpose_nhwc_local[0] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[2] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[1] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[3] = __float2half_rn(0.000000e+00f);
  for (int rc_0 = 0; rc_0 < 2; ++rc_0) {
    __syncthreads();
    PadInput_shared[(((int)threadIdx.x) * 2)] = __float2half_rn(0.000000e+00f);
    PadInput_shared[((((int)threadIdx.x) * 2) + 1)] = __float2half_rn(0.000000e+00f);
    PadInput_shared[((((int)threadIdx.x) * 2) + 256)] = __float2half_rn(0.000000e+00f);
    PadInput_shared[((((int)threadIdx.x) * 2) + 257)] = __float2half_rn(0.000000e+00f);
    half condval;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) - 256)];
    } else {
      condval = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 512)] = condval;
    half condval_1;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_1 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) - 255)];
    } else {
      condval_1 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 513)] = condval_1;
    half condval_2;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_2 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 256)];
    } else {
      condval_2 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 768)] = condval_2;
    half condval_3;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_3 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 257)];
    } else {
      condval_3 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 769)] = condval_3;
    half condval_4;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_4 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 1792)];
    } else {
      condval_4 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 1024)] = condval_4;
    half condval_5;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_5 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 1793)];
    } else {
      condval_5 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 1025)] = condval_5;
    half condval_6;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_6 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 2304)];
    } else {
      condval_6 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 1280)] = condval_6;
    half condval_7;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_7 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 2305)];
    } else {
      condval_7 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 1281)] = condval_7;
    half condval_8;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_8 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 3840)];
    } else {
      condval_8 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 1536)] = condval_8;
    half condval_9;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_9 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 3841)];
    } else {
      condval_9 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 1537)] = condval_9;
    half condval_10;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_10 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 4352)];
    } else {
      condval_10 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 1792)] = condval_10;
    half condval_11;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_11 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 4353)];
    } else {
      condval_11 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 1793)] = condval_11;
    half condval_12;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_12 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 5888)];
    } else {
      condval_12 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 2048)] = condval_12;
    half condval_13;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_13 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 5889)];
    } else {
      condval_13 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 2049)] = condval_13;
    half condval_14;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_14 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 6400)];
    } else {
      condval_14 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 2304)] = condval_14;
    half condval_15;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_15 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 6401)];
    } else {
      condval_15 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 2305)] = condval_15;
    half condval_16;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_16 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 7936)];
    } else {
      condval_16 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 2560)] = condval_16;
    half condval_17;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_17 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 7937)];
    } else {
      condval_17 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 2561)] = condval_17;
    half condval_18;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_18 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 8448)];
    } else {
      condval_18 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 2816)] = condval_18;
    half condval_19;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_19 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 8449)];
    } else {
      condval_19 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 2817)] = condval_19;
    half condval_20;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_20 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 9984)];
    } else {
      condval_20 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 3072)] = condval_20;
    half condval_21;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_21 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 9985)];
    } else {
      condval_21 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 3073)] = condval_21;
    half condval_22;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_22 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 10496)];
    } else {
      condval_22 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 3328)] = condval_22;
    half condval_23;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_23 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 10497)];
    } else {
      condval_23 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 3329)] = condval_23;
    half condval_24;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_24 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 12032)];
    } else {
      condval_24 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 3584)] = condval_24;
    half condval_25;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_25 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 12033)];
    } else {
      condval_25 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 3585)] = condval_25;
    half condval_26;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_26 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 12544)];
    } else {
      condval_26 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 3840)] = condval_26;
    half condval_27;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_27 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 12545)];
    } else {
      condval_27 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 3841)] = condval_27;
    half condval_28;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_28 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 14080)];
    } else {
      condval_28 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 4096)] = condval_28;
    half condval_29;
    if ((1 <= (((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)))) {
      condval_29 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 14081)];
    } else {
      condval_29 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 4097)] = condval_29;
    half condval_30;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_30 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 14592)];
    } else {
      condval_30 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 4352)] = condval_30;
    half condval_31;
    if (((((((int)blockIdx.x) >> 4) * 2) + (((int)threadIdx.x) >> 6)) < 7)) {
      condval_31 = inputs[((((((((int)blockIdx.x) >> 4) * 512) + ((((int)threadIdx.x) >> 6) * 256)) + (rc_0 * 128)) + ((((int)threadIdx.x) & 63) * 2)) + 14593)];
    } else {
      condval_31 = __float2half_rn(0.000000e+00f);
    }
    PadInput_shared[((((int)threadIdx.x) * 2) + 4353)] = condval_31;
    PadInput_shared[((((int)threadIdx.x) * 2) + 4608)] = __float2half_rn(0.000000e+00f);
    PadInput_shared[((((int)threadIdx.x) * 2) + 4609)] = __float2half_rn(0.000000e+00f);
    PadInput_shared[((((int)threadIdx.x) * 2) + 4864)] = __float2half_rn(0.000000e+00f);
    PadInput_shared[((((int)threadIdx.x) * 2) + 4865)] = __float2half_rn(0.000000e+00f);
    *(half2*)(weight_shared + (((int)threadIdx.x) * 2)) = *(half2*)(weight + ((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 256)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 4096));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 512)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 8192));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 768)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 12288));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 1024)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 32768));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 1280)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 36864));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 1536)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 40960));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 1792)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 45056));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 2048)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 65536));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 2304)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 69632));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 2560)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 73728));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 2816)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 77824));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 3072)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 98304));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 3328)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 102400));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 3584)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 106496));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 3840)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 110592));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 4096)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 131072));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 4352)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 135168));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 4608)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 139264));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 4864)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 143360));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 5120)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 163840));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 5376)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 167936));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 5632)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 172032));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 5888)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 176128));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 6144)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 196608));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 6400)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 200704));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 6656)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 204800));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 6912)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 208896));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 7168)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 229376));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 7424)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 233472));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 7680)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 237568));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 7936)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 241664));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 8192)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 262144));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 8448)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 266240));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 8704)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 270336));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 8960)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 274432));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 9216)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 294912));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 9472)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 299008));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 9728)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 303104));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 9984)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 307200));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 10240)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 327680));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 10496)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 331776));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 10752)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 335872));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 11008)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 339968));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 11264)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 360448));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 11520)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 364544));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 11776)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 368640));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 12032)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 372736));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 12288)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 393216));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 12544)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 397312));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 12800)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 401408));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 13056)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 405504));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 13312)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 425984));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 13568)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 430080));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 13824)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 434176));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 14080)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 438272));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 14336)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 458752));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 14592)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 462848));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 14848)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 466944));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 15104)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 471040));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 15360)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 491520));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 15616)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 495616));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 15872)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 499712));
    *(half2*)(weight_shared + ((((int)threadIdx.x) * 2) + 16128)) = *(half2*)(weight + (((((rc_0 * 16384) + ((((int)threadIdx.x) >> 2) * 128)) + ((((int)blockIdx.x) & 15) * 8)) + ((((int)threadIdx.x) & 3) * 2)) + 503808));
    __syncthreads();
    for (int rh_1 = 0; rh_1 < 2; ++rh_1) {
      for (int rw_1 = 0; rw_1 < 4; ++rw_1) {
        for (int rc_1 = 0; rc_1 < 128; ++rc_1) {
          bool cse_var_2 = ((rw_1 % 2) == 0);
          bool cse_var_1 = (((rw_1 + 1) % 2) == 0);
          half condval_32;
          if (cse_var_2) {
            condval_32 = PadInput_shared[((((((((int)threadIdx.x) >> 4) * 512) + (rh_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 128)) + ((rw_1 >> 1) * 128)) + rc_1)];
          } else {
            condval_32 = __float2half_rn(0.000000e+00f);
          }
          conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_32 * weight_shared[(((((rc_1 * 8) + (((int)threadIdx.x) & 7)) + 15360) - (rw_1 * 1024)) - (rh_1 * 8192))]));
          half condval_33;
          if (cse_var_2) {
            condval_33 = PadInput_shared[(((((((((int)threadIdx.x) >> 4) * 512) + (rh_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 128)) + ((rw_1 >> 1) * 128)) + rc_1) + 512)];
          } else {
            condval_33 = __float2half_rn(0.000000e+00f);
          }
          conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (condval_33 * weight_shared[(((((rc_1 * 8) + (((int)threadIdx.x) & 7)) + 11264) - (rw_1 * 1024)) - (rh_1 * 8192))]));
          half condval_34;
          if (cse_var_1) {
            condval_34 = PadInput_shared[((((((((int)threadIdx.x) >> 4) * 512) + (rh_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 128)) + (((rw_1 + 1) >> 1) * 128)) + rc_1)];
          } else {
            condval_34 = __float2half_rn(0.000000e+00f);
          }
          conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_34 * weight_shared[(((((rc_1 * 8) + (((int)threadIdx.x) & 7)) + 15360) - (rw_1 * 1024)) - (rh_1 * 8192))]));
          half condval_35;
          if (cse_var_1) {
            condval_35 = PadInput_shared[(((((((((int)threadIdx.x) >> 4) * 512) + (rh_1 * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 128)) + (((rw_1 + 1) >> 1) * 128)) + rc_1) + 512)];
          } else {
            condval_35 = __float2half_rn(0.000000e+00f);
          }
          conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (condval_35 * weight_shared[(((((rc_1 * 8) + (((int)threadIdx.x) & 7)) + 11264) - (rw_1 * 1024)) - (rh_1 * 8192))]));
        }
      }
    }
  }
  conv2d_transpose_nhwc[((((((((int)threadIdx.x) >> 4) * 4096) + ((((int)blockIdx.x) >> 4) * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 256)) + ((((int)blockIdx.x) & 15) * 8)) + (((int)threadIdx.x) & 7))] = conv2d_transpose_nhwc_local[0];
  conv2d_transpose_nhwc[(((((((((int)threadIdx.x) >> 4) * 4096) + ((((int)blockIdx.x) >> 4) * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 256)) + ((((int)blockIdx.x) & 15) * 8)) + (((int)threadIdx.x) & 7)) + 128)] = conv2d_transpose_nhwc_local[1];
  conv2d_transpose_nhwc[(((((((((int)threadIdx.x) >> 4) * 4096) + ((((int)blockIdx.x) >> 4) * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 256)) + ((((int)blockIdx.x) & 15) * 8)) + (((int)threadIdx.x) & 7)) + 2048)] = conv2d_transpose_nhwc_local[2];
  conv2d_transpose_nhwc[(((((((((int)threadIdx.x) >> 4) * 4096) + ((((int)blockIdx.x) >> 4) * 512)) + (((((int)threadIdx.x) & 15) >> 3) * 256)) + ((((int)blockIdx.x) & 15) * 8)) + (((int)threadIdx.x) & 7)) + 2176)] = conv2d_transpose_nhwc_local[3];
}


The time of T2D is 0.061 ms
2025-07-22 08:14:00 [INFO] Logging directory: /tmp/tmpqsxuuqhz/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:17:45 [DEBUG] XGB iter   0: tr-p-rmse: 0.605229	tr-a-peak@32: 1.000000	tr-rmse: 0.247152	tr-rmse: 0.247152
2025-07-22 08:17:45 [DEBUG] XGB iter  25: tr-p-rmse: 0.048394	tr-a-peak@32: 1.000000	tr-rmse: 0.301637	tr-rmse: 0.301637
2025-07-22 08:17:45 [DEBUG] XGB iter  50: tr-p-rmse: 0.048394	tr-a-peak@32: 1.000000	tr-rmse: 0.301637	tr-rmse: 0.301637
2025-07-22 08:17:45 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.04839	tr-a-peak@32:1.00000	tr-rmse:0.30164	tr-rmse:0.30164 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:21:20 [DEBUG] XGB validation: p-rmse: 0.133576	a-peak@32: 0.999270
2025-07-22 08:21:20 [DEBUG] XGB iter   0: tr-p-rmse: 0.610063	tr-a-peak@32: 0.959981	tr-rmse: 0.226366	tr-rmse: 0.226366
2025-07-22 08:21:21 [DEBUG] XGB iter  25: tr-p-rmse: 0.051141	tr-a-peak@32: 1.000000	tr-rmse: 0.285987	tr-rmse: 0.285987
2025-07-22 08:21:21 [DEBUG] XGB iter  50: tr-p-rmse: 0.051141	tr-a-peak@32: 1.000000	tr-rmse: 0.285987	tr-rmse: 0.285987
2025-07-22 08:21:21 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05114	tr-a-peak@32:1.00000	tr-rmse:0.28599	tr-rmse:0.28599 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:26:03 [DEBUG] XGB validation: p-rmse: 0.447786	a-peak@32: 0.911652
2025-07-22 08:26:03 [DEBUG] XGB iter   0: tr-p-rmse: 0.565654	tr-a-peak@32: 0.862733	tr-rmse: 0.285014	tr-rmse: 0.285014
2025-07-22 08:26:03 [DEBUG] XGB iter  25: tr-p-rmse: 0.063595	tr-a-peak@32: 0.986847	tr-rmse: 0.367559	tr-rmse: 0.367559
2025-07-22 08:26:03 [DEBUG] XGB iter  50: tr-p-rmse: 0.063595	tr-a-peak@32: 0.986847	tr-rmse: 0.367559	tr-rmse: 0.367559
2025-07-22 08:26:03 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.06359	tr-a-peak@32:0.98685	tr-rmse:0.36756	tr-rmse:0.36756 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:30:31 [DEBUG] XGB validation: p-rmse: 0.156074	a-peak@32: 0.951416
2025-07-22 08:30:31 [DEBUG] XGB iter   0: tr-p-rmse: 0.554448	tr-a-peak@32: 0.644408	tr-rmse: 0.250695	tr-rmse: 0.250695
2025-07-22 08:30:31 [DEBUG] XGB iter  25: tr-p-rmse: 0.066649	tr-a-peak@32: 0.991956	tr-rmse: 0.343670	tr-rmse: 0.343670
2025-07-22 08:30:31 [DEBUG] XGB iter  50: tr-p-rmse: 0.066649	tr-a-peak@32: 0.991956	tr-rmse: 0.343670	tr-rmse: 0.343670
2025-07-22 08:30:31 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.06665	tr-a-peak@32:0.99196	tr-rmse:0.34367	tr-rmse:0.34367 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:34:58 [DEBUG] XGB validation: p-rmse: 0.159880	a-peak@32: 0.757533
2025-07-22 08:34:58 [DEBUG] XGB iter   0: tr-p-rmse: 0.531037	tr-a-peak@32: 0.692656	tr-rmse: 0.261454	tr-rmse: 0.261454
2025-07-22 08:34:58 [DEBUG] XGB iter  25: tr-p-rmse: 0.073725	tr-a-peak@32: 0.967273	tr-rmse: 0.360911	tr-rmse: 0.360911
2025-07-22 08:34:58 [DEBUG] XGB iter  50: tr-p-rmse: 0.073725	tr-a-peak@32: 0.967273	tr-rmse: 0.360911	tr-rmse: 0.360911
2025-07-22 08:34:58 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.07372	tr-a-peak@32:0.96727	tr-rmse:0.36091	tr-rmse:0.36091 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:39:26 [DEBUG] XGB validation: p-rmse: 0.205625	a-peak@32: 0.748585
2025-07-22 08:39:26 [DEBUG] XGB iter   0: tr-p-rmse: 0.516113	tr-a-peak@32: 1.000000	tr-rmse: 0.270896	tr-rmse: 0.270896
2025-07-22 08:39:26 [DEBUG] XGB iter  25: tr-p-rmse: 0.077295	tr-a-peak@32: 0.885051	tr-rmse: 0.372224	tr-rmse: 0.372224
2025-07-22 08:39:26 [DEBUG] XGB iter  50: tr-p-rmse: 0.077295	tr-a-peak@32: 0.885051	tr-rmse: 0.372224	tr-rmse: 0.372224
2025-07-22 08:39:26 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.07730	tr-a-peak@32:0.88505	tr-rmse:0.37222	tr-rmse:0.37222 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:43:56 [DEBUG] XGB validation: p-rmse: 0.222579	a-peak@32: 0.771798
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:48:38 [DEBUG] XGB validation: p-rmse: 0.206066	a-peak@32: 0.823449
2025-07-22 08:48:38 [DEBUG] XGB iter   0: tr-p-rmse: 0.495236	tr-a-peak@32: 0.654506	tr-rmse: 0.291488	tr-rmse: 0.291488
2025-07-22 08:48:38 [DEBUG] XGB iter  25: tr-p-rmse: 0.079259	tr-a-peak@32: 0.871208	tr-rmse: 0.392197	tr-rmse: 0.392197
2025-07-22 08:48:38 [DEBUG] XGB iter  50: tr-p-rmse: 0.079259	tr-a-peak@32: 0.871208	tr-rmse: 0.392197	tr-rmse: 0.392197
2025-07-22 08:48:38 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.07926	tr-a-peak@32:0.87121	tr-rmse:0.39220	tr-rmse:0.39220 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:53:04 [DEBUG] XGB validation: p-rmse: 0.176699	a-peak@32: 0.860551
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 08:57:33 [DEBUG] XGB validation: p-rmse: 0.188074	a-peak@32: 0.666645
2025-07-22 08:57:33 [DEBUG] XGB iter   0: tr-p-rmse: 0.485553	tr-a-peak@32: 0.796626	tr-rmse: 0.298358	tr-rmse: 0.298358
2025-07-22 08:57:33 [DEBUG] XGB iter  25: tr-p-rmse: 0.086895	tr-a-peak@32: 0.972507	tr-rmse: 0.400351	tr-rmse: 0.400351
2025-07-22 08:57:33 [DEBUG] XGB iter  50: tr-p-rmse: 0.086895	tr-a-peak@32: 0.972507	tr-rmse: 0.400351	tr-rmse: 0.400351
2025-07-22 08:57:33 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.08690	tr-a-peak@32:0.97251	tr-rmse:0.40035	tr-rmse:0.40035 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:01:59 [DEBUG] XGB validation: p-rmse: 0.104665	a-peak@32: 0.998277
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:06:27 [DEBUG] XGB validation: p-rmse: 0.113562	a-peak@32: 0.995786
2025-07-22 09:06:27 [DEBUG] XGB iter   0: tr-p-rmse: 0.469459	tr-a-peak@32: 0.807582	tr-rmse: 0.315549	tr-rmse: 0.315549
2025-07-22 09:06:27 [DEBUG] XGB iter  25: tr-p-rmse: 0.089070	tr-a-peak@32: 0.986603	tr-rmse: 0.417241	tr-rmse: 0.417241
2025-07-22 09:06:27 [DEBUG] XGB iter  50: tr-p-rmse: 0.089070	tr-a-peak@32: 0.986603	tr-rmse: 0.417241	tr-rmse: 0.417241
2025-07-22 09:06:27 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.08907	tr-a-peak@32:0.98660	tr-rmse:0.41724	tr-rmse:0.41724 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:10:56 [DEBUG] XGB validation: p-rmse: 0.162864	a-peak@32: 0.668891
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:15:25 [DEBUG] XGB validation: p-rmse: 0.153721	a-peak@32: 0.961837
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:19:53 [DEBUG] XGB validation: p-rmse: 0.225616	a-peak@32: 0.721542
2025-07-22 09:19:53 [DEBUG] XGB iter   0: tr-p-rmse: 0.486096	tr-a-peak@32: 0.657697	tr-rmse: 0.232538	tr-rmse: 0.232538
2025-07-22 09:19:53 [DEBUG] XGB iter  25: tr-p-rmse: 0.082436	tr-a-peak@32: 0.785443	tr-rmse: 0.346381	tr-rmse: 0.346381
2025-07-22 09:19:53 [DEBUG] XGB iter  50: tr-p-rmse: 0.082436	tr-a-peak@32: 0.785443	tr-rmse: 0.346381	tr-rmse: 0.346381
2025-07-22 09:19:53 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.08244	tr-a-peak@32:0.78544	tr-rmse:0.34638	tr-rmse:0.34638 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:24:21 [DEBUG] XGB validation: p-rmse: 0.151537	a-peak@32: 0.879814
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_capsule_nhwijc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_capsule_nhwijc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[1];
  nvcuda::wmma::fill_fragment(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5120)) = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  half4 condval;
  if ((2 <= ((int)blockIdx.x))) {
    condval = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 4096));
  } else {
    condval = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5664)) = condval;
  half4 condval_1;
  if ((2 <= ((int)blockIdx.x))) {
    condval_1 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 3584));
  } else {
    condval_1 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6208)) = condval_1;
  half4 condval_2;
  if ((2 <= ((int)blockIdx.x))) {
    condval_2 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 3072));
  } else {
    condval_2 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6752)) = condval_2;
  half4 condval_3;
  if ((2 <= ((int)blockIdx.x))) {
    condval_3 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 2560));
  } else {
    condval_3 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7296)) = condval_3;
  half4 condval_4;
  if ((2 <= ((int)blockIdx.x))) {
    condval_4 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 2048));
  } else {
    condval_4 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7840)) = condval_4;
  half4 condval_5;
  if ((2 <= ((int)blockIdx.x))) {
    condval_5 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 1536));
  } else {
    condval_5 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8384)) = condval_5;
  half4 condval_6;
  if ((2 <= ((int)blockIdx.x))) {
    condval_6 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 1024));
  } else {
    condval_6 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8928)) = condval_6;
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 9472)) = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10016)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10560)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 512));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11104)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1024));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11648)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1536));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12192)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12736)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2560));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 13280)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 3072));
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(weight + (((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8)) + 2560)) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 8192));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  half4 condval_7;
  if ((2 <= ((int)blockIdx.x))) {
    condval_7 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 4096));
  } else {
    condval_7 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5120)) = condval_7;
  half4 condval_8;
  if ((2 <= ((int)blockIdx.x))) {
    condval_8 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 3584));
  } else {
    condval_8 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5664)) = condval_8;
  half4 condval_9;
  if ((2 <= ((int)blockIdx.x))) {
    condval_9 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 3072));
  } else {
    condval_9 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6208)) = condval_9;
  half4 condval_10;
  if ((2 <= ((int)blockIdx.x))) {
    condval_10 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 2560));
  } else {
    condval_10 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6752)) = condval_10;
  half4 condval_11;
  if ((2 <= ((int)blockIdx.x))) {
    condval_11 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 2048));
  } else {
    condval_11 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7296)) = condval_11;
  half4 condval_12;
  if ((2 <= ((int)blockIdx.x))) {
    condval_12 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 1536));
  } else {
    condval_12 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7840)) = condval_12;
  half4 condval_13;
  if ((2 <= ((int)blockIdx.x))) {
    condval_13 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 1024));
  } else {
    condval_13 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8384)) = condval_13;
  half4 condval_14;
  if ((2 <= ((int)blockIdx.x))) {
    condval_14 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 512));
  } else {
    condval_14 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8928)) = condval_14;
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 9472)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10016)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 512));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10560)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1024));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11104)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1536));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11648)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12192)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2560));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12736)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 3072));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 13280)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 3584));
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 16384));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8)) + 2560)) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 24576));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  half4 condval_15;
  if ((2 <= ((int)blockIdx.x))) {
    condval_15 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 3584));
  } else {
    condval_15 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5120)) = condval_15;
  half4 condval_16;
  if ((2 <= ((int)blockIdx.x))) {
    condval_16 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 3072));
  } else {
    condval_16 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5664)) = condval_16;
  half4 condval_17;
  if ((2 <= ((int)blockIdx.x))) {
    condval_17 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 2560));
  } else {
    condval_17 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6208)) = condval_17;
  half4 condval_18;
  if ((2 <= ((int)blockIdx.x))) {
    condval_18 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 2048));
  } else {
    condval_18 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6752)) = condval_18;
  half4 condval_19;
  if ((2 <= ((int)blockIdx.x))) {
    condval_19 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 1536));
  } else {
    condval_19 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7296)) = condval_19;
  half4 condval_20;
  if ((2 <= ((int)blockIdx.x))) {
    condval_20 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 1024));
  } else {
    condval_20 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7840)) = condval_20;
  half4 condval_21;
  if ((2 <= ((int)blockIdx.x))) {
    condval_21 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) - 512));
  } else {
    condval_21 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8384)) = condval_21;
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8928)) = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 9472)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 512));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10016)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1024));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10560)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1536));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11104)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11648)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2560));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12192)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 3072));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12736)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 3584));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 13280)) = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 32768));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8)) + 2560)) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 40960));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5120)) = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5664)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6208)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 512));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6752)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1024));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7296)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1536));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7840)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8384)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2560));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8928)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 3072));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 9472)) = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10016)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 4096));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10560)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 4608));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11104)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 5120));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11648)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 5632));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12192)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 6144));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12736)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 6656));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 13280)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 7168));
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 49152));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8)) + 2560)) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 57344));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5120)) = *(half4*)(inputs + ((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5664)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 512));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6208)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1024));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6752)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1536));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7296)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7840)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2560));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8384)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 3072));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8928)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 3584));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 9472)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 4096));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10016)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 4608));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10560)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 5120));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11104)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 5632));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11648)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 6144));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12192)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 6656));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12736)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 7168));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 13280)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 7680));
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 65536));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8)) + 2560)) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 73728));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5120)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 512));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5664)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1024));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6208)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1536));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6752)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2048));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7296)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 2560));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7840)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 3072));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8384)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 3584));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8928)) = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 9472)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 4608));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10016)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 5120));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10560)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 5632));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11104)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 6144));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11648)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 6656));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12192)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 7168));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12736)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 7680));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 13280)) = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 81920));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8)) + 2560)) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 90112));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5120)) = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5664)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 4096));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6208)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 4608));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6752)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 5120));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7296)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 5632));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7840)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 6144));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8384)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 6656));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8928)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 7168));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 9472)) = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  half4 condval_22;
  if ((((int)blockIdx.x) < 6)) {
    condval_22 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 8192));
  } else {
    condval_22 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10016)) = condval_22;
  half4 condval_23;
  if ((((int)blockIdx.x) < 6)) {
    condval_23 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 8704));
  } else {
    condval_23 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10560)) = condval_23;
  half4 condval_24;
  if ((((int)blockIdx.x) < 6)) {
    condval_24 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 9216));
  } else {
    condval_24 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11104)) = condval_24;
  half4 condval_25;
  if ((((int)blockIdx.x) < 6)) {
    condval_25 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 9728));
  } else {
    condval_25 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11648)) = condval_25;
  half4 condval_26;
  if ((((int)blockIdx.x) < 6)) {
    condval_26 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 10240));
  } else {
    condval_26 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12192)) = condval_26;
  half4 condval_27;
  if ((((int)blockIdx.x) < 6)) {
    condval_27 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 10752));
  } else {
    condval_27 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12736)) = condval_27;
  half4 condval_28;
  if ((((int)blockIdx.x) < 6)) {
    condval_28 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 11264));
  } else {
    condval_28 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 13280)) = condval_28;
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 98304));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8)) + 2560)) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 106496));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5120)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 4096));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5664)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 4608));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6208)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 5120));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6752)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 5632));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7296)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 6144));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7840)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 6656));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8384)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 7168));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8928)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 7680));
  half4 condval_29;
  if ((((int)blockIdx.x) < 6)) {
    condval_29 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 8192));
  } else {
    condval_29 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 9472)) = condval_29;
  half4 condval_30;
  if ((((int)blockIdx.x) < 6)) {
    condval_30 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 8704));
  } else {
    condval_30 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10016)) = condval_30;
  half4 condval_31;
  if ((((int)blockIdx.x) < 6)) {
    condval_31 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 9216));
  } else {
    condval_31 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10560)) = condval_31;
  half4 condval_32;
  if ((((int)blockIdx.x) < 6)) {
    condval_32 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 9728));
  } else {
    condval_32 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11104)) = condval_32;
  half4 condval_33;
  if ((((int)blockIdx.x) < 6)) {
    condval_33 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 10240));
  } else {
    condval_33 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11648)) = condval_33;
  half4 condval_34;
  if ((((int)blockIdx.x) < 6)) {
    condval_34 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 10752));
  } else {
    condval_34 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12192)) = condval_34;
  half4 condval_35;
  if ((((int)blockIdx.x) < 6)) {
    condval_35 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 11264));
  } else {
    condval_35 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12736)) = condval_35;
  half4 condval_36;
  if ((((int)blockIdx.x) < 6)) {
    condval_36 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 11776));
  } else {
    condval_36 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 13280)) = condval_36;
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 114688));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8)) + 2560)) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 122880));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5120)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 4608));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 5664)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 5120));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6208)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 5632));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 6752)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 6144));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7296)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 6656));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 7840)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 7168));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8384)) = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 7680));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 8928)) = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  half4 condval_37;
  if ((((int)blockIdx.x) < 6)) {
    condval_37 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 8704));
  } else {
    condval_37 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 9472)) = condval_37;
  half4 condval_38;
  if ((((int)blockIdx.x) < 6)) {
    condval_38 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 9216));
  } else {
    condval_38 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10016)) = condval_38;
  half4 condval_39;
  if ((((int)blockIdx.x) < 6)) {
    condval_39 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 9728));
  } else {
    condval_39 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 10560)) = condval_39;
  half4 condval_40;
  if ((((int)blockIdx.x) < 6)) {
    condval_40 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 10240));
  } else {
    condval_40 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11104)) = condval_40;
  half4 condval_41;
  if ((((int)blockIdx.x) < 6)) {
    condval_41 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 10752));
  } else {
    condval_41 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 11648)) = condval_41;
  half4 condval_42;
  if ((((int)blockIdx.x) < 6)) {
    condval_42 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 11264));
  } else {
    condval_42 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12192)) = condval_42;
  half4 condval_43;
  if ((((int)blockIdx.x) < 6)) {
    condval_43 = *(half4*)(inputs + (((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 11776));
  } else {
    condval_43 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 12736)) = condval_43;
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 13280)) = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 131072));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8)) + 2560)) = *(uint4*)(weight + ((((((((((int)threadIdx.y) >> 1) * 4096) + (((int)blockIdx.y) * 1024)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 1) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 139264));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 256)])), conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half2*)(conv2d_capsule_nhwijc + (((((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 7) * 2))) = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)));
  *(half2*)(conv2d_capsule_nhwijc + ((((((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 2048)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 256));
  *(half2*)(conv2d_capsule_nhwijc + ((((((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 4096)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 512));
  *(half2*)(conv2d_capsule_nhwijc + ((((((((((int)blockIdx.x) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 6144)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 768));
}


The time of CAP is 0.016 ms
2025-07-22 09:24:23 [INFO] Logging directory: /tmp/tmpm_zhbtio/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:25:03 [DEBUG] XGB iter   0: tr-p-rmse: 0.577969	tr-a-peak@32: 0.978442	tr-rmse: 0.315041	tr-rmse: 0.315041
2025-07-22 09:25:03 [DEBUG] XGB iter  25: tr-p-rmse: 0.033893	tr-a-peak@32: 1.000000	tr-rmse: 0.401212	tr-rmse: 0.401212
2025-07-22 09:25:04 [DEBUG] XGB iter  50: tr-p-rmse: 0.033893	tr-a-peak@32: 1.000000	tr-rmse: 0.401212	tr-rmse: 0.401212
2025-07-22 09:25:04 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.03389	tr-a-peak@32:1.00000	tr-rmse:0.40121	tr-rmse:0.40121 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====

#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ < 700)
#define __shfl_sync(mask, var, lane, width) \
        __shfl((var), (lane), (width))

#define __shfl_down_sync(mask, var, offset, width) \
        __shfl_down((var), (offset), (width))

#define __shfl_up_sync(mask, var, offset, width) \
        __shfl_up((var), (offset), (width))
#endif


#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(512) main_kernel(float* __restrict__ A, float* __restrict__ D);
extern "C" __global__ void __launch_bounds__(512) main_kernel(float* __restrict__ A, float* __restrict__ D) {
  float in_thread_C_shared[1];
  __shared__ float red_result[1];
  __shared__ float C_shared[1];
  in_thread_C_shared[0] = 0.000000e+00f;
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[((int)threadIdx.x)] * A[((int)threadIdx.x)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 512)] * A[(((int)threadIdx.x) + 512)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 1024)] * A[(((int)threadIdx.x) + 1024)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 1536)] * A[(((int)threadIdx.x) + 1536)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 2048)] * A[(((int)threadIdx.x) + 2048)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 2560)] * A[(((int)threadIdx.x) + 2560)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 3072)] * A[(((int)threadIdx.x) + 3072)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 3584)] * A[(((int)threadIdx.x) + 3584)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 4096)] * A[(((int)threadIdx.x) + 4096)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 4608)] * A[(((int)threadIdx.x) + 4608)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 5120)] * A[(((int)threadIdx.x) + 5120)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 5632)] * A[(((int)threadIdx.x) + 5632)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 6144)] * A[(((int)threadIdx.x) + 6144)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 6656)] * A[(((int)threadIdx.x) + 6656)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 7168)] * A[(((int)threadIdx.x) + 7168)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 7680)] * A[(((int)threadIdx.x) + 7680)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 8192)] * A[(((int)threadIdx.x) + 8192)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 8704)] * A[(((int)threadIdx.x) + 8704)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 9216)] * A[(((int)threadIdx.x) + 9216)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 9728)] * A[(((int)threadIdx.x) + 9728)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 10240)] * A[(((int)threadIdx.x) + 10240)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 10752)] * A[(((int)threadIdx.x) + 10752)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 11264)] * A[(((int)threadIdx.x) + 11264)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 11776)] * A[(((int)threadIdx.x) + 11776)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 12288)] * A[(((int)threadIdx.x) + 12288)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 12800)] * A[(((int)threadIdx.x) + 12800)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 13312)] * A[(((int)threadIdx.x) + 13312)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 13824)] * A[(((int)threadIdx.x) + 13824)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 14336)] * A[(((int)threadIdx.x) + 14336)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 14848)] * A[(((int)threadIdx.x) + 14848)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 15360)] * A[(((int)threadIdx.x) + 15360)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 15872)] * A[(((int)threadIdx.x) + 15872)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 16384)] * A[(((int)threadIdx.x) + 16384)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 16896)] * A[(((int)threadIdx.x) + 16896)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 17408)] * A[(((int)threadIdx.x) + 17408)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 17920)] * A[(((int)threadIdx.x) + 17920)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 18432)] * A[(((int)threadIdx.x) + 18432)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 18944)] * A[(((int)threadIdx.x) + 18944)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 19456)] * A[(((int)threadIdx.x) + 19456)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 19968)] * A[(((int)threadIdx.x) + 19968)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 20480)] * A[(((int)threadIdx.x) + 20480)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 20992)] * A[(((int)threadIdx.x) + 20992)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 21504)] * A[(((int)threadIdx.x) + 21504)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 22016)] * A[(((int)threadIdx.x) + 22016)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 22528)] * A[(((int)threadIdx.x) + 22528)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 23040)] * A[(((int)threadIdx.x) + 23040)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 23552)] * A[(((int)threadIdx.x) + 23552)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 24064)] * A[(((int)threadIdx.x) + 24064)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 24576)] * A[(((int)threadIdx.x) + 24576)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 25088)] * A[(((int)threadIdx.x) + 25088)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 25600)] * A[(((int)threadIdx.x) + 25600)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 26112)] * A[(((int)threadIdx.x) + 26112)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 26624)] * A[(((int)threadIdx.x) + 26624)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 27136)] * A[(((int)threadIdx.x) + 27136)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 27648)] * A[(((int)threadIdx.x) + 27648)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 28160)] * A[(((int)threadIdx.x) + 28160)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 28672)] * A[(((int)threadIdx.x) + 28672)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 29184)] * A[(((int)threadIdx.x) + 29184)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 29696)] * A[(((int)threadIdx.x) + 29696)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 30208)] * A[(((int)threadIdx.x) + 30208)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 30720)] * A[(((int)threadIdx.x) + 30720)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 31232)] * A[(((int)threadIdx.x) + 31232)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 31744)] * A[(((int)threadIdx.x) + 31744)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 32256)] * A[(((int)threadIdx.x) + 32256)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 32768)] * A[(((int)threadIdx.x) + 32768)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 33280)] * A[(((int)threadIdx.x) + 33280)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 33792)] * A[(((int)threadIdx.x) + 33792)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 34304)] * A[(((int)threadIdx.x) + 34304)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 34816)] * A[(((int)threadIdx.x) + 34816)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 35328)] * A[(((int)threadIdx.x) + 35328)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 35840)] * A[(((int)threadIdx.x) + 35840)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 36352)] * A[(((int)threadIdx.x) + 36352)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 36864)] * A[(((int)threadIdx.x) + 36864)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 37376)] * A[(((int)threadIdx.x) + 37376)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 37888)] * A[(((int)threadIdx.x) + 37888)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 38400)] * A[(((int)threadIdx.x) + 38400)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 38912)] * A[(((int)threadIdx.x) + 38912)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 39424)] * A[(((int)threadIdx.x) + 39424)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 39936)] * A[(((int)threadIdx.x) + 39936)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 40448)] * A[(((int)threadIdx.x) + 40448)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 40960)] * A[(((int)threadIdx.x) + 40960)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 41472)] * A[(((int)threadIdx.x) + 41472)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 41984)] * A[(((int)threadIdx.x) + 41984)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 42496)] * A[(((int)threadIdx.x) + 42496)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 43008)] * A[(((int)threadIdx.x) + 43008)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 43520)] * A[(((int)threadIdx.x) + 43520)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 44032)] * A[(((int)threadIdx.x) + 44032)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 44544)] * A[(((int)threadIdx.x) + 44544)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 45056)] * A[(((int)threadIdx.x) + 45056)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 45568)] * A[(((int)threadIdx.x) + 45568)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 46080)] * A[(((int)threadIdx.x) + 46080)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 46592)] * A[(((int)threadIdx.x) + 46592)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 47104)] * A[(((int)threadIdx.x) + 47104)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 47616)] * A[(((int)threadIdx.x) + 47616)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 48128)] * A[(((int)threadIdx.x) + 48128)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 48640)] * A[(((int)threadIdx.x) + 48640)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 49152)] * A[(((int)threadIdx.x) + 49152)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 49664)] * A[(((int)threadIdx.x) + 49664)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 50176)] * A[(((int)threadIdx.x) + 50176)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 50688)] * A[(((int)threadIdx.x) + 50688)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 51200)] * A[(((int)threadIdx.x) + 51200)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 51712)] * A[(((int)threadIdx.x) + 51712)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 52224)] * A[(((int)threadIdx.x) + 52224)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 52736)] * A[(((int)threadIdx.x) + 52736)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 53248)] * A[(((int)threadIdx.x) + 53248)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 53760)] * A[(((int)threadIdx.x) + 53760)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 54272)] * A[(((int)threadIdx.x) + 54272)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 54784)] * A[(((int)threadIdx.x) + 54784)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 55296)] * A[(((int)threadIdx.x) + 55296)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 55808)] * A[(((int)threadIdx.x) + 55808)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 56320)] * A[(((int)threadIdx.x) + 56320)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 56832)] * A[(((int)threadIdx.x) + 56832)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 57344)] * A[(((int)threadIdx.x) + 57344)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 57856)] * A[(((int)threadIdx.x) + 57856)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 58368)] * A[(((int)threadIdx.x) + 58368)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 58880)] * A[(((int)threadIdx.x) + 58880)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 59392)] * A[(((int)threadIdx.x) + 59392)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 59904)] * A[(((int)threadIdx.x) + 59904)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 60416)] * A[(((int)threadIdx.x) + 60416)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 60928)] * A[(((int)threadIdx.x) + 60928)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 61440)] * A[(((int)threadIdx.x) + 61440)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 61952)] * A[(((int)threadIdx.x) + 61952)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 62464)] * A[(((int)threadIdx.x) + 62464)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 62976)] * A[(((int)threadIdx.x) + 62976)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 63488)] * A[(((int)threadIdx.x) + 63488)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 64000)] * A[(((int)threadIdx.x) + 64000)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 64512)] * A[(((int)threadIdx.x) + 64512)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 65024)] * A[(((int)threadIdx.x) + 65024)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 65536)] * A[(((int)threadIdx.x) + 65536)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 66048)] * A[(((int)threadIdx.x) + 66048)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 66560)] * A[(((int)threadIdx.x) + 66560)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 67072)] * A[(((int)threadIdx.x) + 67072)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 67584)] * A[(((int)threadIdx.x) + 67584)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 68096)] * A[(((int)threadIdx.x) + 68096)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 68608)] * A[(((int)threadIdx.x) + 68608)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 69120)] * A[(((int)threadIdx.x) + 69120)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 69632)] * A[(((int)threadIdx.x) + 69632)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 70144)] * A[(((int)threadIdx.x) + 70144)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 70656)] * A[(((int)threadIdx.x) + 70656)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 71168)] * A[(((int)threadIdx.x) + 71168)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 71680)] * A[(((int)threadIdx.x) + 71680)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 72192)] * A[(((int)threadIdx.x) + 72192)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 72704)] * A[(((int)threadIdx.x) + 72704)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 73216)] * A[(((int)threadIdx.x) + 73216)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 73728)] * A[(((int)threadIdx.x) + 73728)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 74240)] * A[(((int)threadIdx.x) + 74240)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 74752)] * A[(((int)threadIdx.x) + 74752)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 75264)] * A[(((int)threadIdx.x) + 75264)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 75776)] * A[(((int)threadIdx.x) + 75776)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 76288)] * A[(((int)threadIdx.x) + 76288)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 76800)] * A[(((int)threadIdx.x) + 76800)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 77312)] * A[(((int)threadIdx.x) + 77312)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 77824)] * A[(((int)threadIdx.x) + 77824)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 78336)] * A[(((int)threadIdx.x) + 78336)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 78848)] * A[(((int)threadIdx.x) + 78848)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 79360)] * A[(((int)threadIdx.x) + 79360)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 79872)] * A[(((int)threadIdx.x) + 79872)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 80384)] * A[(((int)threadIdx.x) + 80384)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 80896)] * A[(((int)threadIdx.x) + 80896)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 81408)] * A[(((int)threadIdx.x) + 81408)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 81920)] * A[(((int)threadIdx.x) + 81920)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 82432)] * A[(((int)threadIdx.x) + 82432)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 82944)] * A[(((int)threadIdx.x) + 82944)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 83456)] * A[(((int)threadIdx.x) + 83456)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 83968)] * A[(((int)threadIdx.x) + 83968)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 84480)] * A[(((int)threadIdx.x) + 84480)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 84992)] * A[(((int)threadIdx.x) + 84992)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 85504)] * A[(((int)threadIdx.x) + 85504)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 86016)] * A[(((int)threadIdx.x) + 86016)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 86528)] * A[(((int)threadIdx.x) + 86528)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 87040)] * A[(((int)threadIdx.x) + 87040)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 87552)] * A[(((int)threadIdx.x) + 87552)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 88064)] * A[(((int)threadIdx.x) + 88064)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 88576)] * A[(((int)threadIdx.x) + 88576)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 89088)] * A[(((int)threadIdx.x) + 89088)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 89600)] * A[(((int)threadIdx.x) + 89600)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 90112)] * A[(((int)threadIdx.x) + 90112)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 90624)] * A[(((int)threadIdx.x) + 90624)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 91136)] * A[(((int)threadIdx.x) + 91136)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 91648)] * A[(((int)threadIdx.x) + 91648)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 92160)] * A[(((int)threadIdx.x) + 92160)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 92672)] * A[(((int)threadIdx.x) + 92672)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 93184)] * A[(((int)threadIdx.x) + 93184)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 93696)] * A[(((int)threadIdx.x) + 93696)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 94208)] * A[(((int)threadIdx.x) + 94208)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 94720)] * A[(((int)threadIdx.x) + 94720)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 95232)] * A[(((int)threadIdx.x) + 95232)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 95744)] * A[(((int)threadIdx.x) + 95744)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 96256)] * A[(((int)threadIdx.x) + 96256)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 96768)] * A[(((int)threadIdx.x) + 96768)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 97280)] * A[(((int)threadIdx.x) + 97280)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 97792)] * A[(((int)threadIdx.x) + 97792)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 98304)] * A[(((int)threadIdx.x) + 98304)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 98816)] * A[(((int)threadIdx.x) + 98816)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 99328)] * A[(((int)threadIdx.x) + 99328)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 99840)] * A[(((int)threadIdx.x) + 99840)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 100352)] * A[(((int)threadIdx.x) + 100352)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 100864)] * A[(((int)threadIdx.x) + 100864)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 101376)] * A[(((int)threadIdx.x) + 101376)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 101888)] * A[(((int)threadIdx.x) + 101888)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 102400)] * A[(((int)threadIdx.x) + 102400)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 102912)] * A[(((int)threadIdx.x) + 102912)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 103424)] * A[(((int)threadIdx.x) + 103424)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 103936)] * A[(((int)threadIdx.x) + 103936)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 104448)] * A[(((int)threadIdx.x) + 104448)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 104960)] * A[(((int)threadIdx.x) + 104960)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 105472)] * A[(((int)threadIdx.x) + 105472)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 105984)] * A[(((int)threadIdx.x) + 105984)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 106496)] * A[(((int)threadIdx.x) + 106496)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 107008)] * A[(((int)threadIdx.x) + 107008)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 107520)] * A[(((int)threadIdx.x) + 107520)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 108032)] * A[(((int)threadIdx.x) + 108032)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 108544)] * A[(((int)threadIdx.x) + 108544)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 109056)] * A[(((int)threadIdx.x) + 109056)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 109568)] * A[(((int)threadIdx.x) + 109568)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 110080)] * A[(((int)threadIdx.x) + 110080)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 110592)] * A[(((int)threadIdx.x) + 110592)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 111104)] * A[(((int)threadIdx.x) + 111104)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 111616)] * A[(((int)threadIdx.x) + 111616)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 112128)] * A[(((int)threadIdx.x) + 112128)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 112640)] * A[(((int)threadIdx.x) + 112640)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 113152)] * A[(((int)threadIdx.x) + 113152)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 113664)] * A[(((int)threadIdx.x) + 113664)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 114176)] * A[(((int)threadIdx.x) + 114176)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 114688)] * A[(((int)threadIdx.x) + 114688)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 115200)] * A[(((int)threadIdx.x) + 115200)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 115712)] * A[(((int)threadIdx.x) + 115712)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 116224)] * A[(((int)threadIdx.x) + 116224)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 116736)] * A[(((int)threadIdx.x) + 116736)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 117248)] * A[(((int)threadIdx.x) + 117248)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 117760)] * A[(((int)threadIdx.x) + 117760)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 118272)] * A[(((int)threadIdx.x) + 118272)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 118784)] * A[(((int)threadIdx.x) + 118784)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 119296)] * A[(((int)threadIdx.x) + 119296)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 119808)] * A[(((int)threadIdx.x) + 119808)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 120320)] * A[(((int)threadIdx.x) + 120320)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 120832)] * A[(((int)threadIdx.x) + 120832)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 121344)] * A[(((int)threadIdx.x) + 121344)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 121856)] * A[(((int)threadIdx.x) + 121856)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 122368)] * A[(((int)threadIdx.x) + 122368)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 122880)] * A[(((int)threadIdx.x) + 122880)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 123392)] * A[(((int)threadIdx.x) + 123392)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 123904)] * A[(((int)threadIdx.x) + 123904)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 124416)] * A[(((int)threadIdx.x) + 124416)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 124928)] * A[(((int)threadIdx.x) + 124928)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 125440)] * A[(((int)threadIdx.x) + 125440)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 125952)] * A[(((int)threadIdx.x) + 125952)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 126464)] * A[(((int)threadIdx.x) + 126464)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 126976)] * A[(((int)threadIdx.x) + 126976)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 127488)] * A[(((int)threadIdx.x) + 127488)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 128000)] * A[(((int)threadIdx.x) + 128000)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 128512)] * A[(((int)threadIdx.x) + 128512)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 129024)] * A[(((int)threadIdx.x) + 129024)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 129536)] * A[(((int)threadIdx.x) + 129536)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 130048)] * A[(((int)threadIdx.x) + 130048)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 130560)] * A[(((int)threadIdx.x) + 130560)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 131072)] * A[(((int)threadIdx.x) + 131072)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 131584)] * A[(((int)threadIdx.x) + 131584)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 132096)] * A[(((int)threadIdx.x) + 132096)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 132608)] * A[(((int)threadIdx.x) + 132608)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 133120)] * A[(((int)threadIdx.x) + 133120)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 133632)] * A[(((int)threadIdx.x) + 133632)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 134144)] * A[(((int)threadIdx.x) + 134144)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 134656)] * A[(((int)threadIdx.x) + 134656)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 135168)] * A[(((int)threadIdx.x) + 135168)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 135680)] * A[(((int)threadIdx.x) + 135680)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 136192)] * A[(((int)threadIdx.x) + 136192)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 136704)] * A[(((int)threadIdx.x) + 136704)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 137216)] * A[(((int)threadIdx.x) + 137216)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 137728)] * A[(((int)threadIdx.x) + 137728)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 138240)] * A[(((int)threadIdx.x) + 138240)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 138752)] * A[(((int)threadIdx.x) + 138752)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 139264)] * A[(((int)threadIdx.x) + 139264)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 139776)] * A[(((int)threadIdx.x) + 139776)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 140288)] * A[(((int)threadIdx.x) + 140288)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 140800)] * A[(((int)threadIdx.x) + 140800)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 141312)] * A[(((int)threadIdx.x) + 141312)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 141824)] * A[(((int)threadIdx.x) + 141824)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 142336)] * A[(((int)threadIdx.x) + 142336)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 142848)] * A[(((int)threadIdx.x) + 142848)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 143360)] * A[(((int)threadIdx.x) + 143360)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 143872)] * A[(((int)threadIdx.x) + 143872)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 144384)] * A[(((int)threadIdx.x) + 144384)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 144896)] * A[(((int)threadIdx.x) + 144896)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 145408)] * A[(((int)threadIdx.x) + 145408)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 145920)] * A[(((int)threadIdx.x) + 145920)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 146432)] * A[(((int)threadIdx.x) + 146432)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 146944)] * A[(((int)threadIdx.x) + 146944)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 147456)] * A[(((int)threadIdx.x) + 147456)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 147968)] * A[(((int)threadIdx.x) + 147968)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 148480)] * A[(((int)threadIdx.x) + 148480)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 148992)] * A[(((int)threadIdx.x) + 148992)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 149504)] * A[(((int)threadIdx.x) + 149504)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 150016)] * A[(((int)threadIdx.x) + 150016)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 150528)] * A[(((int)threadIdx.x) + 150528)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 151040)] * A[(((int)threadIdx.x) + 151040)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 151552)] * A[(((int)threadIdx.x) + 151552)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 152064)] * A[(((int)threadIdx.x) + 152064)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 152576)] * A[(((int)threadIdx.x) + 152576)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 153088)] * A[(((int)threadIdx.x) + 153088)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 153600)] * A[(((int)threadIdx.x) + 153600)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 154112)] * A[(((int)threadIdx.x) + 154112)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 154624)] * A[(((int)threadIdx.x) + 154624)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 155136)] * A[(((int)threadIdx.x) + 155136)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 155648)] * A[(((int)threadIdx.x) + 155648)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 156160)] * A[(((int)threadIdx.x) + 156160)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 156672)] * A[(((int)threadIdx.x) + 156672)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 157184)] * A[(((int)threadIdx.x) + 157184)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 157696)] * A[(((int)threadIdx.x) + 157696)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 158208)] * A[(((int)threadIdx.x) + 158208)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 158720)] * A[(((int)threadIdx.x) + 158720)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 159232)] * A[(((int)threadIdx.x) + 159232)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 159744)] * A[(((int)threadIdx.x) + 159744)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 160256)] * A[(((int)threadIdx.x) + 160256)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 160768)] * A[(((int)threadIdx.x) + 160768)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 161280)] * A[(((int)threadIdx.x) + 161280)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 161792)] * A[(((int)threadIdx.x) + 161792)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 162304)] * A[(((int)threadIdx.x) + 162304)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 162816)] * A[(((int)threadIdx.x) + 162816)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 163328)] * A[(((int)threadIdx.x) + 163328)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 163840)] * A[(((int)threadIdx.x) + 163840)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 164352)] * A[(((int)threadIdx.x) + 164352)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 164864)] * A[(((int)threadIdx.x) + 164864)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 165376)] * A[(((int)threadIdx.x) + 165376)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 165888)] * A[(((int)threadIdx.x) + 165888)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 166400)] * A[(((int)threadIdx.x) + 166400)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 166912)] * A[(((int)threadIdx.x) + 166912)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 167424)] * A[(((int)threadIdx.x) + 167424)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 167936)] * A[(((int)threadIdx.x) + 167936)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 168448)] * A[(((int)threadIdx.x) + 168448)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 168960)] * A[(((int)threadIdx.x) + 168960)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 169472)] * A[(((int)threadIdx.x) + 169472)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 169984)] * A[(((int)threadIdx.x) + 169984)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 170496)] * A[(((int)threadIdx.x) + 170496)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 171008)] * A[(((int)threadIdx.x) + 171008)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 171520)] * A[(((int)threadIdx.x) + 171520)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 172032)] * A[(((int)threadIdx.x) + 172032)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 172544)] * A[(((int)threadIdx.x) + 172544)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 173056)] * A[(((int)threadIdx.x) + 173056)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 173568)] * A[(((int)threadIdx.x) + 173568)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 174080)] * A[(((int)threadIdx.x) + 174080)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 174592)] * A[(((int)threadIdx.x) + 174592)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 175104)] * A[(((int)threadIdx.x) + 175104)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 175616)] * A[(((int)threadIdx.x) + 175616)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 176128)] * A[(((int)threadIdx.x) + 176128)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 176640)] * A[(((int)threadIdx.x) + 176640)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 177152)] * A[(((int)threadIdx.x) + 177152)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 177664)] * A[(((int)threadIdx.x) + 177664)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 178176)] * A[(((int)threadIdx.x) + 178176)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 178688)] * A[(((int)threadIdx.x) + 178688)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 179200)] * A[(((int)threadIdx.x) + 179200)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 179712)] * A[(((int)threadIdx.x) + 179712)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 180224)] * A[(((int)threadIdx.x) + 180224)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 180736)] * A[(((int)threadIdx.x) + 180736)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 181248)] * A[(((int)threadIdx.x) + 181248)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 181760)] * A[(((int)threadIdx.x) + 181760)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 182272)] * A[(((int)threadIdx.x) + 182272)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 182784)] * A[(((int)threadIdx.x) + 182784)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 183296)] * A[(((int)threadIdx.x) + 183296)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 183808)] * A[(((int)threadIdx.x) + 183808)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 184320)] * A[(((int)threadIdx.x) + 184320)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 184832)] * A[(((int)threadIdx.x) + 184832)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 185344)] * A[(((int)threadIdx.x) + 185344)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 185856)] * A[(((int)threadIdx.x) + 185856)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 186368)] * A[(((int)threadIdx.x) + 186368)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 186880)] * A[(((int)threadIdx.x) + 186880)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 187392)] * A[(((int)threadIdx.x) + 187392)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 187904)] * A[(((int)threadIdx.x) + 187904)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 188416)] * A[(((int)threadIdx.x) + 188416)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 188928)] * A[(((int)threadIdx.x) + 188928)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 189440)] * A[(((int)threadIdx.x) + 189440)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 189952)] * A[(((int)threadIdx.x) + 189952)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 190464)] * A[(((int)threadIdx.x) + 190464)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 190976)] * A[(((int)threadIdx.x) + 190976)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 191488)] * A[(((int)threadIdx.x) + 191488)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 192000)] * A[(((int)threadIdx.x) + 192000)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 192512)] * A[(((int)threadIdx.x) + 192512)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 193024)] * A[(((int)threadIdx.x) + 193024)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 193536)] * A[(((int)threadIdx.x) + 193536)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 194048)] * A[(((int)threadIdx.x) + 194048)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 194560)] * A[(((int)threadIdx.x) + 194560)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 195072)] * A[(((int)threadIdx.x) + 195072)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 195584)] * A[(((int)threadIdx.x) + 195584)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 196096)] * A[(((int)threadIdx.x) + 196096)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 196608)] * A[(((int)threadIdx.x) + 196608)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 197120)] * A[(((int)threadIdx.x) + 197120)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 197632)] * A[(((int)threadIdx.x) + 197632)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 198144)] * A[(((int)threadIdx.x) + 198144)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 198656)] * A[(((int)threadIdx.x) + 198656)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 199168)] * A[(((int)threadIdx.x) + 199168)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 199680)] * A[(((int)threadIdx.x) + 199680)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 200192)] * A[(((int)threadIdx.x) + 200192)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 200704)] * A[(((int)threadIdx.x) + 200704)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 201216)] * A[(((int)threadIdx.x) + 201216)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 201728)] * A[(((int)threadIdx.x) + 201728)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 202240)] * A[(((int)threadIdx.x) + 202240)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 202752)] * A[(((int)threadIdx.x) + 202752)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 203264)] * A[(((int)threadIdx.x) + 203264)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 203776)] * A[(((int)threadIdx.x) + 203776)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 204288)] * A[(((int)threadIdx.x) + 204288)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 204800)] * A[(((int)threadIdx.x) + 204800)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 205312)] * A[(((int)threadIdx.x) + 205312)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 205824)] * A[(((int)threadIdx.x) + 205824)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 206336)] * A[(((int)threadIdx.x) + 206336)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 206848)] * A[(((int)threadIdx.x) + 206848)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 207360)] * A[(((int)threadIdx.x) + 207360)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 207872)] * A[(((int)threadIdx.x) + 207872)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 208384)] * A[(((int)threadIdx.x) + 208384)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 208896)] * A[(((int)threadIdx.x) + 208896)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 209408)] * A[(((int)threadIdx.x) + 209408)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 209920)] * A[(((int)threadIdx.x) + 209920)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 210432)] * A[(((int)threadIdx.x) + 210432)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 210944)] * A[(((int)threadIdx.x) + 210944)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 211456)] * A[(((int)threadIdx.x) + 211456)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 211968)] * A[(((int)threadIdx.x) + 211968)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 212480)] * A[(((int)threadIdx.x) + 212480)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 212992)] * A[(((int)threadIdx.x) + 212992)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 213504)] * A[(((int)threadIdx.x) + 213504)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 214016)] * A[(((int)threadIdx.x) + 214016)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 214528)] * A[(((int)threadIdx.x) + 214528)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 215040)] * A[(((int)threadIdx.x) + 215040)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 215552)] * A[(((int)threadIdx.x) + 215552)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 216064)] * A[(((int)threadIdx.x) + 216064)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 216576)] * A[(((int)threadIdx.x) + 216576)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 217088)] * A[(((int)threadIdx.x) + 217088)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 217600)] * A[(((int)threadIdx.x) + 217600)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 218112)] * A[(((int)threadIdx.x) + 218112)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 218624)] * A[(((int)threadIdx.x) + 218624)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 219136)] * A[(((int)threadIdx.x) + 219136)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 219648)] * A[(((int)threadIdx.x) + 219648)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 220160)] * A[(((int)threadIdx.x) + 220160)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 220672)] * A[(((int)threadIdx.x) + 220672)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 221184)] * A[(((int)threadIdx.x) + 221184)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 221696)] * A[(((int)threadIdx.x) + 221696)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 222208)] * A[(((int)threadIdx.x) + 222208)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 222720)] * A[(((int)threadIdx.x) + 222720)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 223232)] * A[(((int)threadIdx.x) + 223232)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 223744)] * A[(((int)threadIdx.x) + 223744)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 224256)] * A[(((int)threadIdx.x) + 224256)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 224768)] * A[(((int)threadIdx.x) + 224768)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 225280)] * A[(((int)threadIdx.x) + 225280)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 225792)] * A[(((int)threadIdx.x) + 225792)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 226304)] * A[(((int)threadIdx.x) + 226304)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 226816)] * A[(((int)threadIdx.x) + 226816)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 227328)] * A[(((int)threadIdx.x) + 227328)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 227840)] * A[(((int)threadIdx.x) + 227840)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 228352)] * A[(((int)threadIdx.x) + 228352)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 228864)] * A[(((int)threadIdx.x) + 228864)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 229376)] * A[(((int)threadIdx.x) + 229376)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 229888)] * A[(((int)threadIdx.x) + 229888)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 230400)] * A[(((int)threadIdx.x) + 230400)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 230912)] * A[(((int)threadIdx.x) + 230912)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 231424)] * A[(((int)threadIdx.x) + 231424)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 231936)] * A[(((int)threadIdx.x) + 231936)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 232448)] * A[(((int)threadIdx.x) + 232448)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 232960)] * A[(((int)threadIdx.x) + 232960)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 233472)] * A[(((int)threadIdx.x) + 233472)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 233984)] * A[(((int)threadIdx.x) + 233984)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 234496)] * A[(((int)threadIdx.x) + 234496)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 235008)] * A[(((int)threadIdx.x) + 235008)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 235520)] * A[(((int)threadIdx.x) + 235520)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 236032)] * A[(((int)threadIdx.x) + 236032)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 236544)] * A[(((int)threadIdx.x) + 236544)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 237056)] * A[(((int)threadIdx.x) + 237056)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 237568)] * A[(((int)threadIdx.x) + 237568)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 238080)] * A[(((int)threadIdx.x) + 238080)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 238592)] * A[(((int)threadIdx.x) + 238592)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 239104)] * A[(((int)threadIdx.x) + 239104)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 239616)] * A[(((int)threadIdx.x) + 239616)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 240128)] * A[(((int)threadIdx.x) + 240128)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 240640)] * A[(((int)threadIdx.x) + 240640)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 241152)] * A[(((int)threadIdx.x) + 241152)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 241664)] * A[(((int)threadIdx.x) + 241664)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 242176)] * A[(((int)threadIdx.x) + 242176)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 242688)] * A[(((int)threadIdx.x) + 242688)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 243200)] * A[(((int)threadIdx.x) + 243200)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 243712)] * A[(((int)threadIdx.x) + 243712)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 244224)] * A[(((int)threadIdx.x) + 244224)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 244736)] * A[(((int)threadIdx.x) + 244736)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 245248)] * A[(((int)threadIdx.x) + 245248)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 245760)] * A[(((int)threadIdx.x) + 245760)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 246272)] * A[(((int)threadIdx.x) + 246272)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 246784)] * A[(((int)threadIdx.x) + 246784)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 247296)] * A[(((int)threadIdx.x) + 247296)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 247808)] * A[(((int)threadIdx.x) + 247808)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 248320)] * A[(((int)threadIdx.x) + 248320)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 248832)] * A[(((int)threadIdx.x) + 248832)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 249344)] * A[(((int)threadIdx.x) + 249344)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 249856)] * A[(((int)threadIdx.x) + 249856)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 250368)] * A[(((int)threadIdx.x) + 250368)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 250880)] * A[(((int)threadIdx.x) + 250880)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 251392)] * A[(((int)threadIdx.x) + 251392)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 251904)] * A[(((int)threadIdx.x) + 251904)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 252416)] * A[(((int)threadIdx.x) + 252416)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 252928)] * A[(((int)threadIdx.x) + 252928)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 253440)] * A[(((int)threadIdx.x) + 253440)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 253952)] * A[(((int)threadIdx.x) + 253952)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 254464)] * A[(((int)threadIdx.x) + 254464)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 254976)] * A[(((int)threadIdx.x) + 254976)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 255488)] * A[(((int)threadIdx.x) + 255488)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 256000)] * A[(((int)threadIdx.x) + 256000)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 256512)] * A[(((int)threadIdx.x) + 256512)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 257024)] * A[(((int)threadIdx.x) + 257024)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 257536)] * A[(((int)threadIdx.x) + 257536)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 258048)] * A[(((int)threadIdx.x) + 258048)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 258560)] * A[(((int)threadIdx.x) + 258560)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 259072)] * A[(((int)threadIdx.x) + 259072)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 259584)] * A[(((int)threadIdx.x) + 259584)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 260096)] * A[(((int)threadIdx.x) + 260096)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 260608)] * A[(((int)threadIdx.x) + 260608)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 261120)] * A[(((int)threadIdx.x) + 261120)]));
  in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[(((int)threadIdx.x) + 261632)] * A[(((int)threadIdx.x) + 261632)]));
  float red_buf0[1];
  uint mask[1];
  float t0[1];
  float red_buf0_1[1];
  uint mask_1[1];
  float t0_1[1];
  __shared__ float red_buf_staging[16];
  red_buf0_1[0] = in_thread_C_shared[0];
  mask_1[0] = __activemask();
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 16, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 8, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 4, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 2, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 1, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  if ((((int)threadIdx.x) % 32) == 0) {
    red_buf_staging[(((int)threadIdx.x) >> 5)] = red_buf0_1[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) < 16) {
    red_buf0[0] = red_buf_staging[((int)threadIdx.x)];
  }
  mask[0] = __activemask();
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 8, 32);
  red_buf0[0] = (red_buf0[0] + t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 4, 32);
  red_buf0[0] = (red_buf0[0] + t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 2, 32);
  red_buf0[0] = (red_buf0[0] + t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 1, 32);
  red_buf0[0] = (red_buf0[0] + t0[0]);
  if (((int)threadIdx.x) == 0) {
    ((volatile float*)red_result)[0] = red_buf0[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) == 0) {
    C_shared[0] = ((volatile float*)red_result)[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) < 1) {
    D[0] = sqrtf(C_shared[0]);
  }
}


The time of NRM is 0.028 ms
2025-07-22 09:25:14 [INFO] Logging directory: /tmp/tmp4vf80406/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:26:01 [DEBUG] XGB iter   0: tr-p-rmse: 0.514987	tr-a-peak@32: 0.975930	tr-rmse: 0.472833	tr-rmse: 0.472833
2025-07-22 09:26:01 [DEBUG] XGB iter  25: tr-p-rmse: 0.053213	tr-a-peak@32: 1.000000	tr-rmse: 0.461829	tr-rmse: 0.461829
2025-07-22 09:26:01 [DEBUG] XGB iter  50: tr-p-rmse: 0.053213	tr-a-peak@32: 1.000000	tr-rmse: 0.461829	tr-rmse: 0.461829
2025-07-22 09:26:01 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.05321	tr-a-peak@32:1.00000	tr-rmse:0.46183	tr-rmse:0.46183 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:26:40 [DEBUG] XGB validation: p-rmse: 0.113018	a-peak@32: 0.887521
2025-07-22 09:26:40 [DEBUG] XGB iter   0: tr-p-rmse: 0.488378	tr-a-peak@32: 0.972254	tr-rmse: 0.386795	tr-rmse: 0.386795
2025-07-22 09:26:40 [DEBUG] XGB iter  25: tr-p-rmse: 0.045229	tr-a-peak@32: 1.000000	tr-rmse: 0.384553	tr-rmse: 0.384553
2025-07-22 09:26:40 [DEBUG] XGB iter  50: tr-p-rmse: 0.045229	tr-a-peak@32: 1.000000	tr-rmse: 0.384553	tr-rmse: 0.384553
2025-07-22 09:26:40 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.04523	tr-a-peak@32:1.00000	tr-rmse:0.38455	tr-rmse:0.38455 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:27:23 [DEBUG] XGB validation: p-rmse: 0.310533	a-peak@32: 0.919492
2025-07-22 09:27:23 [DEBUG] XGB iter   0: tr-p-rmse: 0.462071	tr-a-peak@32: 0.713805	tr-rmse: 0.435638	tr-rmse: 0.435638
2025-07-22 09:27:23 [DEBUG] XGB iter  25: tr-p-rmse: 0.052390	tr-a-peak@32: 1.000000	tr-rmse: 0.434176	tr-rmse: 0.434176
2025-07-22 09:27:23 [DEBUG] XGB iter  50: tr-p-rmse: 0.052390	tr-a-peak@32: 1.000000	tr-rmse: 0.434176	tr-rmse: 0.434176
2025-07-22 09:27:23 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05236	tr-a-peak@32:1.00000	tr-rmse:0.43420	tr-rmse:0.43420 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:28:07 [DEBUG] XGB validation: p-rmse: 0.067888	a-peak@32: 1.000000
2025-07-22 09:28:07 [DEBUG] XGB iter   0: tr-p-rmse: 0.409731	tr-a-peak@32: 0.747022	tr-rmse: 0.399713	tr-rmse: 0.399713
2025-07-22 09:28:07 [DEBUG] XGB iter  25: tr-p-rmse: 0.045215	tr-a-peak@32: 1.000000	tr-rmse: 0.402039	tr-rmse: 0.402039
2025-07-22 09:28:07 [DEBUG] XGB iter  50: tr-p-rmse: 0.045215	tr-a-peak@32: 1.000000	tr-rmse: 0.402039	tr-rmse: 0.402039
2025-07-22 09:28:07 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.04521	tr-a-peak@32:1.00000	tr-rmse:0.40204	tr-rmse:0.40204 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:28:51 [DEBUG] XGB validation: p-rmse: 0.045016	a-peak@32: 0.869791
2025-07-22 09:28:51 [DEBUG] XGB iter   0: tr-p-rmse: 0.409839	tr-a-peak@32: 0.830491	tr-rmse: 0.372731	tr-rmse: 0.372731
2025-07-22 09:28:51 [DEBUG] XGB iter  25: tr-p-rmse: 0.043905	tr-a-peak@32: 1.000000	tr-rmse: 0.376018	tr-rmse: 0.376018
2025-07-22 09:28:51 [DEBUG] XGB iter  50: tr-p-rmse: 0.043905	tr-a-peak@32: 1.000000	tr-rmse: 0.376018	tr-rmse: 0.376018
2025-07-22 09:28:51 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.04390	tr-a-peak@32:1.00000	tr-rmse:0.37602	tr-rmse:0.37602 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:29:33 [DEBUG] XGB validation: p-rmse: 0.032991	a-peak@32: 0.932370
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:30:21 [DEBUG] XGB validation: p-rmse: 0.043325	a-peak@32: 0.660100
2025-07-22 09:30:21 [DEBUG] XGB iter   0: tr-p-rmse: 0.409427	tr-a-peak@32: 0.721536	tr-rmse: 0.335708	tr-rmse: 0.335708
2025-07-22 09:30:21 [DEBUG] XGB iter  25: tr-p-rmse: 0.039076	tr-a-peak@32: 1.000000	tr-rmse: 0.339741	tr-rmse: 0.339741
2025-07-22 09:30:21 [DEBUG] XGB iter  50: tr-p-rmse: 0.039076	tr-a-peak@32: 1.000000	tr-rmse: 0.339741	tr-rmse: 0.339741
2025-07-22 09:30:21 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.03908	tr-a-peak@32:1.00000	tr-rmse:0.33974	tr-rmse:0.33974 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:31:03 [DEBUG] XGB validation: p-rmse: 0.027655	a-peak@32: 0.871271
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:31:47 [DEBUG] XGB validation: p-rmse: 0.025255	a-peak@32: 0.945594
2025-07-22 09:31:47 [DEBUG] XGB iter   0: tr-p-rmse: 0.410660	tr-a-peak@32: 0.812450	tr-rmse: 0.312412	tr-rmse: 0.312412
2025-07-22 09:31:47 [DEBUG] XGB iter  25: tr-p-rmse: 0.035646	tr-a-peak@32: 1.000000	tr-rmse: 0.316381	tr-rmse: 0.316381
2025-07-22 09:31:47 [DEBUG] XGB iter  50: tr-p-rmse: 0.035646	tr-a-peak@32: 1.000000	tr-rmse: 0.316381	tr-rmse: 0.316381
2025-07-22 09:31:47 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.03565	tr-a-peak@32:1.00000	tr-rmse:0.31638	tr-rmse:0.31638 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:32:29 [DEBUG] XGB validation: p-rmse: 0.020904	a-peak@32: 0.949726
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:33:12 [DEBUG] XGB validation: p-rmse: 0.026772	a-peak@32: 0.904742
2025-07-22 09:33:12 [DEBUG] XGB iter   0: tr-p-rmse: 0.411347	tr-a-peak@32: 0.729295	tr-rmse: 0.295533	tr-rmse: 0.295533
2025-07-22 09:33:12 [DEBUG] XGB iter  25: tr-p-rmse: 0.033261	tr-a-peak@32: 1.000000	tr-rmse: 0.298675	tr-rmse: 0.298675
2025-07-22 09:33:12 [DEBUG] XGB iter  50: tr-p-rmse: 0.033261	tr-a-peak@32: 1.000000	tr-rmse: 0.298675	tr-rmse: 0.298675
2025-07-22 09:33:12 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.03326	tr-a-peak@32:1.00000	tr-rmse:0.29867	tr-rmse:0.29867 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:33:56 [DEBUG] XGB validation: p-rmse: 0.022922	a-peak@32: 0.801331
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:34:39 [DEBUG] XGB validation: p-rmse: 0.023244	a-peak@32: 0.965506
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:35:26 [DEBUG] XGB validation: p-rmse: 0.021832	a-peak@32: 0.832560
2025-07-22 09:35:26 [DEBUG] XGB iter   0: tr-p-rmse: 0.415768	tr-a-peak@32: 0.867375	tr-rmse: 0.276065	tr-rmse: 0.276065
2025-07-22 09:35:26 [DEBUG] XGB iter  25: tr-p-rmse: 0.027684	tr-a-peak@32: 1.000000	tr-rmse: 0.278907	tr-rmse: 0.278907
2025-07-22 09:35:26 [DEBUG] XGB iter  50: tr-p-rmse: 0.027684	tr-a-peak@32: 1.000000	tr-rmse: 0.278907	tr-rmse: 0.278907
2025-07-22 09:35:26 [DEBUG] XGB stopped. Best iteration: [10] tr-p-rmse:0.02768	tr-a-peak@32:1.00000	tr-rmse:0.27891	tr-rmse:0.27891 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:36:11 [DEBUG] XGB validation: p-rmse: 0.031738	a-peak@32: 0.632352
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:36:54 [DEBUG] XGB validation: p-rmse: 0.027394	a-peak@32: 0.768189
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:37:18 [DEBUG] XGB validation: p-rmse: 0.018064	a-peak@32: 0.933209
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:37:32 [DEBUG] XGB validation: p-rmse: 0.008732	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====

#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ < 700)
#define __shfl_sync(mask, var, lane, width) \
        __shfl((var), (lane), (width))

#define __shfl_down_sync(mask, var, offset, width) \
        __shfl_down((var), (offset), (width))

#define __shfl_up_sync(mask, var, offset, width) \
        __shfl_up((var), (offset), (width))
#endif


#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(256) main_kernel(float* __restrict__ A, float* __restrict__ T_softmax_norm);
extern "C" __global__ void __launch_bounds__(256) main_kernel(float* __restrict__ A, float* __restrict__ T_softmax_norm) {
  float in_thread_T_softmax_maxelem_shared[1];
  __shared__ float red_result[1];
  __shared__ float T_softmax_maxelem_shared[1];
  float in_thread_T_softmax_expsum_shared[1];
  __shared__ float red_result_1[1];
  __shared__ float T_softmax_expsum_shared[1];
  in_thread_T_softmax_maxelem_shared[0] = -3.402823e+38f;
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[((((int)blockIdx.x) * 512) + ((int)threadIdx.x))]);
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[(((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) + 256)]);
  float red_buf0[1];
  uint mask[1];
  float t0[1];
  float red_buf0_1[1];
  uint mask_1[1];
  float t0_1[1];
  __shared__ float red_buf_staging[8];
  red_buf0_1[0] = in_thread_T_softmax_maxelem_shared[0];
  mask_1[0] = __activemask();
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 16, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 8, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 4, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 2, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 1, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  if ((((int)threadIdx.x) % 32) == 0) {
    red_buf_staging[(((int)threadIdx.x) >> 5)] = red_buf0_1[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) < 8) {
    red_buf0[0] = red_buf_staging[((int)threadIdx.x)];
  }
  mask[0] = __activemask();
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 4, 32);
  red_buf0[0] = max(red_buf0[0], t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 2, 32);
  red_buf0[0] = max(red_buf0[0], t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 1, 32);
  red_buf0[0] = max(red_buf0[0], t0[0]);
  if (((int)threadIdx.x) == 0) {
    ((volatile float*)red_result)[0] = red_buf0[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) == 0) {
    T_softmax_maxelem_shared[0] = ((volatile float*)red_result)[0];
  }
  in_thread_T_softmax_expsum_shared[0] = 0.000000e+00f;
  __syncthreads();
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[((((int)blockIdx.x) * 512) + ((int)threadIdx.x))] - T_softmax_maxelem_shared[0])));
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[(((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) + 256)] - T_softmax_maxelem_shared[0])));
  float red_buf0_2[1];
  uint mask_2[1];
  float t0_2[1];
  float red_buf0_3[1];
  uint mask_3[1];
  float t0_3[1];
  __shared__ float red_buf_staging_1[8];
  red_buf0_3[0] = in_thread_T_softmax_expsum_shared[0];
  mask_3[0] = __activemask();
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 16, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 8, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 4, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 2, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 1, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  if ((((int)threadIdx.x) % 32) == 0) {
    red_buf_staging_1[(((int)threadIdx.x) >> 5)] = red_buf0_3[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) < 8) {
    red_buf0_2[0] = red_buf_staging_1[((int)threadIdx.x)];
  }
  mask_2[0] = __activemask();
  t0_2[0] = __shfl_down_sync(mask_2[0], red_buf0_2[0], 4, 32);
  red_buf0_2[0] = (red_buf0_2[0] + t0_2[0]);
  t0_2[0] = __shfl_down_sync(mask_2[0], red_buf0_2[0], 2, 32);
  red_buf0_2[0] = (red_buf0_2[0] + t0_2[0]);
  t0_2[0] = __shfl_down_sync(mask_2[0], red_buf0_2[0], 1, 32);
  red_buf0_2[0] = (red_buf0_2[0] + t0_2[0]);
  if (((int)threadIdx.x) == 0) {
    ((volatile float*)red_result_1)[0] = red_buf0_2[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) == 0) {
    T_softmax_expsum_shared[0] = ((volatile float*)red_result_1)[0];
  }
  __syncthreads();
  T_softmax_norm[((((int)blockIdx.x) * 512) + ((int)threadIdx.x))] = (__expf((A[((((int)blockIdx.x) * 512) + ((int)threadIdx.x))] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
  T_softmax_norm[(((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) + 256)] = (__expf((A[(((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) + 256)] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
}


The time of SFM is 0.005 ms
2025-07-22 09:37:32 [INFO] Logging directory: /tmp/tmp9thvaszo/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:41:02 [DEBUG] XGB iter   0: tr-p-rmse: 0.565730	tr-a-peak@32: 0.975199	tr-rmse: 0.314479	tr-rmse: 0.314479
2025-07-22 09:41:02 [DEBUG] XGB iter  25: tr-p-rmse: 0.042883	tr-a-peak@32: 1.000000	tr-rmse: 0.384426	tr-rmse: 0.384426
2025-07-22 09:41:02 [DEBUG] XGB iter  50: tr-p-rmse: 0.042883	tr-a-peak@32: 1.000000	tr-rmse: 0.384426	tr-rmse: 0.384426
2025-07-22 09:41:05 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.04288	tr-a-peak@32:1.00000	tr-rmse:0.38443	tr-rmse:0.38443 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:44:25 [DEBUG] XGB validation: p-rmse: 0.239591	a-peak@32: 0.922044
2025-07-22 09:44:25 [DEBUG] XGB iter   0: tr-p-rmse: 0.559087	tr-a-peak@32: 0.994470	tr-rmse: 0.241585	tr-rmse: 0.241585
2025-07-22 09:44:25 [DEBUG] XGB iter  25: tr-p-rmse: 0.048589	tr-a-peak@32: 1.000000	tr-rmse: 0.323332	tr-rmse: 0.323332
2025-07-22 09:44:25 [DEBUG] XGB iter  50: tr-p-rmse: 0.048589	tr-a-peak@32: 1.000000	tr-rmse: 0.323332	tr-rmse: 0.323332
2025-07-22 09:44:25 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.04859	tr-a-peak@32:1.00000	tr-rmse:0.32333	tr-rmse:0.32333 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:48:39 [DEBUG] XGB validation: p-rmse: 0.410691	a-peak@32: 0.746883
2025-07-22 09:48:39 [DEBUG] XGB iter   0: tr-p-rmse: 0.515911	tr-a-peak@32: 0.943640	tr-rmse: 0.277054	tr-rmse: 0.277054
2025-07-22 09:48:39 [DEBUG] XGB iter  25: tr-p-rmse: 0.053477	tr-a-peak@32: 0.981138	tr-rmse: 0.368729	tr-rmse: 0.368729
2025-07-22 09:48:39 [DEBUG] XGB iter  50: tr-p-rmse: 0.053477	tr-a-peak@32: 0.981138	tr-rmse: 0.368729	tr-rmse: 0.368729
2025-07-22 09:48:39 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.05348	tr-a-peak@32:0.98114	tr-rmse:0.36873	tr-rmse:0.36873 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:52:45 [DEBUG] XGB validation: p-rmse: 0.199876	a-peak@32: 0.800740
2025-07-22 09:52:45 [DEBUG] XGB iter   0: tr-p-rmse: 0.491476	tr-a-peak@32: 0.894966	tr-rmse: 0.317630	tr-rmse: 0.317630
2025-07-22 09:52:45 [DEBUG] XGB iter  25: tr-p-rmse: 0.071305	tr-a-peak@32: 0.992471	tr-rmse: 0.410419	tr-rmse: 0.410419
2025-07-22 09:52:45 [DEBUG] XGB iter  50: tr-p-rmse: 0.071305	tr-a-peak@32: 0.992471	tr-rmse: 0.410419	tr-rmse: 0.410419
2025-07-22 09:52:45 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.07130	tr-a-peak@32:0.99247	tr-rmse:0.41042	tr-rmse:0.41042 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 09:56:42 [DEBUG] XGB validation: p-rmse: 0.204944	a-peak@32: 0.902773
2025-07-22 09:56:42 [DEBUG] XGB iter   0: tr-p-rmse: 0.501485	tr-a-peak@32: 0.809250	tr-rmse: 0.288041	tr-rmse: 0.288041
2025-07-22 09:56:42 [DEBUG] XGB iter  25: tr-p-rmse: 0.066902	tr-a-peak@32: 1.000000	tr-rmse: 0.382590	tr-rmse: 0.382590
2025-07-22 09:56:42 [DEBUG] XGB iter  50: tr-p-rmse: 0.066902	tr-a-peak@32: 1.000000	tr-rmse: 0.382590	tr-rmse: 0.382590
2025-07-22 09:56:42 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.06690	tr-a-peak@32:1.00000	tr-rmse:0.38259	tr-rmse:0.38259 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:00:45 [DEBUG] XGB validation: p-rmse: 0.161871	a-peak@32: 0.987347
2025-07-22 10:00:45 [DEBUG] XGB iter   0: tr-p-rmse: 0.471533	tr-a-peak@32: 0.921433	tr-rmse: 0.325795	tr-rmse: 0.325795
2025-07-22 10:00:45 [DEBUG] XGB iter  25: tr-p-rmse: 0.072109	tr-a-peak@32: 1.000000	tr-rmse: 0.420001	tr-rmse: 0.420001
2025-07-22 10:00:45 [DEBUG] XGB iter  50: tr-p-rmse: 0.072109	tr-a-peak@32: 1.000000	tr-rmse: 0.420001	tr-rmse: 0.420001
2025-07-22 10:00:45 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.07211	tr-a-peak@32:1.00000	tr-rmse:0.42000	tr-rmse:0.42000 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:04:42 [DEBUG] XGB validation: p-rmse: 0.224666	a-peak@32: 0.976498
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:08:40 [DEBUG] XGB validation: p-rmse: 0.309228	a-peak@32: 0.987185
2025-07-22 10:08:40 [DEBUG] XGB iter   0: tr-p-rmse: 0.510335	tr-a-peak@32: 0.622239	tr-rmse: 0.218114	tr-rmse: 0.218114
2025-07-22 10:08:40 [DEBUG] XGB iter  25: tr-p-rmse: 0.072256	tr-a-peak@32: 1.000000	tr-rmse: 0.323117	tr-rmse: 0.323117
2025-07-22 10:08:40 [DEBUG] XGB iter  50: tr-p-rmse: 0.072256	tr-a-peak@32: 1.000000	tr-rmse: 0.323117	tr-rmse: 0.323117
2025-07-22 10:08:40 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.07226	tr-a-peak@32:1.00000	tr-rmse:0.32312	tr-rmse:0.32312 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:12:44 [DEBUG] XGB validation: p-rmse: 0.095028	a-peak@32: 0.985819
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:16:44 [DEBUG] XGB validation: p-rmse: 0.106644	a-peak@32: 0.908633
2025-07-22 10:16:44 [DEBUG] XGB iter   0: tr-p-rmse: 0.493532	tr-a-peak@32: 0.645350	tr-rmse: 0.229975	tr-rmse: 0.229975
2025-07-22 10:16:44 [DEBUG] XGB iter  25: tr-p-rmse: 0.072682	tr-a-peak@32: 0.988512	tr-rmse: 0.338326	tr-rmse: 0.338326
2025-07-22 10:16:44 [DEBUG] XGB iter  50: tr-p-rmse: 0.072682	tr-a-peak@32: 0.988512	tr-rmse: 0.338326	tr-rmse: 0.338326
2025-07-22 10:16:44 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.07268	tr-a-peak@32:0.98851	tr-rmse:0.33833	tr-rmse:0.33833 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:20:43 [DEBUG] XGB validation: p-rmse: 0.083539	a-peak@32: 0.991538
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:24:40 [DEBUG] XGB validation: p-rmse: 0.127920	a-peak@32: 0.777514
2025-07-22 10:24:40 [DEBUG] XGB iter   0: tr-p-rmse: 0.482862	tr-a-peak@32: 0.981346	tr-rmse: 0.231642	tr-rmse: 0.231642
2025-07-22 10:24:40 [DEBUG] XGB iter  25: tr-p-rmse: 0.076492	tr-a-peak@32: 0.972139	tr-rmse: 0.342881	tr-rmse: 0.342881
2025-07-22 10:24:40 [DEBUG] XGB iter  50: tr-p-rmse: 0.076492	tr-a-peak@32: 0.972139	tr-rmse: 0.342881	tr-rmse: 0.342881
2025-07-22 10:24:40 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.07649	tr-a-peak@32:0.97214	tr-rmse:0.34288	tr-rmse:0.34288 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:28:44 [DEBUG] XGB validation: p-rmse: 0.118013	a-peak@32: 0.744823
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:32:42 [DEBUG] XGB validation: p-rmse: 0.085801	a-peak@32: 0.972773
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:36:41 [DEBUG] XGB validation: p-rmse: 0.115308	a-peak@32: 0.761570
2025-07-22 10:36:41 [DEBUG] XGB iter   0: tr-p-rmse: 0.473078	tr-a-peak@32: 0.653593	tr-rmse: 0.231979	tr-rmse: 0.231979
2025-07-22 10:36:41 [DEBUG] XGB iter  25: tr-p-rmse: 0.079606	tr-a-peak@32: 0.970020	tr-rmse: 0.345831	tr-rmse: 0.345831
2025-07-22 10:36:41 [DEBUG] XGB iter  50: tr-p-rmse: 0.079606	tr-a-peak@32: 0.970020	tr-rmse: 0.345831	tr-rmse: 0.345831
2025-07-22 10:36:41 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.07961	tr-a-peak@32:0.97002	tr-rmse:0.34583	tr-rmse:0.34583 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:40:42 [DEBUG] XGB validation: p-rmse: 0.117529	a-peak@32: 0.989408
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(224) main_kernel(float* __restrict__ bias, float* __restrict__ bn_offset, float* __restrict__ bn_scale, float* __restrict__ compute, half* __restrict__ data, half* __restrict__ kernel);
extern "C" __global__ void __launch_bounds__(224) main_kernel(float* __restrict__ bias, float* __restrict__ bn_offset, float* __restrict__ bn_scale, float* __restrict__ compute, half* __restrict__ data, half* __restrict__ kernel) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> Conv2dOutput_reindex_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PaddedInput_reindex_shared_dyn_wmma_matrix_a[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> kernel_reindex_shared_dyn_wmma_matrix_b[1];
  nvcuda::wmma::fill_fragment(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  uint4 condval;
  if (((2 <= ((int)blockIdx.y)) && (1 < ((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) >> 3) * 2))))) {
    condval = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) - 3648));
  } else {
    condval = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 2560)) = condval;
  uint4 condval_1;
  if ((1 < ((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) >> 3) * 2)))) {
    condval_1 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 3520));
  } else {
    condval_1 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4576)) = condval_1;
  uint4 condval_2;
  if ((1 < ((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) >> 3) * 2)))) {
    condval_2 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 10688));
  } else {
    condval_2 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6592)) = condval_2;
  uint4 condval_3;
  if ((1 < ((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) >> 3) * 2)))) {
    condval_3 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 17856));
  } else {
    condval_3 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8608)) = condval_3;
  if (((int)threadIdx.y) < 4) {
    *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(kernel + (((((((int)threadIdx.y) * 2048) + ((((int)threadIdx.x) >> 1) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 1) * 8)));
  }
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2560)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2576)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2592)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2608)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_4;
  if ((2 <= ((int)blockIdx.y))) {
    condval_4 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) - 3584));
  } else {
    condval_4 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 2560)) = condval_4;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4576)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 3584));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6592)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 10752));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8608)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 17920));
  if (((int)threadIdx.y) < 4) {
    *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(kernel + ((((((((int)threadIdx.y) * 2048) + ((((int)threadIdx.x) >> 1) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 8192));
  }
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2560)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2576)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2592)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2608)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_5;
  if ((2 <= ((int)blockIdx.y))) {
    condval_5 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) - 3520));
  } else {
    condval_5 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 2560)) = condval_5;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4576)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 3648));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6592)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 10816));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8608)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 17984));
  if (((int)threadIdx.y) < 4) {
    *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(kernel + ((((((((int)threadIdx.y) * 2048) + ((((int)threadIdx.x) >> 1) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 16384));
  }
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2560)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2576)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2592)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2608)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_6;
  if ((1 < ((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) >> 3) * 2)))) {
    condval_6 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) - 64));
  } else {
    condval_6 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 2560)) = condval_6;
  uint4 condval_7;
  if ((1 < ((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) >> 3) * 2)))) {
    condval_7 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 7104));
  } else {
    condval_7 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4576)) = condval_7;
  uint4 condval_8;
  if ((1 < ((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) >> 3) * 2)))) {
    condval_8 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 14272));
  } else {
    condval_8 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6592)) = condval_8;
  uint4 condval_9;
  if ((1 < ((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) >> 3) * 2)))) {
    condval_9 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 21440));
  } else {
    condval_9 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8608)) = condval_9;
  if (((int)threadIdx.y) < 4) {
    *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(kernel + ((((((((int)threadIdx.y) * 2048) + ((((int)threadIdx.x) >> 1) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 24576));
  }
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2560)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2576)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2592)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2608)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 2560)) = *(uint4*)(data + (((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4576)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 7168));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6592)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 14336));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8608)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 21504));
  if (((int)threadIdx.y) < 4) {
    *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(kernel + ((((((((int)threadIdx.y) * 2048) + ((((int)threadIdx.x) >> 1) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 32768));
  }
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2560)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2576)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2592)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2608)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 2560)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 64));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4576)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 7232));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6592)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 14400));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8608)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 21568));
  if (((int)threadIdx.y) < 4) {
    *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(kernel + ((((((((int)threadIdx.y) * 2048) + ((((int)threadIdx.x) >> 1) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 40960));
  }
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2560)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2576)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2592)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2608)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_10;
  if ((1 < ((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) >> 3) * 2)))) {
    condval_10 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 3520));
  } else {
    condval_10 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 2560)) = condval_10;
  uint4 condval_11;
  if ((1 < ((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) >> 3) * 2)))) {
    condval_11 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 10688));
  } else {
    condval_11 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4576)) = condval_11;
  uint4 condval_12;
  if ((1 < ((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) >> 3) * 2)))) {
    condval_12 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 17856));
  } else {
    condval_12 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6592)) = condval_12;
  uint4 condval_13;
  if ((1 < ((((int)threadIdx.y) * 8) + ((((int)threadIdx.x) >> 3) * 2)))) {
    condval_13 = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 25024));
  } else {
    condval_13 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8608)) = condval_13;
  if (((int)threadIdx.y) < 4) {
    *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(kernel + ((((((((int)threadIdx.y) * 2048) + ((((int)threadIdx.x) >> 1) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 49152));
  }
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2560)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2576)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2592)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2608)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 2560)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 3584));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4576)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 10752));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6592)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 17920));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8608)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 25088));
  if (((int)threadIdx.y) < 4) {
    *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(kernel + ((((((((int)threadIdx.y) * 2048) + ((((int)threadIdx.x) >> 1) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 57344));
  }
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2560)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2576)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2592)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2608)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 2560)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 3648));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4576)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 10816));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6592)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 17984));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8608)) = *(uint4*)(data + ((((((((int)blockIdx.y) >> 1) * 28672) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)threadIdx.x) & 7) * 8)) + 25152));
  if (((int)threadIdx.y) < 4) {
    *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 640) + ((((int)threadIdx.x) >> 1) * 40)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(kernel + ((((((((int)threadIdx.y) * 2048) + ((((int)threadIdx.x) >> 1) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 65536));
  }
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2560)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2576)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2592)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + 2608)])), 72);
  nvcuda::wmma::load_matrix_sync(kernel_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], PaddedInput_reindex_shared_dyn_wmma_matrix_a[0], kernel_reindex_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 256)])), Conv2dOutput_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  float2 __1;
    float2 __2;
      float2 __3;
        float2 __4;
          float2 __5;
          half2 v_ = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)));
          __5.x = (float)(v_.x);
          __5.y = (float)(v_.y);
          float2 v__1 = *(float2*)(bias + ((((((int)blockIdx.y) & 1) * 64) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
          __4.x = (__5.x+v__1.x);
          __4.y = (__5.y+v__1.y);
        float2 v__2 = *(float2*)(bn_scale + ((((((int)blockIdx.y) & 1) * 64) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
        __3.x = (__4.x*v__2.x);
        __3.y = (__4.y*v__2.y);
      float2 v__3 = *(float2*)(bn_offset + ((((((int)blockIdx.y) & 1) * 64) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
      __2.x = (__3.x+v__3.x);
      __2.y = (__3.y+v__3.y);
    float2 v__4 = make_float2(0.000000e+00f, 0.000000e+00f);
    __1.x = max(__2.x, v__4.x);
    __1.y = max(__2.y, v__4.y);
  *(float2*)(compute + (((((((((int)blockIdx.y) >> 1) * 14336) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2))) = __1;
  float2 __6;
    float2 __7;
      float2 __8;
        float2 __9;
          float2 __10;
          half2 v__5 = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 448));
          __10.x = (float)(v__5.x);
          __10.y = (float)(v__5.y);
          float2 v__6 = *(float2*)(bias + ((((((int)blockIdx.y) & 1) * 64) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
          __9.x = (__10.x+v__6.x);
          __9.y = (__10.y+v__6.y);
        float2 v__7 = *(float2*)(bn_scale + ((((((int)blockIdx.y) & 1) * 64) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
        __8.x = (__9.x*v__7.x);
        __8.y = (__9.y*v__7.y);
      float2 v__8 = *(float2*)(bn_offset + ((((((int)blockIdx.y) & 1) * 64) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
      __7.x = (__8.x+v__8.x);
      __7.y = (__8.y+v__8.y);
    float2 v__9 = make_float2(0.000000e+00f, 0.000000e+00f);
    __6.x = max(__7.x, v__9.x);
    __6.y = max(__7.y, v__9.y);
  *(float2*)(compute + ((((((((((int)blockIdx.y) >> 1) * 14336) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 3584)) = __6;
  float2 __11;
    float2 __12;
      float2 __13;
        float2 __14;
          float2 __15;
          half2 v__10 = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 896));
          __15.x = (float)(v__10.x);
          __15.y = (float)(v__10.y);
          float2 v__11 = *(float2*)(bias + ((((((int)blockIdx.y) & 1) * 64) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
          __14.x = (__15.x+v__11.x);
          __14.y = (__15.y+v__11.y);
        float2 v__12 = *(float2*)(bn_scale + ((((((int)blockIdx.y) & 1) * 64) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
        __13.x = (__14.x*v__12.x);
        __13.y = (__14.y*v__12.y);
      float2 v__13 = *(float2*)(bn_offset + ((((((int)blockIdx.y) & 1) * 64) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
      __12.x = (__13.x+v__13.x);
      __12.y = (__13.y+v__13.y);
    float2 v__14 = make_float2(0.000000e+00f, 0.000000e+00f);
    __11.x = max(__12.x, v__14.x);
    __11.y = max(__12.y, v__14.y);
  *(float2*)(compute + ((((((((((int)blockIdx.y) >> 1) * 14336) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 7168)) = __11;
  float2 __16;
    float2 __17;
      float2 __18;
        float2 __19;
          float2 __20;
          half2 v__15 = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1344));
          __20.x = (float)(v__15.x);
          __20.y = (float)(v__15.y);
          float2 v__16 = *(float2*)(bias + ((((((int)blockIdx.y) & 1) * 64) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
          __19.x = (__20.x+v__16.x);
          __19.y = (__20.y+v__16.y);
        float2 v__17 = *(float2*)(bn_scale + ((((((int)blockIdx.y) & 1) * 64) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
        __18.x = (__19.x*v__17.x);
        __18.y = (__19.y*v__17.y);
      float2 v__18 = *(float2*)(bn_offset + ((((((int)blockIdx.y) & 1) * 64) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
      __17.x = (__18.x+v__18.x);
      __17.y = (__18.y+v__18.y);
    float2 v__19 = make_float2(0.000000e+00f, 0.000000e+00f);
    __16.x = max(__17.x, v__19.x);
    __16.y = max(__17.y, v__19.y);
  *(float2*)(compute + ((((((((((int)blockIdx.y) >> 1) * 14336) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 10752)) = __16;
}


The time of CBR is 0.015 ms
2025-07-22 10:40:44 [INFO] Logging directory: /tmp/tmp0pw47fa9/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:43:11 [DEBUG] XGB iter   0: tr-p-rmse: 0.456219	tr-a-peak@32: 0.874997	tr-rmse: 0.371039	tr-rmse: 0.371039
2025-07-22 10:43:11 [DEBUG] XGB iter  25: tr-p-rmse: 0.031614	tr-a-peak@32: 0.999472	tr-rmse: 0.453463	tr-rmse: 0.453463
2025-07-22 10:43:11 [DEBUG] XGB iter  50: tr-p-rmse: 0.031614	tr-a-peak@32: 0.999472	tr-rmse: 0.453463	tr-rmse: 0.453463
2025-07-22 10:43:11 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.03161	tr-a-peak@32:0.99947	tr-rmse:0.45346	tr-rmse:0.45346 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:45:32 [DEBUG] XGB validation: p-rmse: 0.184597	a-peak@32: 0.995967
2025-07-22 10:45:32 [DEBUG] XGB iter   0: tr-p-rmse: 0.447081	tr-a-peak@32: 0.970587	tr-rmse: 0.357765	tr-rmse: 0.357765
2025-07-22 10:45:32 [DEBUG] XGB iter  25: tr-p-rmse: 0.029841	tr-a-peak@32: 0.999280	tr-rmse: 0.444186	tr-rmse: 0.444186
2025-07-22 10:45:32 [DEBUG] XGB iter  50: tr-p-rmse: 0.029841	tr-a-peak@32: 0.999280	tr-rmse: 0.444186	tr-rmse: 0.444186
2025-07-22 10:45:32 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.02984	tr-a-peak@32:0.99928	tr-rmse:0.44419	tr-rmse:0.44419 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:48:18 [DEBUG] XGB validation: p-rmse: 0.303594	a-peak@32: 0.928234
2025-07-22 10:48:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.433130	tr-a-peak@32: 0.751557	tr-rmse: 0.340200	tr-rmse: 0.340200
2025-07-22 10:48:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.048674	tr-a-peak@32: 0.999472	tr-rmse: 0.433928	tr-rmse: 0.433928
2025-07-22 10:48:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.048674	tr-a-peak@32: 0.999472	tr-rmse: 0.433928	tr-rmse: 0.433928
2025-07-22 10:48:18 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.04867	tr-a-peak@32:0.99947	tr-rmse:0.43393	tr-rmse:0.43393 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:51:05 [DEBUG] XGB validation: p-rmse: 0.329107	a-peak@32: 0.979055
2025-07-22 10:51:05 [DEBUG] XGB iter   0: tr-p-rmse: 0.473510	tr-a-peak@32: 0.995070	tr-rmse: 0.362237	tr-rmse: 0.362237
2025-07-22 10:51:05 [DEBUG] XGB iter  25: tr-p-rmse: 0.050385	tr-a-peak@32: 1.000000	tr-rmse: 0.440428	tr-rmse: 0.440428
2025-07-22 10:51:05 [DEBUG] XGB iter  50: tr-p-rmse: 0.050385	tr-a-peak@32: 1.000000	tr-rmse: 0.440428	tr-rmse: 0.440428
2025-07-22 10:51:05 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05038	tr-a-peak@32:1.00000	tr-rmse:0.44043	tr-rmse:0.44043 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:53:52 [DEBUG] XGB validation: p-rmse: 0.521688	a-peak@32: 0.950935
2025-07-22 10:53:52 [DEBUG] XGB iter   0: tr-p-rmse: 0.483915	tr-a-peak@32: 0.995138	tr-rmse: 0.345363	tr-rmse: 0.345363
2025-07-22 10:53:52 [DEBUG] XGB iter  25: tr-p-rmse: 0.097728	tr-a-peak@32: 0.993196	tr-rmse: 0.427257	tr-rmse: 0.427257
2025-07-22 10:53:52 [DEBUG] XGB iter  50: tr-p-rmse: 0.097728	tr-a-peak@32: 0.993196	tr-rmse: 0.427257	tr-rmse: 0.427257
2025-07-22 10:53:52 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.09773	tr-a-peak@32:0.99320	tr-rmse:0.42726	tr-rmse:0.42726 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:56:39 [DEBUG] XGB validation: p-rmse: 0.402402	a-peak@32: 0.926861
2025-07-22 10:56:39 [DEBUG] XGB iter   0: tr-p-rmse: 0.480851	tr-a-peak@32: 0.842108	tr-rmse: 0.327972	tr-rmse: 0.327972
2025-07-22 10:56:39 [DEBUG] XGB iter  25: tr-p-rmse: 0.116118	tr-a-peak@32: 0.997484	tr-rmse: 0.415362	tr-rmse: 0.415362
2025-07-22 10:56:39 [DEBUG] XGB iter  50: tr-p-rmse: 0.116118	tr-a-peak@32: 0.997484	tr-rmse: 0.415362	tr-rmse: 0.415362
2025-07-22 10:56:39 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.11612	tr-a-peak@32:0.99748	tr-rmse:0.41536	tr-rmse:0.41536 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 10:59:26 [DEBUG] XGB validation: p-rmse: 0.313654	a-peak@32: 0.887287
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 11:02:15 [DEBUG] XGB validation: p-rmse: 0.257995	a-peak@32: 0.981487
2025-07-22 11:02:15 [DEBUG] XGB iter   0: tr-p-rmse: 0.486398	tr-a-peak@32: 0.436123	tr-rmse: 0.259322	tr-rmse: 0.259322
2025-07-22 11:02:15 [DEBUG] XGB iter  25: tr-p-rmse: 0.106584	tr-a-peak@32: 1.000000	tr-rmse: 0.358342	tr-rmse: 0.358342
2025-07-22 11:02:15 [DEBUG] XGB iter  50: tr-p-rmse: 0.106584	tr-a-peak@32: 1.000000	tr-rmse: 0.358342	tr-rmse: 0.358342
2025-07-22 11:02:15 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.10658	tr-a-peak@32:1.00000	tr-rmse:0.35834	tr-rmse:0.35834 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 11:05:06 [DEBUG] XGB validation: p-rmse: 0.252923	a-peak@32: 0.559132
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 11:07:54 [DEBUG] XGB validation: p-rmse: 0.237476	a-peak@32: 0.934493
2025-07-22 11:07:54 [DEBUG] XGB iter   0: tr-p-rmse: 0.482175	tr-a-peak@32: 0.846564	tr-rmse: 0.247513	tr-rmse: 0.247513
2025-07-22 11:07:54 [DEBUG] XGB iter  25: tr-p-rmse: 0.110785	tr-a-peak@32: 0.966789	tr-rmse: 0.351193	tr-rmse: 0.351193
2025-07-22 11:07:54 [DEBUG] XGB iter  50: tr-p-rmse: 0.110785	tr-a-peak@32: 0.966789	tr-rmse: 0.351193	tr-rmse: 0.351193
2025-07-22 11:07:54 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.11078	tr-a-peak@32:0.96679	tr-rmse:0.35119	tr-rmse:0.35119 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 11:10:43 [DEBUG] XGB validation: p-rmse: 0.202217	a-peak@32: 0.954751
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 11:13:31 [DEBUG] XGB validation: p-rmse: 0.187302	a-peak@32: 0.956587
2025-07-22 11:13:31 [DEBUG] XGB iter   0: tr-p-rmse: 0.479118	tr-a-peak@32: 0.535382	tr-rmse: 0.234307	tr-rmse: 0.234307
2025-07-22 11:13:31 [DEBUG] XGB iter  25: tr-p-rmse: 0.108772	tr-a-peak@32: 0.964086	tr-rmse: 0.341815	tr-rmse: 0.341815
2025-07-22 11:13:31 [DEBUG] XGB iter  50: tr-p-rmse: 0.108772	tr-a-peak@32: 0.964086	tr-rmse: 0.341815	tr-rmse: 0.341815
2025-07-22 11:13:31 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.10877	tr-a-peak@32:0.96409	tr-rmse:0.34181	tr-rmse:0.34181 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 11:16:20 [DEBUG] XGB validation: p-rmse: 0.165168	a-peak@32: 0.942561
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 11:19:06 [DEBUG] XGB validation: p-rmse: 0.151245	a-peak@32: 0.926829
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 11:21:53 [DEBUG] XGB validation: p-rmse: 0.143038	a-peak@32: 1.000000
2025-07-22 11:21:53 [DEBUG] XGB iter   0: tr-p-rmse: 0.475732	tr-a-peak@32: 0.448123	tr-rmse: 0.219363	tr-rmse: 0.219363
2025-07-22 11:21:53 [DEBUG] XGB iter  25: tr-p-rmse: 0.103875	tr-a-peak@32: 0.965484	tr-rmse: 0.330782	tr-rmse: 0.330782
2025-07-22 11:21:54 [DEBUG] XGB iter  50: tr-p-rmse: 0.103875	tr-a-peak@32: 0.965484	tr-rmse: 0.330782	tr-rmse: 0.330782
2025-07-22 11:21:54 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.10387	tr-a-peak@32:0.96548	tr-rmse:0.33078	tr-rmse:0.33078 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-22 11:24:40 [DEBUG] XGB validation: p-rmse: 0.122999	a-peak@32: 0.902827
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(64) main_kernel(half* __restrict__ C, half* __restrict__ query, half* __restrict__ value);
extern "C" __global__ void __launch_bounds__(64) main_kernel(half* __restrict__ C, half* __restrict__ query, half* __restrict__ value) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> C_reindex_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> query_T_reindex_shared_dyn_wmma_matrix_a[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> value_T_reindex_shared_dyn_wmma_matrix_b[1];
  nvcuda::wmma::fill_fragment(C_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  for (int ax0_ax1_ax2_ax3_fused_0 = 0; ax0_ax1_ax2_ax3_fused_0 < 16; ++ax0_ax1_ax2_ax3_fused_0) {
    *(half2*)(((half*)buf_dyn_shmem) + (((ax0_ax1_ax2_ax3_fused_0 * 144) + (((int)threadIdx.y) * 72)) + (((int)threadIdx.x) * 2))) = *(half2*)(query + ((((((((int)blockIdx.x) >> 2) * 32768) + (ax0_ax1_ax2_ax3_fused_0 * 2048)) + (((int)threadIdx.y) * 1024)) + ((((int)blockIdx.y) >> 1) * 64)) + (((int)threadIdx.x) * 2)));
  }
  for (int ax0_ax1_ax2_ax3_fused_0_1 = 0; ax0_ax1_ax2_ax3_fused_0_1 < 8; ++ax0_ax1_ax2_ax3_fused_0_1) {
    int2 v_ = make_int2((((((((((((int)blockIdx.y) & 1) * 65536) + ((((int)blockIdx.x) & 3) * 16384)) + ((((int)threadIdx.x) & 7) * 2048)) + ((((int)blockIdx.y) >> 1) * 64)) + (ax0_ax1_ax2_ax3_fused_0_1 * 8)) + (((int)threadIdx.y) * 4)) + (((int)threadIdx.x) >> 3)))+(1024*0), (((((((((((int)blockIdx.y) & 1) * 65536) + ((((int)blockIdx.x) & 3) * 16384)) + ((((int)threadIdx.x) & 7) * 2048)) + ((((int)blockIdx.y) >> 1) * 64)) + (ax0_ax1_ax2_ax3_fused_0_1 * 8)) + (((int)threadIdx.y) * 4)) + (((int)threadIdx.x) >> 3)))+(1024*1));
    *(half2*)(((half*)buf_dyn_shmem) + (((((ax0_ax1_ax2_ax3_fused_0_1 * 320) + (((int)threadIdx.y) * 160)) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 2)) + 2304)) = make_half2(value[v_.x],value[v_.y]);
  }
  __syncthreads();
  for (int ax4_0_1 = 0; ax4_0_1 < 4; ++ax4_0_1) {
    nvcuda::wmma::load_matrix_sync(query_T_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 1152) + (ax4_0_1 * 16))])), 72);
    nvcuda::wmma::load_matrix_sync(value_T_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((ax4_0_1 * 640) + 2304)])), 40);
    nvcuda::wmma::mma_sync(C_reindex_shared_dyn_wmma_accumulator[0], query_T_reindex_shared_dyn_wmma_matrix_a[0], value_T_reindex_shared_dyn_wmma_matrix_b[0], C_reindex_shared_dyn_wmma_accumulator[0]);
  }
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 256)])), C_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  for (int ax2_ax3_ax5_ax6_ax7_fused_0 = 0; ax2_ax3_ax5_ax6_ax7_fused_0 < 4; ++ax2_ax3_ax5_ax6_ax7_fused_0) {
    *(half2*)(C + (((((((((((int)blockIdx.y) >> 1) * 16384) + ((((int)blockIdx.x) >> 2) * 4096)) + (ax2_ax3_ax5_ax6_ax7_fused_0 * 1024)) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2))) = *(half2*)(((half*)buf_dyn_shmem) + (((ax2_ax3_ax5_ax6_ax7_fused_0 * 128) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)));
  }
}


The time of TBG is 0.010 ms

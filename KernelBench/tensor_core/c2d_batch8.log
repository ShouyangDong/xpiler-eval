===========================
2025-08-07 06:42:00 [INFO] Logging directory: /tmp/tmpsdzybjg1/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 06:45:36 [DEBUG] XGB iter   0: tr-p-rmse: 0.542112	tr-a-peak@32: 0.988333	tr-rmse: 0.329885	tr-rmse: 0.329885
2025-08-07 06:45:36 [DEBUG] XGB iter  25: tr-p-rmse: 0.046045	tr-a-peak@32: 1.000000	tr-rmse: 0.411388	tr-rmse: 0.411388
2025-08-07 06:45:36 [DEBUG] XGB iter  50: tr-p-rmse: 0.046045	tr-a-peak@32: 1.000000	tr-rmse: 0.411388	tr-rmse: 0.411388
2025-08-07 06:45:36 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.04605	tr-a-peak@32:1.00000	tr-rmse:0.41139	tr-rmse:0.41139 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 06:49:18 [DEBUG] XGB validation: p-rmse: 0.188164	a-peak@32: 0.825808
2025-08-07 06:49:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.548393	tr-a-peak@32: 1.000000	tr-rmse: 0.267070	tr-rmse: 0.267070
2025-08-07 06:49:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.042432	tr-a-peak@32: 1.000000	tr-rmse: 0.354442	tr-rmse: 0.354442
2025-08-07 06:49:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.042432	tr-a-peak@32: 1.000000	tr-rmse: 0.354442	tr-rmse: 0.354442
2025-08-07 06:49:18 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.04243	tr-a-peak@32:1.00000	tr-rmse:0.35444	tr-rmse:0.35444 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 06:54:34 [DEBUG] XGB validation: p-rmse: 0.349478	a-peak@32: 0.848455
2025-08-07 06:54:34 [DEBUG] XGB iter   0: tr-p-rmse: 0.536871	tr-a-peak@32: 0.743188	tr-rmse: 0.279711	tr-rmse: 0.279711
2025-08-07 06:54:34 [DEBUG] XGB iter  25: tr-p-rmse: 0.054105	tr-a-peak@32: 1.000000	tr-rmse: 0.367118	tr-rmse: 0.367118
2025-08-07 06:54:34 [DEBUG] XGB iter  50: tr-p-rmse: 0.054105	tr-a-peak@32: 1.000000	tr-rmse: 0.367118	tr-rmse: 0.367118
2025-08-07 06:54:34 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05411	tr-a-peak@32:1.00000	tr-rmse:0.36712	tr-rmse:0.36712 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 06:59:27 [DEBUG] XGB validation: p-rmse: 0.184632	a-peak@32: 0.975241
2025-08-07 06:59:27 [DEBUG] XGB iter   0: tr-p-rmse: 0.506838	tr-a-peak@32: 0.737929	tr-rmse: 0.322423	tr-rmse: 0.322423
2025-08-07 06:59:27 [DEBUG] XGB iter  25: tr-p-rmse: 0.052815	tr-a-peak@32: 0.998538	tr-rmse: 0.411235	tr-rmse: 0.411235
2025-08-07 06:59:27 [DEBUG] XGB iter  50: tr-p-rmse: 0.052815	tr-a-peak@32: 0.998538	tr-rmse: 0.411235	tr-rmse: 0.411235
2025-08-07 06:59:27 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.05282	tr-a-peak@32:0.99854	tr-rmse:0.41123	tr-rmse:0.41123 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:04:05 [DEBUG] XGB validation: p-rmse: 0.101428	a-peak@32: 0.987743
2025-08-07 07:04:05 [DEBUG] XGB iter   0: tr-p-rmse: 0.478483	tr-a-peak@32: 0.859955	tr-rmse: 0.357310	tr-rmse: 0.357310
2025-08-07 07:04:05 [DEBUG] XGB iter  25: tr-p-rmse: 0.053476	tr-a-peak@32: 0.995615	tr-rmse: 0.446656	tr-rmse: 0.446656
2025-08-07 07:04:05 [DEBUG] XGB iter  50: tr-p-rmse: 0.053476	tr-a-peak@32: 0.995615	tr-rmse: 0.446656	tr-rmse: 0.446656
2025-08-07 07:04:05 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05348	tr-a-peak@32:0.99562	tr-rmse:0.44665	tr-rmse:0.44665 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:09:01 [DEBUG] XGB validation: p-rmse: 0.067895	a-peak@32: 0.946873
2025-08-07 07:09:01 [DEBUG] XGB iter   0: tr-p-rmse: 0.453571	tr-a-peak@32: 0.977751	tr-rmse: 0.384847	tr-rmse: 0.384847
2025-08-07 07:09:01 [DEBUG] XGB iter  25: tr-p-rmse: 0.051527	tr-a-peak@32: 0.994571	tr-rmse: 0.473814	tr-rmse: 0.473814
2025-08-07 07:09:01 [DEBUG] XGB iter  50: tr-p-rmse: 0.051527	tr-a-peak@32: 0.994571	tr-rmse: 0.473814	tr-rmse: 0.473814
2025-08-07 07:09:01 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05153	tr-a-peak@32:0.99457	tr-rmse:0.47381	tr-rmse:0.47381 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:14:02 [DEBUG] XGB validation: p-rmse: 0.089208	a-peak@32: 0.988140
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:19:04 [DEBUG] XGB validation: p-rmse: 0.092066	a-peak@32: 0.980411
2025-08-07 07:19:04 [DEBUG] XGB iter   0: tr-p-rmse: 0.424361	tr-a-peak@32: 0.943788	tr-rmse: 0.410097	tr-rmse: 0.410097
2025-08-07 07:19:04 [DEBUG] XGB iter  25: tr-p-rmse: 0.056151	tr-a-peak@32: 0.973376	tr-rmse: 0.498651	tr-rmse: 0.498651
2025-08-07 07:19:04 [DEBUG] XGB iter  50: tr-p-rmse: 0.056151	tr-a-peak@32: 0.973376	tr-rmse: 0.498651	tr-rmse: 0.498651
2025-08-07 07:19:04 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05615	tr-a-peak@32:0.97338	tr-rmse:0.49865	tr-rmse:0.49865 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:23:47 [DEBUG] XGB validation: p-rmse: 0.141743	a-peak@32: 0.990675
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:28:32 [DEBUG] XGB validation: p-rmse: 0.148107	a-peak@32: 0.969671
2025-08-07 07:28:32 [DEBUG] XGB iter   0: tr-p-rmse: 0.414068	tr-a-peak@32: 0.948722	tr-rmse: 0.407379	tr-rmse: 0.407379
2025-08-07 07:28:32 [DEBUG] XGB iter  25: tr-p-rmse: 0.054014	tr-a-peak@32: 0.980034	tr-rmse: 0.497276	tr-rmse: 0.497276
2025-08-07 07:28:32 [DEBUG] XGB iter  50: tr-p-rmse: 0.054014	tr-a-peak@32: 0.980034	tr-rmse: 0.497276	tr-rmse: 0.497276
2025-08-07 07:28:32 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05401	tr-a-peak@32:0.98003	tr-rmse:0.49728	tr-rmse:0.49728 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:33:05 [DEBUG] XGB validation: p-rmse: 0.164439	a-peak@32: 0.865554
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:37:32 [DEBUG] XGB validation: p-rmse: 0.182148	a-peak@32: 0.968844
2025-08-07 07:37:32 [DEBUG] XGB iter   0: tr-p-rmse: 0.408320	tr-a-peak@32: 0.962435	tr-rmse: 0.409142	tr-rmse: 0.409142
2025-08-07 07:37:32 [DEBUG] XGB iter  25: tr-p-rmse: 0.055569	tr-a-peak@32: 0.974829	tr-rmse: 0.499184	tr-rmse: 0.499184
2025-08-07 07:37:32 [DEBUG] XGB iter  50: tr-p-rmse: 0.055569	tr-a-peak@32: 0.974829	tr-rmse: 0.499184	tr-rmse: 0.499184
2025-08-07 07:37:32 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05557	tr-a-peak@32:0.97483	tr-rmse:0.49918	tr-rmse:0.49918 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:41:55 [DEBUG] XGB validation: p-rmse: 0.069261	a-peak@32: 0.984900
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:46:26 [DEBUG] XGB validation: p-rmse: 0.071064	a-peak@32: 0.982456
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:50:50 [DEBUG] XGB validation: p-rmse: 0.105823	a-peak@32: 0.972606
2025-08-07 07:50:50 [DEBUG] XGB iter   0: tr-p-rmse: 0.390950	tr-a-peak@32: 0.965763	tr-rmse: 0.424666	tr-rmse: 0.424666
2025-08-07 07:50:50 [DEBUG] XGB iter  25: tr-p-rmse: 0.055008	tr-a-peak@32: 0.976142	tr-rmse: 0.513275	tr-rmse: 0.513275
2025-08-07 07:50:50 [DEBUG] XGB iter  50: tr-p-rmse: 0.055008	tr-a-peak@32: 0.976142	tr-rmse: 0.513275	tr-rmse: 0.513275
2025-08-07 07:50:50 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05501	tr-a-peak@32:0.97614	tr-rmse:0.51327	tr-rmse:0.51327 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:55:34 [DEBUG] XGB validation: p-rmse: 0.167260	a-peak@32: 0.969065
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(448) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(448) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_pad_shared_dyn_wmma_matrix_a[2];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_pad_shared_dyn_wmma_matrix_b[2];
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3], 0.000000e+00f);
  for (int ax2_0_0 = 0; ax2_0_0 < 5; ++ax2_0_0) {
    __syncthreads();
    half condval;
    if (((((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) < 147) && (3 <= (((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)))) && ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)) < 227)) && (3 <= (((((int)threadIdx.y) * 4) + ((((int)threadIdx.x) >> 4) * 2)) + ((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) % 21) / 3))))) {
      condval = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + (((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) % 21) / 3) * 3)) + (((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) % 3)) - 2025)];
    } else {
      condval = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 2304)] = condval;
    half condval_1;
    if (((((((ax2_0_0 * 16) + (((int)threadIdx.x) & 15)) < 73) && (3 <= (((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)))) && ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)) < 227)) && (3 <= (((((int)threadIdx.y) * 4) + ((((int)threadIdx.x) >> 4) * 2)) + (((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 21) / 3))))) {
      condval_1 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + (((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + ((((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 21) / 3) * 3)) + ((((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 3)) - 2025)];
    } else {
      condval_1 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 2305)] = condval_1;
    half condval_2;
    if ((((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) < 147) && (3 <= (((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)))) && ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)) < 227))) {
      condval_2 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + (((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) % 21) / 3) * 3)) + (((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) % 3)) - 1857)];
    } else {
      condval_2 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 3424)] = condval_2;
    half condval_3;
    if ((((((ax2_0_0 * 16) + (((int)threadIdx.x) & 15)) < 73) && (3 <= (((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)))) && ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)) < 227))) {
      condval_3 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + (((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + ((((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 21) / 3) * 3)) + ((((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 3)) - 1857)];
    } else {
      condval_3 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 3425)] = condval_3;
    half condval_4;
    if ((((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) < 147) && (3 <= (((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)))) && ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)) < 227))) {
      condval_4 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + (((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) % 21) / 3) * 3)) + (((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) % 3)) - 1689)];
    } else {
      condval_4 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 4544)] = condval_4;
    half condval_5;
    if ((((((ax2_0_0 * 16) + (((int)threadIdx.x) & 15)) < 73) && (3 <= (((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)))) && ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)) < 227))) {
      condval_5 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + (((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + ((((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 21) / 3) * 3)) + ((((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 3)) - 1689)];
    } else {
      condval_5 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 4545)] = condval_5;
    half condval_6;
    if (((((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) < 147) && (3 <= (((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)))) && ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)) < 227)) && ((((((int)threadIdx.y) * 4) + ((((int)threadIdx.x) >> 4) * 2)) + ((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) % 21) / 3)) < 59))) {
      condval_6 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + (((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) % 21) / 3) * 3)) + (((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) % 3)) - 1521)];
    } else {
      condval_6 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 5664)] = condval_6;
    half condval_7;
    if (((((((ax2_0_0 * 16) + (((int)threadIdx.x) & 15)) < 73) && (3 <= (((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)))) && ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)) < 227)) && ((((((int)threadIdx.y) * 4) + ((((int)threadIdx.x) >> 4) * 2)) + (((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 21) / 3)) < 59))) {
      condval_7 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + (((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + ((((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 21) / 3) * 3)) + ((((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 3)) - 1521)];
    } else {
      condval_7 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 5665)] = condval_7;
    half condval_8;
    if (((((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) < 147) && (3 <= ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + 1) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)))) && (((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + 1) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)) < 227)) && (3 <= (((((int)threadIdx.y) * 4) + ((((int)threadIdx.x) >> 4) * 2)) + ((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) % 21) / 3))))) {
      condval_8 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + (((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) % 21) / 3) * 3)) + (((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) % 3)) - 681)];
    } else {
      condval_8 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 6784)] = condval_8;
    half condval_9;
    if (((((((ax2_0_0 * 16) + (((int)threadIdx.x) & 15)) < 73) && (3 <= ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + 1) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)))) && (((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + 1) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)) < 227)) && (3 <= (((((int)threadIdx.y) * 4) + ((((int)threadIdx.x) >> 4) * 2)) + (((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 21) / 3))))) {
      condval_9 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + (((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + ((((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 21) / 3) * 3)) + ((((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 3)) - 681)];
    } else {
      condval_9 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 6785)] = condval_9;
    half condval_10;
    if ((((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) < 147) && (3 <= ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 140) / 112)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)))) && (((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 140) / 112)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)) < 227))) {
      condval_10 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + (((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) % 21) / 3) * 3)) + (((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) % 3)) - 513)];
    } else {
      condval_10 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 7904)] = condval_10;
    half condval_11;
    if ((((((ax2_0_0 * 16) + (((int)threadIdx.x) & 15)) < 73) && (3 <= ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 140) / 112)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)))) && (((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 140) / 112)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)) < 227))) {
      condval_11 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + (((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + ((((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 21) / 3) * 3)) + ((((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 3)) - 513)];
    } else {
      condval_11 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 7905)] = condval_11;
    half condval_12;
    if ((((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) < 147) && (3 <= ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 168) / 112)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)))) && (((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 168) / 112)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)) < 227))) {
      condval_12 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + (((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) % 21) / 3) * 3)) + (((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) % 3)) - 345)];
    } else {
      condval_12 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 9024)] = condval_12;
    half condval_13;
    if ((((((ax2_0_0 * 16) + (((int)threadIdx.x) & 15)) < 73) && (3 <= ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 168) / 112)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)))) && (((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 168) / 112)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)) < 227))) {
      condval_13 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + (((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + ((((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 21) / 3) * 3)) + ((((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 3)) - 345)];
    } else {
      condval_13 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 9025)] = condval_13;
    half condval_14;
    if (((((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) < 147) && (3 <= ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 196) / 112)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)))) && (((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 196) / 112)) % 112) * 2) + (((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21)) < 227)) && ((((((int)threadIdx.y) * 4) + ((((int)threadIdx.x) >> 4) * 2)) + ((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) % 21) / 3)) < 59))) {
      condval_14 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + (((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) % 21) / 3) * 3)) + (((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) % 3)) - 177)];
    } else {
      condval_14 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 10144)] = condval_14;
    half condval_15;
    if (((((((ax2_0_0 * 16) + (((int)threadIdx.x) & 15)) < 73) && (3 <= ((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 196) / 112)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)))) && (((((((((int)blockIdx.y) * 64) + (((int)blockIdx.x) * 2)) + ((((((int)threadIdx.y) * 2) + (((int)threadIdx.x) >> 4)) + 196) / 112)) % 112) * 2) + ((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21)) < 227)) && ((((((int)threadIdx.y) * 4) + ((((int)threadIdx.x) >> 4) * 2)) + (((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 21) / 3)) < 59))) {
      condval_15 = inputs[((((((((((int)blockIdx.y) * 86016) + (((int)blockIdx.x) * 2688)) + (((((ax2_0_0 * 32) + ((((int)threadIdx.x) & 15) * 2)) + 1) / 21) * 672)) + (((int)threadIdx.y) * 12)) + ((((int)threadIdx.x) >> 4) * 6)) + ((((((ax2_0_0 * 11) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 21) / 3) * 3)) + ((((ax2_0_0 * 2) + ((((int)threadIdx.x) & 15) * 2)) + 1) % 3)) - 177)];
    } else {
      condval_15 = __float2half_rn(0.000000e+00f);
    }
    ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) * 80) + ((((int)threadIdx.x) >> 4) * 40)) + ((((int)threadIdx.x) & 15) * 2)) + 10145)] = condval_15;
    half4 condval_16;
    if (((((ax2_0_0 * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) < 147)) {
      condval_16 = *(half4*)(weight + (((ax2_0_0 * 2048) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)));
    } else {
      condval_16 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4))) = condval_16;
    if (((int)threadIdx.y) < 2) {
      half4 condval_17;
      if (((((ax2_0_0 * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) < 119)) {
        condval_17 = *(half4*)(weight + ((((ax2_0_0 * 2048) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 1792));
      } else {
        condval_17 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
      }
      *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 2016)) = condval_17;
    }
    __syncthreads();
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 1280) + 2304)])), 40);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 1280) + 2944)])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_pad_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) & 1) * 32)])), 72);
    nvcuda::wmma::load_matrix_sync(weight_reindex_pad_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 16)])), 72);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_pad_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_pad_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_pad_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_pad_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 1280) + 2320)])), 40);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 1280) + 2960)])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_pad_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 1152)])), 72);
    nvcuda::wmma::load_matrix_sync(weight_reindex_pad_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 1168)])), 72);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_pad_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_pad_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_pad_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_pad_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3]);
  }
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + 2304)])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + 2560)])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half4*)(conv2d_nhwc + (((((((((int)blockIdx.y) * 458752) + (((int)blockIdx.x) * 14336)) + ((((int)threadIdx.y) >> 3) * 2048)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + (((((int)threadIdx.y) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4))) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 2304));
  *(half4*)(conv2d_nhwc + (((((((((int)blockIdx.y) * 458752) + (((int)blockIdx.x) * 14336)) + (((((int)threadIdx.y) + 14) >> 3) * 2048)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((((int)threadIdx.y) >> 1) + 3) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4))) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 4096));
  *(half4*)(conv2d_nhwc + (((((((((int)blockIdx.y) * 458752) + (((int)blockIdx.x) * 14336)) + (((((int)threadIdx.y) + 28) >> 3) * 2048)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((((int)threadIdx.y) >> 1) + 2) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4))) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 5888));
  *(half4*)(conv2d_nhwc + (((((((((int)blockIdx.y) * 458752) + (((int)blockIdx.x) * 14336)) + (((((int)threadIdx.y) + 42) >> 3) * 2048)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((((int)threadIdx.y) >> 1) + 1) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4))) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 7680));
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + 2304)])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2], 16, nvcuda::wmma::mem_row_major);
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + 2560)])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[3], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half4*)(conv2d_nhwc + ((((((((((int)blockIdx.y) * 458752) + (((int)blockIdx.x) * 14336)) + ((((int)threadIdx.y) >> 3) * 2048)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + (((((int)threadIdx.y) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 1024)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 2304));
  *(half4*)(conv2d_nhwc + ((((((((((int)blockIdx.y) * 458752) + (((int)blockIdx.x) * 14336)) + (((((int)threadIdx.y) + 14) >> 3) * 2048)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((((int)threadIdx.y) >> 1) + 3) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 1024)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 4096));
  *(half4*)(conv2d_nhwc + ((((((((((int)blockIdx.y) * 458752) + (((int)blockIdx.x) * 14336)) + (((((int)threadIdx.y) + 28) >> 3) * 2048)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((((int)threadIdx.y) >> 1) + 2) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 1024)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 5888));
  *(half4*)(conv2d_nhwc + ((((((((((int)blockIdx.y) * 458752) + (((int)blockIdx.x) * 14336)) + (((((int)threadIdx.y) + 42) >> 3) * 2048)) + ((((int)threadIdx.y) & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((((int)threadIdx.y) >> 1) + 1) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 1024)) = *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 128) + (((int)threadIdx.x) * 4)) + 7680));
}


The time of C2D is 0.078 ms
===========================
2025-08-07 07:55:36 [INFO] Logging directory: /tmp/tmpnumv3j01/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:57:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.407915	tr-a-peak@32: 0.852250	tr-rmse: 0.390882	tr-rmse: 0.390882
2025-08-07 07:57:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.031617	tr-a-peak@32: 1.000000	tr-rmse: 0.478010	tr-rmse: 0.478010
2025-08-07 07:57:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.031617	tr-a-peak@32: 1.000000	tr-rmse: 0.478010	tr-rmse: 0.478010
2025-08-07 07:57:18 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.03162	tr-a-peak@32:1.00000	tr-rmse:0.47801	tr-rmse:0.47801 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 07:58:50 [DEBUG] XGB validation: p-rmse: 0.178921	a-peak@32: 0.972364
2025-08-07 07:58:50 [DEBUG] XGB iter   0: tr-p-rmse: 0.422256	tr-a-peak@32: 0.985451	tr-rmse: 0.371073	tr-rmse: 0.371073
2025-08-07 07:58:50 [DEBUG] XGB iter  25: tr-p-rmse: 0.031734	tr-a-peak@32: 1.000000	tr-rmse: 0.459674	tr-rmse: 0.459674
2025-08-07 07:58:50 [DEBUG] XGB iter  50: tr-p-rmse: 0.031734	tr-a-peak@32: 1.000000	tr-rmse: 0.459674	tr-rmse: 0.459674
2025-08-07 07:58:50 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.03173	tr-a-peak@32:1.00000	tr-rmse:0.45967	tr-rmse:0.45967 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:00:34 [DEBUG] XGB validation: p-rmse: 0.310745	a-peak@32: 0.876978
2025-08-07 08:00:34 [DEBUG] XGB iter   0: tr-p-rmse: 0.405754	tr-a-peak@32: 0.891912	tr-rmse: 0.366360	tr-rmse: 0.366360
2025-08-07 08:00:34 [DEBUG] XGB iter  25: tr-p-rmse: 0.054055	tr-a-peak@32: 0.957534	tr-rmse: 0.459799	tr-rmse: 0.459799
2025-08-07 08:00:34 [DEBUG] XGB iter  50: tr-p-rmse: 0.054055	tr-a-peak@32: 0.957534	tr-rmse: 0.459799	tr-rmse: 0.459799
2025-08-07 08:00:34 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05405	tr-a-peak@32:0.95753	tr-rmse:0.45980	tr-rmse:0.45980 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:02:14 [DEBUG] XGB validation: p-rmse: 0.236574	a-peak@32: 0.803585
2025-08-07 08:02:14 [DEBUG] XGB iter   0: tr-p-rmse: 0.398456	tr-a-peak@32: 0.891912	tr-rmse: 0.364664	tr-rmse: 0.364664
2025-08-07 08:02:14 [DEBUG] XGB iter  25: tr-p-rmse: 0.055809	tr-a-peak@32: 0.941868	tr-rmse: 0.459717	tr-rmse: 0.459717
2025-08-07 08:02:14 [DEBUG] XGB iter  50: tr-p-rmse: 0.055809	tr-a-peak@32: 0.941868	tr-rmse: 0.459717	tr-rmse: 0.459717
2025-08-07 08:02:14 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.05581	tr-a-peak@32:0.94187	tr-rmse:0.45972	tr-rmse:0.45972 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:03:55 [DEBUG] XGB validation: p-rmse: 0.198115	a-peak@32: 0.802175
2025-08-07 08:03:55 [DEBUG] XGB iter   0: tr-p-rmse: 0.390492	tr-a-peak@32: 0.849780	tr-rmse: 0.364814	tr-rmse: 0.364814
2025-08-07 08:03:55 [DEBUG] XGB iter  25: tr-p-rmse: 0.071977	tr-a-peak@32: 0.925220	tr-rmse: 0.462438	tr-rmse: 0.462438
2025-08-07 08:03:55 [DEBUG] XGB iter  50: tr-p-rmse: 0.071977	tr-a-peak@32: 0.925220	tr-rmse: 0.462438	tr-rmse: 0.462438
2025-08-07 08:03:55 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.07198	tr-a-peak@32:0.92522	tr-rmse:0.46244	tr-rmse:0.46244 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:05:37 [DEBUG] XGB validation: p-rmse: 0.170461	a-peak@32: 0.914123
2025-08-07 08:05:37 [DEBUG] XGB iter   0: tr-p-rmse: 0.384811	tr-a-peak@32: 0.883000	tr-rmse: 0.369141	tr-rmse: 0.369141
2025-08-07 08:05:37 [DEBUG] XGB iter  25: tr-p-rmse: 0.070173	tr-a-peak@32: 0.989556	tr-rmse: 0.466806	tr-rmse: 0.466806
2025-08-07 08:05:37 [DEBUG] XGB iter  50: tr-p-rmse: 0.070173	tr-a-peak@32: 0.989556	tr-rmse: 0.466806	tr-rmse: 0.466806
2025-08-07 08:05:37 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.07017	tr-a-peak@32:0.98956	tr-rmse:0.46681	tr-rmse:0.46681 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:07:24 [DEBUG] XGB validation: p-rmse: 0.163367	a-peak@32: 0.996863
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:09:05 [DEBUG] XGB validation: p-rmse: 0.182663	a-peak@32: 0.844790
2025-08-07 08:09:05 [DEBUG] XGB iter   0: tr-p-rmse: 0.379558	tr-a-peak@32: 0.873221	tr-rmse: 0.375116	tr-rmse: 0.375116
2025-08-07 08:09:05 [DEBUG] XGB iter  25: tr-p-rmse: 0.074699	tr-a-peak@32: 0.967781	tr-rmse: 0.472591	tr-rmse: 0.472591
2025-08-07 08:09:05 [DEBUG] XGB iter  50: tr-p-rmse: 0.074699	tr-a-peak@32: 0.967781	tr-rmse: 0.472591	tr-rmse: 0.472591
2025-08-07 08:09:05 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.07470	tr-a-peak@32:0.96778	tr-rmse:0.47259	tr-rmse:0.47259 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:10:48 [DEBUG] XGB validation: p-rmse: 0.156635	a-peak@32: 0.825531
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:12:29 [DEBUG] XGB validation: p-rmse: 0.191365	a-peak@32: 0.856661
2025-08-07 08:12:29 [DEBUG] XGB iter   0: tr-p-rmse: 0.377464	tr-a-peak@32: 0.830193	tr-rmse: 0.372006	tr-rmse: 0.372006
2025-08-07 08:12:29 [DEBUG] XGB iter  25: tr-p-rmse: 0.077717	tr-a-peak@32: 0.973535	tr-rmse: 0.470678	tr-rmse: 0.470678
2025-08-07 08:12:29 [DEBUG] XGB iter  50: tr-p-rmse: 0.077717	tr-a-peak@32: 0.973535	tr-rmse: 0.470678	tr-rmse: 0.470678
2025-08-07 08:12:29 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.07772	tr-a-peak@32:0.97354	tr-rmse:0.47068	tr-rmse:0.47068 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:14:11 [DEBUG] XGB validation: p-rmse: 0.150478	a-peak@32: 0.835100
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:15:57 [DEBUG] XGB validation: p-rmse: 0.150837	a-peak@32: 0.816597
2025-08-07 08:15:57 [DEBUG] XGB iter   0: tr-p-rmse: 0.374480	tr-a-peak@32: 0.830193	tr-rmse: 0.374169	tr-rmse: 0.374169
2025-08-07 08:15:57 [DEBUG] XGB iter  25: tr-p-rmse: 0.081372	tr-a-peak@32: 0.925836	tr-rmse: 0.473047	tr-rmse: 0.473047
2025-08-07 08:15:57 [DEBUG] XGB iter  50: tr-p-rmse: 0.081372	tr-a-peak@32: 0.925836	tr-rmse: 0.473047	tr-rmse: 0.473047
2025-08-07 08:15:57 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.08137	tr-a-peak@32:0.92584	tr-rmse:0.47305	tr-rmse:0.47305 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:17:50 [DEBUG] XGB validation: p-rmse: 0.180415	a-peak@32: 0.859303
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:19:39 [DEBUG] XGB validation: p-rmse: 0.170981	a-peak@32: 0.777328
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:21:32 [DEBUG] XGB validation: p-rmse: 0.163635	a-peak@32: 0.825552
2025-08-07 08:21:32 [DEBUG] XGB iter   0: tr-p-rmse: 0.373328	tr-a-peak@32: 0.830193	tr-rmse: 0.373236	tr-rmse: 0.373236
2025-08-07 08:21:32 [DEBUG] XGB iter  25: tr-p-rmse: 0.084945	tr-a-peak@32: 0.865931	tr-rmse: 0.472645	tr-rmse: 0.472645
2025-08-07 08:21:32 [DEBUG] XGB iter  50: tr-p-rmse: 0.084945	tr-a-peak@32: 0.865931	tr-rmse: 0.472645	tr-rmse: 0.472645
2025-08-07 08:21:32 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.08495	tr-a-peak@32:0.86593	tr-rmse:0.47264	tr-rmse:0.47264 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:23:23 [DEBUG] XGB validation: p-rmse: 0.159068	a-peak@32: 0.883323
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[2];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[2];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[4];
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], 0.000000e+00f);
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 2304)) = *(half4*)(inputs + (((((((int)blockIdx.y) * 229376) + (((int)blockIdx.x) * 4096)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 3) * 64)) + ((((int)threadIdx.x) & 7) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3584)) = *(half4*)(inputs + ((((((((int)blockIdx.y) * 229376) + (((int)blockIdx.x) * 4096)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 3) * 64)) + ((((int)threadIdx.x) & 7) * 4)) + 2048));
  ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x))] = weight[((((int)threadIdx.y) * 32) + ((int)threadIdx.x))];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 288)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 256)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 576)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 512)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 864)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 768)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 1152)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 1024)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 1440)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 1280)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 1728)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 1536)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 2016)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 1792)];
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 640) + 2304)])), 40);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 640) + 2320)])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) & 1) * 32)])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 16)])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 1152)])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 1168)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1]);
  __syncthreads();
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 2304)) = *(half4*)(inputs + ((((((((int)blockIdx.y) * 229376) + (((int)blockIdx.x) * 4096)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 3) * 64)) + ((((int)threadIdx.x) & 7) * 4)) + 32));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3584)) = *(half4*)(inputs + ((((((((int)blockIdx.y) * 229376) + (((int)blockIdx.x) * 4096)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 3) * 64)) + ((((int)threadIdx.x) & 7) * 4)) + 2080));
  ((half*)buf_dyn_shmem)[((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x))] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 2048)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 288)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 2304)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 576)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 2560)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 864)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 2816)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 1152)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 3072)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 1440)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 3328)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 1728)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 3584)];
  ((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 1) * 72) + ((((int)threadIdx.y) & 1) * 32)) + ((int)threadIdx.x)) + 2016)] = weight[(((((int)threadIdx.y) * 32) + ((int)threadIdx.x)) + 3840)];
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 640) + 2304)])), 40);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 1) * 640) + 2320)])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) & 1) * 32)])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 16)])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 1152)])), 72);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 1) * 32) + 1168)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1]);
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + 2304)])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + 2560)])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(uint4*)(conv2d_nhwc + ((((((((int)blockIdx.y) * 229376) + (((int)blockIdx.x) * 4096)) + ((((int)threadIdx.y) >> 2) * 1024)) + ((((int)threadIdx.x) >> 1) * 64)) + ((((int)threadIdx.y) & 3) * 16)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 2304));
  *(uint4*)(conv2d_nhwc + (((((((((int)blockIdx.y) * 229376) + (((int)blockIdx.x) * 4096)) + ((((int)threadIdx.y) >> 2) * 1024)) + ((((int)threadIdx.x) >> 1) * 64)) + ((((int)threadIdx.y) & 3) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 2048)) = *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 4352));
}


The time of C2D is 0.014 ms
===========================
2025-08-07 08:23:24 [INFO] Logging directory: /tmp/tmprej4_qj2/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:26:35 [DEBUG] XGB iter   0: tr-p-rmse: 0.617686	tr-a-peak@32: 0.613015	tr-rmse: 0.261615	tr-rmse: 0.261615
2025-08-07 08:26:35 [DEBUG] XGB iter  25: tr-p-rmse: 0.057488	tr-a-peak@32: 1.000000	tr-rmse: 0.315139	tr-rmse: 0.315139
2025-08-07 08:26:35 [DEBUG] XGB iter  50: tr-p-rmse: 0.057488	tr-a-peak@32: 1.000000	tr-rmse: 0.315139	tr-rmse: 0.315139
2025-08-07 08:26:35 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05749	tr-a-peak@32:1.00000	tr-rmse:0.31514	tr-rmse:0.31514 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:29:44 [DEBUG] XGB validation: p-rmse: 0.248352	a-peak@32: 0.958171
2025-08-07 08:29:44 [DEBUG] XGB iter   0: tr-p-rmse: 0.630664	tr-a-peak@32: 0.886832	tr-rmse: 0.307658	tr-rmse: 0.307658
2025-08-07 08:29:44 [DEBUG] XGB iter  25: tr-p-rmse: 0.050012	tr-a-peak@32: 0.999853	tr-rmse: 0.354642	tr-rmse: 0.354642
2025-08-07 08:29:44 [DEBUG] XGB iter  50: tr-p-rmse: 0.050012	tr-a-peak@32: 0.999853	tr-rmse: 0.354642	tr-rmse: 0.354642
2025-08-07 08:29:44 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05001	tr-a-peak@32:0.99985	tr-rmse:0.35464	tr-rmse:0.35464 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:33:13 [DEBUG] XGB validation: p-rmse: 0.114811	a-peak@32: 0.889637
2025-08-07 08:33:13 [DEBUG] XGB iter   0: tr-p-rmse: 0.574055	tr-a-peak@32: 0.907174	tr-rmse: 0.379308	tr-rmse: 0.379308
2025-08-07 08:33:13 [DEBUG] XGB iter  25: tr-p-rmse: 0.053040	tr-a-peak@32: 0.984620	tr-rmse: 0.454967	tr-rmse: 0.454967
2025-08-07 08:33:13 [DEBUG] XGB iter  50: tr-p-rmse: 0.053040	tr-a-peak@32: 0.984620	tr-rmse: 0.454967	tr-rmse: 0.454967
2025-08-07 08:33:13 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.05304	tr-a-peak@32:0.98462	tr-rmse:0.45497	tr-rmse:0.45497 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:36:41 [DEBUG] XGB validation: p-rmse: 0.097103	a-peak@32: 0.950145
2025-08-07 08:36:41 [DEBUG] XGB iter   0: tr-p-rmse: 0.525353	tr-a-peak@32: 0.920937	tr-rmse: 0.396294	tr-rmse: 0.396294
2025-08-07 08:36:41 [DEBUG] XGB iter  25: tr-p-rmse: 0.056492	tr-a-peak@32: 0.998203	tr-rmse: 0.480409	tr-rmse: 0.480409
2025-08-07 08:36:41 [DEBUG] XGB iter  50: tr-p-rmse: 0.056492	tr-a-peak@32: 0.998203	tr-rmse: 0.480409	tr-rmse: 0.480409
2025-08-07 08:36:41 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05649	tr-a-peak@32:0.99820	tr-rmse:0.48041	tr-rmse:0.48041 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:39:52 [DEBUG] XGB validation: p-rmse: 0.083307	a-peak@32: 0.953431
2025-08-07 08:39:52 [DEBUG] XGB iter   0: tr-p-rmse: 0.488339	tr-a-peak@32: 0.878809	tr-rmse: 0.412936	tr-rmse: 0.412936
2025-08-07 08:39:53 [DEBUG] XGB iter  25: tr-p-rmse: 0.048359	tr-a-peak@32: 0.993352	tr-rmse: 0.498806	tr-rmse: 0.498806
2025-08-07 08:39:53 [DEBUG] XGB iter  50: tr-p-rmse: 0.048359	tr-a-peak@32: 0.993352	tr-rmse: 0.498806	tr-rmse: 0.498806
2025-08-07 08:39:53 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.04836	tr-a-peak@32:0.99335	tr-rmse:0.49881	tr-rmse:0.49881 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:43:04 [DEBUG] XGB validation: p-rmse: 0.071485	a-peak@32: 0.981122
2025-08-07 08:43:04 [DEBUG] XGB iter   0: tr-p-rmse: 0.457799	tr-a-peak@32: 0.848968	tr-rmse: 0.408361	tr-rmse: 0.408361
2025-08-07 08:43:04 [DEBUG] XGB iter  25: tr-p-rmse: 0.051823	tr-a-peak@32: 0.998456	tr-rmse: 0.498199	tr-rmse: 0.498199
2025-08-07 08:43:04 [DEBUG] XGB iter  50: tr-p-rmse: 0.051823	tr-a-peak@32: 0.998456	tr-rmse: 0.498199	tr-rmse: 0.498199
2025-08-07 08:43:04 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05182	tr-a-peak@32:0.99846	tr-rmse:0.49820	tr-rmse:0.49820 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:46:22 [DEBUG] XGB validation: p-rmse: 0.116602	a-peak@32: 0.900234
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:49:40 [DEBUG] XGB validation: p-rmse: 0.066822	a-peak@32: 0.963927
2025-08-07 08:49:40 [DEBUG] XGB iter   0: tr-p-rmse: 0.425888	tr-a-peak@32: 0.921727	tr-rmse: 0.429467	tr-rmse: 0.429467
2025-08-07 08:49:40 [DEBUG] XGB iter  25: tr-p-rmse: 0.053648	tr-a-peak@32: 0.967150	tr-rmse: 0.518076	tr-rmse: 0.518076
2025-08-07 08:49:40 [DEBUG] XGB iter  50: tr-p-rmse: 0.053648	tr-a-peak@32: 0.967150	tr-rmse: 0.518076	tr-rmse: 0.518076
2025-08-07 08:49:40 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05365	tr-a-peak@32:0.96715	tr-rmse:0.51808	tr-rmse:0.51808 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:52:52 [DEBUG] XGB validation: p-rmse: 0.085620	a-peak@32: 0.990714
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:56:08 [DEBUG] XGB validation: p-rmse: 0.100601	a-peak@32: 0.977504
2025-08-07 08:56:08 [DEBUG] XGB iter   0: tr-p-rmse: 0.408563	tr-a-peak@32: 0.901769	tr-rmse: 0.424229	tr-rmse: 0.424229
2025-08-07 08:56:08 [DEBUG] XGB iter  25: tr-p-rmse: 0.051741	tr-a-peak@32: 0.923913	tr-rmse: 0.514825	tr-rmse: 0.514825
2025-08-07 08:56:08 [DEBUG] XGB iter  50: tr-p-rmse: 0.051741	tr-a-peak@32: 0.923913	tr-rmse: 0.514825	tr-rmse: 0.514825
2025-08-07 08:56:08 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.05174	tr-a-peak@32:0.92391	tr-rmse:0.51482	tr-rmse:0.51482 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 08:59:41 [DEBUG] XGB validation: p-rmse: 0.086536	a-peak@32: 0.970999
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:03:04 [DEBUG] XGB validation: p-rmse: 0.081448	a-peak@32: 0.972686
2025-08-07 09:03:04 [DEBUG] XGB iter   0: tr-p-rmse: 0.405810	tr-a-peak@32: 0.886442	tr-rmse: 0.402787	tr-rmse: 0.402787
2025-08-07 09:03:04 [DEBUG] XGB iter  25: tr-p-rmse: 0.054852	tr-a-peak@32: 0.988156	tr-rmse: 0.497208	tr-rmse: 0.497208
2025-08-07 09:03:04 [DEBUG] XGB iter  50: tr-p-rmse: 0.054852	tr-a-peak@32: 0.988156	tr-rmse: 0.497208	tr-rmse: 0.497208
2025-08-07 09:03:04 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.05485	tr-a-peak@32:0.98816	tr-rmse:0.49721	tr-rmse:0.49721 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:06:24 [DEBUG] XGB validation: p-rmse: 0.069480	a-peak@32: 0.975133
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:09:43 [DEBUG] XGB validation: p-rmse: 0.057310	a-peak@32: 0.952824
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:13:01 [DEBUG] XGB validation: p-rmse: 0.085829	a-peak@32: 0.962001
2025-08-07 09:13:01 [DEBUG] XGB iter   0: tr-p-rmse: 0.388600	tr-a-peak@32: 0.959861	tr-rmse: 0.414230	tr-rmse: 0.414230
2025-08-07 09:13:01 [DEBUG] XGB iter  25: tr-p-rmse: 0.056383	tr-a-peak@32: 0.992717	tr-rmse: 0.507625	tr-rmse: 0.507625
2025-08-07 09:13:01 [DEBUG] XGB iter  50: tr-p-rmse: 0.056383	tr-a-peak@32: 0.992717	tr-rmse: 0.507625	tr-rmse: 0.507625
2025-08-07 09:13:01 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.05638	tr-a-peak@32:0.99272	tr-rmse:0.50762	tr-rmse:0.50762 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:16:20 [DEBUG] XGB validation: p-rmse: 0.070963	a-peak@32: 0.956873
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[1];
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  uint4 condval;
  if (((14 <= (((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 196)) && (1 <= (((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 14)))) {
    condval = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 3840));
  } else {
    condval = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval;
  uint4 condval_1;
  if (((14 <= ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 16) % 196)) && (1 <= ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 2) % 14)))) {
    condval_1 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 256));
  } else {
    condval_1 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_1;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 8192));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 16384));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 24576));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_2;
  if (((14 <= (((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 196)) && (1 <= (((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 14)))) {
    condval_2 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 3712));
  } else {
    condval_2 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_2;
  uint4 condval_3;
  if (((14 <= ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 16) % 196)) && (1 <= ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 2) % 14)))) {
    condval_3 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 384));
  } else {
    condval_3 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_3;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 32768));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 40960));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 49152));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 57344));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_4;
  if ((14 <= (((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 196))) {
    condval_4 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 3584));
  } else {
    condval_4 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_4;
  uint4 condval_5;
  if ((14 <= ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 16) % 196))) {
    condval_5 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 512));
  } else {
    condval_5 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_5;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 65536));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 73728));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 81920));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 90112));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_6;
  if ((14 <= (((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 196))) {
    condval_6 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 3456));
  } else {
    condval_6 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_6;
  uint4 condval_7;
  if ((14 <= ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 16) % 196))) {
    condval_7 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 640));
  } else {
    condval_7 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_7;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 98304));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 106496));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 114688));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 122880));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_8;
  if (((14 <= (((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 196)) && ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 14) < 13))) {
    condval_8 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 3328));
  } else {
    condval_8 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_8;
  uint4 condval_9;
  if (((14 <= ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 16) % 196)) && (((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 2) % 14) < 13))) {
    condval_9 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 768));
  } else {
    condval_9 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_9;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 131072));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 139264));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 147456));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 155648));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_10;
  if (((14 <= (((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 196)) && ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 14) < 13))) {
    condval_10 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 3200));
  } else {
    condval_10 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_10;
  uint4 condval_11;
  if (((14 <= ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 16) % 196)) && (((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 2) % 14) < 13))) {
    condval_11 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 896));
  } else {
    condval_11 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_11;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 163840));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 172032));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 180224));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 188416));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_12;
  if ((1 <= (((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 14))) {
    condval_12 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 256));
  } else {
    condval_12 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_12;
  uint4 condval_13;
  if ((1 <= ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 2) % 14))) {
    condval_13 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 3840));
  } else {
    condval_13 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_13;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 196608));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 204800));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 212992));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 221184));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_14;
  if ((1 <= (((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 14))) {
    condval_14 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 128));
  } else {
    condval_14 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_14;
  uint4 condval_15;
  if ((1 <= ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 2) % 14))) {
    condval_15 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 3968));
  } else {
    condval_15 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_15;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 229376));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 237568));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 245760));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 253952));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = *(uint4*)(inputs + (((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 4096));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 262144));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 270336));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 278528));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 286720));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 128));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 4224));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 294912));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 303104));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 311296));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 319488));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_16;
  if (((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 14) < 13)) {
    condval_16 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 256));
  } else {
    condval_16 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_16;
  uint4 condval_17;
  if ((((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 2) % 14) < 13)) {
    condval_17 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 4352));
  } else {
    condval_17 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_17;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 327680));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 335872));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 344064));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 352256));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_18;
  if (((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 14) < 13)) {
    condval_18 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 384));
  } else {
    condval_18 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_18;
  uint4 condval_19;
  if ((((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 2) % 14) < 13)) {
    condval_19 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 4480));
  } else {
    condval_19 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_19;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 360448));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 368640));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 376832));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 385024));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_20;
  if ((((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 196) < 182) && (1 <= (((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 14)))) {
    condval_20 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 3328));
  } else {
    condval_20 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_20;
  uint4 condval_21;
  if (((((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 16) % 196) < 182) && (1 <= ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 2) % 14)))) {
    condval_21 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 7424));
  } else {
    condval_21 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_21;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 393216));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 401408));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 409600));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 417792));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_22;
  if ((((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 196) < 182) && (1 <= (((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 14)))) {
    condval_22 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 3456));
  } else {
    condval_22 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_22;
  uint4 condval_23;
  if (((((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 16) % 196) < 182) && (1 <= ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 2) % 14)))) {
    condval_23 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 7552));
  } else {
    condval_23 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_23;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 425984));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 434176));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 442368));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 450560));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_24;
  if (((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 196) < 182)) {
    condval_24 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 3584));
  } else {
    condval_24 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_24;
  uint4 condval_25;
  if ((((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 16) % 196) < 182)) {
    condval_25 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 7680));
  } else {
    condval_25 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_25;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 458752));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 466944));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 475136));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 483328));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_26;
  if (((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 196) < 182)) {
    condval_26 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 3712));
  } else {
    condval_26 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_26;
  uint4 condval_27;
  if ((((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 16) % 196) < 182)) {
    condval_27 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 7808));
  } else {
    condval_27 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_27;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 491520));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 499712));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 507904));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 516096));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_28;
  if ((((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 196) < 182) && ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 14) < 13))) {
    condval_28 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 3840));
  } else {
    condval_28 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_28;
  uint4 condval_29;
  if (((((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 16) % 196) < 182) && (((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 2) % 14) < 13))) {
    condval_29 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 7936));
  } else {
    condval_29 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_29;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 524288));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 532480));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 540672));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 548864));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_30;
  if ((((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 196) < 182) && ((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 14) < 13))) {
    condval_30 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 3968));
  } else {
    condval_30 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_30;
  uint4 condval_31;
  if (((((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 16) % 196) < 182) && (((((((((int)blockIdx.y) >> 1) * 32) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 2) % 14) < 13))) {
    condval_31 = *(uint4*)(inputs + ((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 8064));
  } else {
    condval_31 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = condval_31;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 4352)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 557056));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 6656)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 565248));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 8960)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 573440));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8)) + 11264)) = *(uint4*)(weight + ((((((((int)threadIdx.y) * 1024) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.x) & 7) * 8)) + 581632));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) >> 2) * 2176)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 4352)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 16)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 5504)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 32)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 6656)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 48)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 7808)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 64)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 8960)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 80)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 10112)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 96)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 11264)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + 112)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) & 3) * 16) + 12416)])), 72);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 256)])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half2*)(conv2d_nhwc + ((((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)threadIdx.y) & 3) * 1024)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2))) = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)));
  *(half2*)(conv2d_nhwc + (((((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)threadIdx.y) & 3) * 1024)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 32)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 512));
  *(half2*)(conv2d_nhwc + (((((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)threadIdx.y) & 3) * 1024)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 4096)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1024));
  *(half2*)(conv2d_nhwc + (((((((((((int)blockIdx.y) >> 1) * 8192) + ((((int)threadIdx.y) & 3) * 1024)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + (((int)blockIdx.x) * 64)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 4128)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1536));
}


The time of C2D is 0.056 ms
===========================
2025-08-07 09:16:23 [INFO] Logging directory: /tmp/tmpja6vw_6w/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:19:38 [DEBUG] XGB iter   0: tr-p-rmse: 0.683675	tr-a-peak@32: 1.000000	tr-rmse: 0.316633	tr-rmse: 0.316633
2025-08-07 09:19:38 [DEBUG] XGB iter  25: tr-p-rmse: 0.057348	tr-a-peak@32: 1.000000	tr-rmse: 0.370222	tr-rmse: 0.370222
2025-08-07 09:19:38 [DEBUG] XGB iter  50: tr-p-rmse: 0.057348	tr-a-peak@32: 1.000000	tr-rmse: 0.370222	tr-rmse: 0.370222
2025-08-07 09:19:38 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05735	tr-a-peak@32:1.00000	tr-rmse:0.37022	tr-rmse:0.37022 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:23:10 [DEBUG] XGB validation: p-rmse: 0.278937	a-peak@32: 0.962426
2025-08-07 09:23:12 [DEBUG] XGB iter   0: tr-p-rmse: 0.651780	tr-a-peak@32: 0.941891	tr-rmse: 0.306495	tr-rmse: 0.306495
2025-08-07 09:23:12 [DEBUG] XGB iter  25: tr-p-rmse: 0.057450	tr-a-peak@32: 1.000000	tr-rmse: 0.362025	tr-rmse: 0.362025
2025-08-07 09:23:12 [DEBUG] XGB iter  50: tr-p-rmse: 0.057450	tr-a-peak@32: 1.000000	tr-rmse: 0.362025	tr-rmse: 0.362025
2025-08-07 09:23:12 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05745	tr-a-peak@32:1.00000	tr-rmse:0.36203	tr-rmse:0.36203 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:27:35 [DEBUG] XGB validation: p-rmse: 0.144437	a-peak@32: 0.776711
2025-08-07 09:27:35 [DEBUG] XGB iter   0: tr-p-rmse: 0.564320	tr-a-peak@32: 1.000000	tr-rmse: 0.298511	tr-rmse: 0.298511
2025-08-07 09:27:35 [DEBUG] XGB iter  25: tr-p-rmse: 0.055867	tr-a-peak@32: 1.000000	tr-rmse: 0.392652	tr-rmse: 0.392652
2025-08-07 09:27:35 [DEBUG] XGB iter  50: tr-p-rmse: 0.055867	tr-a-peak@32: 1.000000	tr-rmse: 0.392652	tr-rmse: 0.392652
2025-08-07 09:27:35 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.05587	tr-a-peak@32:1.00000	tr-rmse:0.39265	tr-rmse:0.39265 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:31:46 [DEBUG] XGB validation: p-rmse: 0.254497	a-peak@32: 0.966428
2025-08-07 09:31:46 [DEBUG] XGB iter   0: tr-p-rmse: 0.533355	tr-a-peak@32: 1.000000	tr-rmse: 0.355662	tr-rmse: 0.355662
2025-08-07 09:31:47 [DEBUG] XGB iter  25: tr-p-rmse: 0.059793	tr-a-peak@32: 1.000000	tr-rmse: 0.444085	tr-rmse: 0.444085
2025-08-07 09:31:47 [DEBUG] XGB iter  50: tr-p-rmse: 0.059788	tr-a-peak@32: 1.000000	tr-rmse: 0.444092	tr-rmse: 0.444092
2025-08-07 09:31:47 [DEBUG] XGB iter  75: tr-p-rmse: 0.059788	tr-a-peak@32: 1.000000	tr-rmse: 0.444092	tr-rmse: 0.444092
2025-08-07 09:31:47 [DEBUG] XGB stopped. Best iteration: [28] tr-p-rmse:0.05979	tr-a-peak@32:1.00000	tr-rmse:0.44409	tr-rmse:0.44409 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:35:53 [DEBUG] XGB validation: p-rmse: 0.128096	a-peak@32: 0.926466
2025-08-07 09:35:53 [DEBUG] XGB iter   0: tr-p-rmse: 0.502478	tr-a-peak@32: 0.931333	tr-rmse: 0.386154	tr-rmse: 0.386154
2025-08-07 09:35:53 [DEBUG] XGB iter  25: tr-p-rmse: 0.055732	tr-a-peak@32: 0.999097	tr-rmse: 0.472926	tr-rmse: 0.472926
2025-08-07 09:35:53 [DEBUG] XGB iter  50: tr-p-rmse: 0.055728	tr-a-peak@32: 0.999097	tr-rmse: 0.472931	tr-rmse: 0.472931
2025-08-07 09:35:53 [DEBUG] XGB iter  75: tr-p-rmse: 0.055728	tr-a-peak@32: 0.999097	tr-rmse: 0.472931	tr-rmse: 0.472931
2025-08-07 09:35:53 [DEBUG] XGB stopped. Best iteration: [28] tr-p-rmse:0.05573	tr-a-peak@32:0.99910	tr-rmse:0.47293	tr-rmse:0.47293 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:40:06 [DEBUG] XGB validation: p-rmse: 0.081630	a-peak@32: 0.985045
2025-08-07 09:40:06 [DEBUG] XGB iter   0: tr-p-rmse: 0.480347	tr-a-peak@32: 0.984022	tr-rmse: 0.417901	tr-rmse: 0.417901
2025-08-07 09:40:06 [DEBUG] XGB iter  25: tr-p-rmse: 0.056920	tr-a-peak@32: 1.000000	tr-rmse: 0.501876	tr-rmse: 0.501876
2025-08-07 09:40:07 [DEBUG] XGB iter  50: tr-p-rmse: 0.056920	tr-a-peak@32: 1.000000	tr-rmse: 0.501877	tr-rmse: 0.501877
2025-08-07 09:40:07 [DEBUG] XGB iter  75: tr-p-rmse: 0.056920	tr-a-peak@32: 1.000000	tr-rmse: 0.501877	tr-rmse: 0.501877
2025-08-07 09:40:07 [DEBUG] XGB stopped. Best iteration: [25] tr-p-rmse:0.05692	tr-a-peak@32:1.00000	tr-rmse:0.50188	tr-rmse:0.50188 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:44:12 [DEBUG] XGB validation: p-rmse: 0.082792	a-peak@32: 0.984717
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:48:26 [DEBUG] XGB validation: p-rmse: 0.103957	a-peak@32: 0.973172
2025-08-07 09:48:26 [DEBUG] XGB iter   0: tr-p-rmse: 0.446585	tr-a-peak@32: 0.944050	tr-rmse: 0.451029	tr-rmse: 0.451029
2025-08-07 09:48:26 [DEBUG] XGB iter  25: tr-p-rmse: 0.064517	tr-a-peak@32: 0.999738	tr-rmse: 0.532823	tr-rmse: 0.532823
2025-08-07 09:48:26 [DEBUG] XGB iter  50: tr-p-rmse: 0.064517	tr-a-peak@32: 0.999738	tr-rmse: 0.532823	tr-rmse: 0.532823
2025-08-07 09:48:26 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.06452	tr-a-peak@32:0.99974	tr-rmse:0.53282	tr-rmse:0.53282 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:52:55 [DEBUG] XGB validation: p-rmse: 0.074274	a-peak@32: 0.984310
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 09:57:20 [DEBUG] XGB validation: p-rmse: 0.094976	a-peak@32: 0.985582
2025-08-07 09:57:20 [DEBUG] XGB iter   0: tr-p-rmse: 0.418396	tr-a-peak@32: 0.984667	tr-rmse: 0.472834	tr-rmse: 0.472834
2025-08-07 09:57:20 [DEBUG] XGB iter  25: tr-p-rmse: 0.063399	tr-a-peak@32: 0.978958	tr-rmse: 0.553456	tr-rmse: 0.553456
2025-08-07 09:57:20 [DEBUG] XGB iter  50: tr-p-rmse: 0.063399	tr-a-peak@32: 0.978958	tr-rmse: 0.553456	tr-rmse: 0.553456
2025-08-07 09:57:20 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.06340	tr-a-peak@32:0.97896	tr-rmse:0.55345	tr-rmse:0.55345 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 10:01:40 [DEBUG] XGB validation: p-rmse: 0.080198	a-peak@32: 0.980813
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 10:06:05 [DEBUG] XGB validation: p-rmse: 0.100959	a-peak@32: 0.983712
2025-08-07 10:06:05 [DEBUG] XGB iter   0: tr-p-rmse: 0.398034	tr-a-peak@32: 0.952672	tr-rmse: 0.485373	tr-rmse: 0.485373
2025-08-07 10:06:05 [DEBUG] XGB iter  25: tr-p-rmse: 0.066430	tr-a-peak@32: 0.975782	tr-rmse: 0.565327	tr-rmse: 0.565327
2025-08-07 10:06:05 [DEBUG] XGB iter  50: tr-p-rmse: 0.066430	tr-a-peak@32: 0.975782	tr-rmse: 0.565327	tr-rmse: 0.565327
2025-08-07 10:06:05 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.06643	tr-a-peak@32:0.97578	tr-rmse:0.56533	tr-rmse:0.56533 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 10:11:02 [DEBUG] XGB validation: p-rmse: 0.095249	a-peak@32: 0.969697
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 10:15:09 [DEBUG] XGB validation: p-rmse: 0.084474	a-peak@32: 0.981538
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 10:19:43 [DEBUG] XGB validation: p-rmse: 0.098532	a-peak@32: 0.963022
2025-08-07 10:19:43 [DEBUG] XGB iter   0: tr-p-rmse: 0.379365	tr-a-peak@32: 0.974081	tr-rmse: 0.496689	tr-rmse: 0.496689
2025-08-07 10:19:43 [DEBUG] XGB iter  25: tr-p-rmse: 0.068954	tr-a-peak@32: 0.986279	tr-rmse: 0.575970	tr-rmse: 0.575970
2025-08-07 10:19:43 [DEBUG] XGB iter  50: tr-p-rmse: 0.068954	tr-a-peak@32: 0.986279	tr-rmse: 0.575970	tr-rmse: 0.575970
2025-08-07 10:19:43 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.06895	tr-a-peak@32:0.98628	tr-rmse:0.57597	tr-rmse:0.57597 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-08-07 10:24:18 [DEBUG] XGB validation: p-rmse: 0.083012	a-peak@32: 0.985865
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(320) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(320) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_pad_shared_dyn_wmma_matrix_a[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[4];
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  for (int ax2_0_0 = 0; ax2_0_0 < 36; ++ax2_0_0) {
    __syncthreads();
    uint4 condval;
    if (((((1 <= ((ax2_0_0 / 12) + ((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 49) / 7))) && (((ax2_0_0 / 12) + ((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 49) / 7)) < 8)) && (1 <= (((ax2_0_0 % 12) >> 2) + (((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 7)))) && ((((ax2_0_0 % 12) >> 2) + (((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 7)) < 8))) {
      condval = *(uint4*)(inputs + ((((((((((int)blockIdx.y) >> 4) * 40960) + ((ax2_0_0 / 12) * 3584)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((ax2_0_0 % 12) * 128)) + ((((int)threadIdx.x) & 15) * 8)) - 4096));
    } else {
      condval = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 5120)) = condval;
    uint4 condval_1;
    if (((((1 <= ((ax2_0_0 / 12) + (((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 20) % 49) / 7))) && (((ax2_0_0 / 12) + (((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 20) % 49) / 7)) < 8)) && (1 <= (((ax2_0_0 % 12) >> 2) + ((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 6) % 7)))) && ((((ax2_0_0 % 12) >> 2) + ((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 6) % 7)) < 8))) {
      condval_1 = *(uint4*)(inputs + ((((((((((int)blockIdx.y) >> 4) * 40960) + ((ax2_0_0 / 12) * 3584)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((ax2_0_0 % 12) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 6144));
    } else {
      condval_1 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 7840)) = condval_1;
    uint4 condval_2;
    if (((((1 <= ((ax2_0_0 / 12) + (((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 40) % 49) / 7))) && (((ax2_0_0 / 12) + (((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 40) % 49) / 7)) < 8)) && (1 <= (((ax2_0_0 % 12) >> 2) + ((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 5) % 7)))) && ((((ax2_0_0 % 12) >> 2) + ((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 5) % 7)) < 8))) {
      condval_2 = *(uint4*)(inputs + ((((((((((int)blockIdx.y) >> 4) * 40960) + ((ax2_0_0 / 12) * 3584)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((ax2_0_0 % 12) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 16384));
    } else {
      condval_2 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10560)) = condval_2;
    uint4 condval_3;
    if (((((((((((int)blockIdx.y) >> 4) * 10) + ((((int)threadIdx.y) + 30) >> 2)) < 49) && (1 <= ((ax2_0_0 / 12) + (((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 11) % 49) / 7)))) && (((ax2_0_0 / 12) + (((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 11) % 49) / 7)) < 8)) && (1 <= (((ax2_0_0 % 12) >> 2) + ((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 4) % 7)))) && ((((ax2_0_0 % 12) >> 2) + ((((((((int)blockIdx.y) >> 4) * 80) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) + 4) % 7)) < 8))) {
      condval_3 = *(uint4*)(inputs + ((((((((((int)blockIdx.y) >> 4) * 40960) + ((ax2_0_0 / 12) * 3584)) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((ax2_0_0 % 12) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 26624));
    } else {
      condval_3 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13280)) = condval_3;
    *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4))) = *(half4*)(weight + (((((ax2_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + ((((int)blockIdx.y) & 15) * 32)) + ((((int)threadIdx.x) & 7) * 4)));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1600)) = *(half4*)(weight + ((((((ax2_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + ((((int)blockIdx.y) & 15) * 32)) + ((((int)threadIdx.x) & 7) * 4)) + 20480));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3200)) = *(half4*)(weight + ((((((ax2_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + ((((int)blockIdx.y) & 15) * 32)) + ((((int)threadIdx.x) & 7) * 4)) + 40960));
    if (((int)threadIdx.y) < 2) {
      *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 4800)) = *(half4*)(weight + ((((((ax2_0_0 * 65536) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + ((((int)blockIdx.y) & 15) * 32)) + ((((int)threadIdx.x) & 7) * 4)) + 61440));
    }
    __syncthreads();
    for (int ax2_0_1 = 0; ax2_0_1 < 2; ++ax2_0_1) {
      nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((((int)threadIdx.y) >> 1) * 2176) + (ax2_0_1 * 64)) + 5120)])), 136);
      nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((((int)threadIdx.y) >> 1) * 2176) + (ax2_0_1 * 64)) + 5136)])), 136);
      nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((((int)threadIdx.y) >> 1) * 2176) + (ax2_0_1 * 64)) + 5152)])), 136);
      nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((((int)threadIdx.y) >> 1) * 2176) + (ax2_0_1 * 64)) + 5168)])), 136);
      nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((ax2_0_1 * 2560) + ((((int)threadIdx.y) & 1) * 16))])), 40);
      nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((ax2_0_1 * 2560) + ((((int)threadIdx.y) & 1) * 16)) + 640)])), 40);
      nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[(((ax2_0_1 * 2560) + ((((int)threadIdx.y) & 1) * 16)) + 1280)])), 40);
      nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[(((ax2_0_1 * 2560) + ((((int)threadIdx.y) & 1) * 16)) + 1920)])), 40);
      nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
      nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
      nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
      nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    }
  }
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 256)])), conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  if (((((((int)blockIdx.y) >> 4) * 10) + ((((int)threadIdx.y) >> 1) * 2)) + (((int)threadIdx.x) >> 4)) < 49) {
    *(uint4*)(conv2d_nhwc + (((((((((int)blockIdx.y) >> 4) * 40960) + ((((int)threadIdx.y) >> 1) * 8192)) + ((((int)threadIdx.x) >> 1) * 512)) + ((((int)blockIdx.y) & 15) * 32)) + ((((int)threadIdx.y) & 1) * 16)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)));
  }
}


The time of C2D is 0.082 ms

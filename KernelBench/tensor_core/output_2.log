===========================
2025-07-23 03:51:40 [INFO] Logging directory: /tmp/tmpvufyyysq/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 03:56:03 [DEBUG] XGB iter   0: tr-p-rmse: 0.622646	tr-a-peak@32: 0.963527	tr-rmse: 0.351396	tr-rmse: 0.351396
2025-07-23 03:56:03 [DEBUG] XGB iter  25: tr-p-rmse: 0.068814	tr-a-peak@32: 1.000000	tr-rmse: 0.406801	tr-rmse: 0.406801
2025-07-23 03:56:03 [DEBUG] XGB iter  50: tr-p-rmse: 0.068814	tr-a-peak@32: 1.000000	tr-rmse: 0.406801	tr-rmse: 0.406801
2025-07-23 03:56:03 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.06881	tr-a-peak@32:1.00000	tr-rmse:0.40680	tr-rmse:0.40680 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 04:00:17 [DEBUG] XGB validation: p-rmse: 0.263343	a-peak@32: 0.993364
2025-07-23 04:00:17 [DEBUG] XGB iter   0: tr-p-rmse: 0.621741	tr-a-peak@32: 0.923760	tr-rmse: 0.354809	tr-rmse: 0.354809
2025-07-23 04:00:17 [DEBUG] XGB iter  25: tr-p-rmse: 0.071737	tr-a-peak@32: 1.000000	tr-rmse: 0.408992	tr-rmse: 0.408992
2025-07-23 04:00:17 [DEBUG] XGB iter  50: tr-p-rmse: 0.071737	tr-a-peak@32: 1.000000	tr-rmse: 0.408992	tr-rmse: 0.408992
2025-07-23 04:00:17 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.07174	tr-a-peak@32:1.00000	tr-rmse:0.40899	tr-rmse:0.40899 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 04:05:53 [DEBUG] XGB validation: p-rmse: 0.237114	a-peak@32: 0.989291
2025-07-23 04:05:53 [DEBUG] XGB iter   0: tr-p-rmse: 0.575870	tr-a-peak@32: 0.918323	tr-rmse: 0.399811	tr-rmse: 0.399811
2025-07-23 04:05:53 [DEBUG] XGB iter  25: tr-p-rmse: 0.063336	tr-a-peak@32: 0.997292	tr-rmse: 0.472073	tr-rmse: 0.472073
2025-07-23 04:05:53 [DEBUG] XGB iter  50: tr-p-rmse: 0.063335	tr-a-peak@32: 0.997292	tr-rmse: 0.472075	tr-rmse: 0.472075
2025-07-23 04:05:53 [DEBUG] XGB iter  75: tr-p-rmse: 0.063335	tr-a-peak@32: 0.997292	tr-rmse: 0.472075	tr-rmse: 0.472075
2025-07-23 04:05:53 [DEBUG] XGB stopped. Best iteration: [27] tr-p-rmse:0.06334	tr-a-peak@32:0.99729	tr-rmse:0.47207	tr-rmse:0.47207 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 04:11:08 [DEBUG] XGB validation: p-rmse: 0.106600	a-peak@32: 0.931959
2025-07-23 04:11:08 [DEBUG] XGB iter   0: tr-p-rmse: 0.515278	tr-a-peak@32: 0.948302	tr-rmse: 0.420897	tr-rmse: 0.420897
2025-07-23 04:11:08 [DEBUG] XGB iter  25: tr-p-rmse: 0.055764	tr-a-peak@32: 1.000000	tr-rmse: 0.501147	tr-rmse: 0.501147
2025-07-23 04:11:08 [DEBUG] XGB iter  50: tr-p-rmse: 0.055763	tr-a-peak@32: 1.000000	tr-rmse: 0.501148	tr-rmse: 0.501148
2025-07-23 04:11:08 [DEBUG] XGB iter  75: tr-p-rmse: 0.055763	tr-a-peak@32: 1.000000	tr-rmse: 0.501148	tr-rmse: 0.501148
2025-07-23 04:11:08 [DEBUG] XGB stopped. Best iteration: [26] tr-p-rmse:0.05576	tr-a-peak@32:1.00000	tr-rmse:0.50115	tr-rmse:0.50115 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 04:16:13 [DEBUG] XGB validation: p-rmse: 0.139094	a-peak@32: 0.990174
2025-07-23 04:16:13 [DEBUG] XGB iter   0: tr-p-rmse: 0.487016	tr-a-peak@32: 0.995439	tr-rmse: 0.443607	tr-rmse: 0.443607
2025-07-23 04:16:14 [DEBUG] XGB iter  25: tr-p-rmse: 0.067673	tr-a-peak@32: 0.998683	tr-rmse: 0.523643	tr-rmse: 0.523643
2025-07-23 04:16:14 [DEBUG] XGB iter  50: tr-p-rmse: 0.067672	tr-a-peak@32: 0.998683	tr-rmse: 0.523644	tr-rmse: 0.523644
2025-07-23 04:16:14 [DEBUG] XGB iter  75: tr-p-rmse: 0.067672	tr-a-peak@32: 0.998683	tr-rmse: 0.523644	tr-rmse: 0.523644
2025-07-23 04:16:14 [DEBUG] XGB stopped. Best iteration: [27] tr-p-rmse:0.06767	tr-a-peak@32:0.99868	tr-rmse:0.52364	tr-rmse:0.52364 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 04:21:22 [DEBUG] XGB validation: p-rmse: 0.100560	a-peak@32: 0.984035
2025-07-23 04:21:22 [DEBUG] XGB iter   0: tr-p-rmse: 0.508729	tr-a-peak@32: 0.627385	tr-rmse: 0.273935	tr-rmse: 0.273935
2025-07-23 04:21:24 [DEBUG] XGB iter  25: tr-p-rmse: 0.053341	tr-a-peak@32: 1.000000	tr-rmse: 0.379689	tr-rmse: 0.379689
2025-07-23 04:21:25 [DEBUG] XGB iter  50: tr-p-rmse: 0.053341	tr-a-peak@32: 1.000000	tr-rmse: 0.379689	tr-rmse: 0.379689
2025-07-23 04:21:25 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.05334	tr-a-peak@32:1.00000	tr-rmse:0.37969	tr-rmse:0.37969 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 04:26:31 [DEBUG] XGB validation: p-rmse: 0.136080	a-peak@32: 0.958035
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 04:31:43 [DEBUG] XGB validation: p-rmse: 0.150219	a-peak@32: 0.966047
2025-07-23 04:31:43 [DEBUG] XGB iter   0: tr-p-rmse: 0.487536	tr-a-peak@32: 0.828842	tr-rmse: 0.306725	tr-rmse: 0.306725
2025-07-23 04:31:43 [DEBUG] XGB iter  25: tr-p-rmse: 0.053637	tr-a-peak@32: 0.871843	tr-rmse: 0.408485	tr-rmse: 0.408485
2025-07-23 04:31:43 [DEBUG] XGB iter  50: tr-p-rmse: 0.053637	tr-a-peak@32: 0.871843	tr-rmse: 0.408485	tr-rmse: 0.408485
2025-07-23 04:31:43 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.05364	tr-a-peak@32:0.87184	tr-rmse:0.40848	tr-rmse:0.40848 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 04:36:51 [DEBUG] XGB validation: p-rmse: 0.049855	a-peak@32: 0.964133
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 04:41:47 [DEBUG] XGB validation: p-rmse: 0.070495	a-peak@32: 0.952220
2025-07-23 04:41:47 [DEBUG] XGB iter   0: tr-p-rmse: 0.470350	tr-a-peak@32: 0.814971	tr-rmse: 0.335501	tr-rmse: 0.335501
2025-07-23 04:41:50 [DEBUG] XGB iter  25: tr-p-rmse: 0.053143	tr-a-peak@32: 0.831932	tr-rmse: 0.435707	tr-rmse: 0.435707
2025-07-23 04:41:50 [DEBUG] XGB iter  50: tr-p-rmse: 0.053142	tr-a-peak@32: 0.831932	tr-rmse: 0.435707	tr-rmse: 0.435707
2025-07-23 04:41:50 [DEBUG] XGB iter  75: tr-p-rmse: 0.053142	tr-a-peak@32: 0.831932	tr-rmse: 0.435707	tr-rmse: 0.435707
2025-07-23 04:41:50 [DEBUG] XGB stopped. Best iteration: [26] tr-p-rmse:0.05314	tr-a-peak@32:0.83193	tr-rmse:0.43571	tr-rmse:0.43571 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 04:47:00 [DEBUG] XGB validation: p-rmse: 0.077567	a-peak@32: 0.948310
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 04:52:01 [DEBUG] XGB validation: p-rmse: 0.093780	a-peak@32: 0.952219
2025-07-23 04:52:01 [DEBUG] XGB iter   0: tr-p-rmse: 0.461749	tr-a-peak@32: 0.822559	tr-rmse: 0.354125	tr-rmse: 0.354125
2025-07-23 04:52:01 [DEBUG] XGB iter  25: tr-p-rmse: 0.056214	tr-a-peak@32: 0.834836	tr-rmse: 0.452206	tr-rmse: 0.452206
2025-07-23 04:52:01 [DEBUG] XGB iter  50: tr-p-rmse: 0.056214	tr-a-peak@32: 0.834836	tr-rmse: 0.452206	tr-rmse: 0.452206
2025-07-23 04:52:01 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05621	tr-a-peak@32:0.83484	tr-rmse:0.45220	tr-rmse:0.45220 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 04:57:07 [DEBUG] XGB validation: p-rmse: 0.057381	a-peak@32: 0.971980
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 05:02:12 [DEBUG] XGB validation: p-rmse: 0.069700	a-peak@32: 0.930071
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 05:07:18 [DEBUG] XGB validation: p-rmse: 0.072184	a-peak@32: 0.910501
2025-07-23 05:07:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.442220	tr-a-peak@32: 0.802043	tr-rmse: 0.364912	tr-rmse: 0.364912
2025-07-23 05:07:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.052491	tr-a-peak@32: 0.904453	tr-rmse: 0.462940	tr-rmse: 0.462940
2025-07-23 05:07:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.052491	tr-a-peak@32: 0.904453	tr-rmse: 0.462940	tr-rmse: 0.462940
2025-07-23 05:07:18 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05249	tr-a-peak@32:0.90445	tr-rmse:0.46294	tr-rmse:0.46294 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 05:12:15 [DEBUG] XGB validation: p-rmse: 0.082271	a-peak@32: 0.807564
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_pad_shared_dyn_wmma_matrix_a[2];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[2];
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  for (int ax2_0_0 = 0; ax2_0_0 < 36; ++ax2_0_0) {
    __syncthreads();
    uint4 condval;
    if (((((1 <= ((ax2_0_0 / 12) + ((((((int)blockIdx.x) >> 3) * 8) + (((int)threadIdx.x) >> 4)) / 7))) && (((ax2_0_0 / 12) + ((((((int)blockIdx.x) >> 3) * 8) + (((int)threadIdx.x) >> 4)) / 7)) < 15)) && (1 <= (((ax2_0_0 % 12) >> 2) + ((((((int)blockIdx.x) >> 3) * 2) + (((int)threadIdx.x) >> 3)) % 14)))) && ((((ax2_0_0 % 12) >> 2) + ((((((int)blockIdx.x) >> 3) * 2) + (((int)threadIdx.x) >> 3)) % 14)) < 15))) {
      condval = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 4096) + ((ax2_0_0 / 12) * 3584)) + ((((int)threadIdx.x) >> 3) * 256)) + ((ax2_0_0 % 12) * 64)) + ((((int)threadIdx.x) & 7) * 8)) - 3840));
    } else {
      condval = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8))) = condval;
    uint4 condval_1;
    if ((((((((int)blockIdx.x) < 96) && (1 <= ((ax2_0_0 / 12) + (((((((int)blockIdx.x) >> 3) * 8) + (((int)threadIdx.x) >> 4)) + 2) / 7)))) && (((ax2_0_0 / 12) + (((((((int)blockIdx.x) >> 3) * 8) + (((int)threadIdx.x) >> 4)) + 2) / 7)) < 15)) && (1 <= (((ax2_0_0 % 12) >> 2) + (((((((int)blockIdx.x) >> 3) * 16) + (((int)threadIdx.x) >> 3)) + 4) % 14)))) && ((((ax2_0_0 % 12) >> 2) + (((((((int)blockIdx.x) >> 3) * 16) + (((int)threadIdx.x) >> 3)) + 4) % 14)) < 15))) {
      condval_1 = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 4096) + ((ax2_0_0 / 12) * 3584)) + ((((int)threadIdx.x) >> 3) * 256)) + ((ax2_0_0 % 12) * 64)) + ((((int)threadIdx.x) & 7) * 8)) - 2816));
    } else {
      condval_1 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 288)) = condval_1;
    uint4 condval_2;
    if ((((((((int)blockIdx.x) < 96) && (1 <= ((ax2_0_0 / 12) + (((((((int)blockIdx.x) >> 3) * 8) + (((int)threadIdx.x) >> 4)) + 4) / 7)))) && (((ax2_0_0 / 12) + (((((((int)blockIdx.x) >> 3) * 8) + (((int)threadIdx.x) >> 4)) + 4) / 7)) < 15)) && (1 <= (((ax2_0_0 % 12) >> 2) + (((((((int)blockIdx.x) >> 3) * 16) + (((int)threadIdx.x) >> 3)) + 8) % 14)))) && ((((ax2_0_0 % 12) >> 2) + (((((((int)blockIdx.x) >> 3) * 16) + (((int)threadIdx.x) >> 3)) + 8) % 14)) < 15))) {
      condval_2 = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 4096) + ((ax2_0_0 / 12) * 3584)) + ((((int)threadIdx.x) >> 3) * 256)) + ((ax2_0_0 % 12) * 64)) + ((((int)threadIdx.x) & 7) * 8)) - 1792));
    } else {
      condval_2 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 576)) = condval_2;
    uint4 condval_3;
    if ((((((((int)blockIdx.x) < 96) && (1 <= ((ax2_0_0 / 12) + (((((((int)blockIdx.x) >> 3) * 8) + (((int)threadIdx.x) >> 4)) + 6) / 7)))) && (((ax2_0_0 / 12) + (((((((int)blockIdx.x) >> 3) * 8) + (((int)threadIdx.x) >> 4)) + 6) / 7)) < 15)) && (1 <= (((ax2_0_0 % 12) >> 2) + (((((((int)blockIdx.x) >> 3) * 16) + (((int)threadIdx.x) >> 3)) + 12) % 14)))) && ((((ax2_0_0 % 12) >> 2) + (((((((int)blockIdx.x) >> 3) * 16) + (((int)threadIdx.x) >> 3)) + 12) % 14)) < 15))) {
      condval_3 = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 4096) + ((ax2_0_0 / 12) * 3584)) + ((((int)threadIdx.x) >> 3) * 256)) + ((ax2_0_0 % 12) * 64)) + ((((int)threadIdx.x) & 7) * 8)) - 768));
    } else {
      condval_3 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 3) * 72) + ((((int)threadIdx.x) & 7) * 8)) + 864)) = condval_3;
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1152)) = *(uint4*)(weight + (((((ax2_0_0 * 16384) + ((((int)threadIdx.x) >> 1) * 256)) + (((int)blockIdx.y) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 1) * 8)));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1792)) = *(uint4*)(weight + ((((((ax2_0_0 / 12) * 196608) + (((((ax2_0_0 * 64) + (((int)threadIdx.x) >> 1)) + 16) % 768) * 256)) + (((int)blockIdx.y) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 1) * 8)));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 2432)) = *(uint4*)(weight + ((((((ax2_0_0 / 12) * 196608) + (((((ax2_0_0 * 64) + (((int)threadIdx.x) >> 1)) + 32) % 768) * 256)) + (((int)blockIdx.y) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 1) * 8)));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 3072)) = *(uint4*)(weight + ((((((ax2_0_0 / 12) * 196608) + (((((ax2_0_0 * 64) + (((int)threadIdx.x) >> 1)) + 48) % 768) * 256)) + (((int)blockIdx.y) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 1) * 8)));
    __syncthreads();
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 72);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 72);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[1152])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[1792])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 72);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[48])), 72);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2432])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[3072])), 40);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
  }
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[0])), conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  if ((((((int)blockIdx.x) >> 3) * 4) + (((int)threadIdx.x) >> 3)) < 49) {
    *(uint4*)(conv2d_nhwc + ((((((((int)blockIdx.x) >> 3) * 4096) + ((((int)threadIdx.x) >> 1) * 256)) + (((int)blockIdx.y) * 128)) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(((half*)buf_dyn_shmem) + (((int)threadIdx.x) * 8));
  }
}


The time of C2D is 0.046 ms
2025-07-23 05:12:17 [INFO] Logging directory: /tmp/tmpd3w9rtsr/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 05:18:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.665440	tr-a-peak@32: 0.701109	tr-rmse: 0.338001	tr-rmse: 0.338001
2025-07-23 05:18:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.047496	tr-a-peak@32: 1.000000	tr-rmse: 0.379437	tr-rmse: 0.379437
2025-07-23 05:18:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.047496	tr-a-peak@32: 1.000000	tr-rmse: 0.379437	tr-rmse: 0.379437
2025-07-23 05:18:18 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.04750	tr-a-peak@32:1.00000	tr-rmse:0.37944	tr-rmse:0.37944 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 05:24:22 [DEBUG] XGB validation: p-rmse: 0.199021	a-peak@32: 0.949125
2025-07-23 05:24:22 [DEBUG] XGB iter   0: tr-p-rmse: 0.638221	tr-a-peak@32: 0.727454	tr-rmse: 0.264901	tr-rmse: 0.264901
2025-07-23 05:24:22 [DEBUG] XGB iter  25: tr-p-rmse: 0.044826	tr-a-peak@32: 1.000000	tr-rmse: 0.310380	tr-rmse: 0.310380
2025-07-23 05:24:22 [DEBUG] XGB iter  50: tr-p-rmse: 0.044826	tr-a-peak@32: 1.000000	tr-rmse: 0.310380	tr-rmse: 0.310380
2025-07-23 05:24:22 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.04483	tr-a-peak@32:1.00000	tr-rmse:0.31038	tr-rmse:0.31038 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 05:32:17 [DEBUG] XGB validation: p-rmse: 0.234113	a-peak@32: 0.785597
2025-07-23 05:32:17 [DEBUG] XGB iter   0: tr-p-rmse: 0.584561	tr-a-peak@32: 0.808194	tr-rmse: 0.355010	tr-rmse: 0.355010
2025-07-23 05:32:17 [DEBUG] XGB iter  25: tr-p-rmse: 0.042085	tr-a-peak@32: 0.997717	tr-rmse: 0.428765	tr-rmse: 0.428765
2025-07-23 05:32:17 [DEBUG] XGB iter  50: tr-p-rmse: 0.042085	tr-a-peak@32: 0.997717	tr-rmse: 0.428765	tr-rmse: 0.428765
2025-07-23 05:32:17 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.04208	tr-a-peak@32:0.99772	tr-rmse:0.42877	tr-rmse:0.42877 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 05:40:56 [DEBUG] XGB validation: p-rmse: 0.102319	a-peak@32: 0.959716
2025-07-23 05:40:56 [DEBUG] XGB iter   0: tr-p-rmse: 0.516528	tr-a-peak@32: 0.989580	tr-rmse: 0.442958	tr-rmse: 0.442958
2025-07-23 05:40:56 [DEBUG] XGB iter  25: tr-p-rmse: 0.047236	tr-a-peak@32: 0.992282	tr-rmse: 0.519009	tr-rmse: 0.519009
2025-07-23 05:40:56 [DEBUG] XGB iter  50: tr-p-rmse: 0.047236	tr-a-peak@32: 0.992282	tr-rmse: 0.519009	tr-rmse: 0.519009
2025-07-23 05:40:56 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.04724	tr-a-peak@32:0.99228	tr-rmse:0.51901	tr-rmse:0.51901 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 05:49:41 [DEBUG] XGB validation: p-rmse: 0.062606	a-peak@32: 0.932868
2025-07-23 05:49:41 [DEBUG] XGB iter   0: tr-p-rmse: 0.480423	tr-a-peak@32: 0.994808	tr-rmse: 0.461563	tr-rmse: 0.461563
2025-07-23 05:49:41 [DEBUG] XGB iter  25: tr-p-rmse: 0.049184	tr-a-peak@32: 1.000000	tr-rmse: 0.539121	tr-rmse: 0.539121
2025-07-23 05:49:41 [DEBUG] XGB iter  50: tr-p-rmse: 0.049184	tr-a-peak@32: 1.000000	tr-rmse: 0.539121	tr-rmse: 0.539121
2025-07-23 05:49:41 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.04918	tr-a-peak@32:1.00000	tr-rmse:0.53912	tr-rmse:0.53912 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 05:57:31 [DEBUG] XGB validation: p-rmse: 0.064909	a-peak@32: 0.953295
2025-07-23 05:57:31 [DEBUG] XGB iter   0: tr-p-rmse: 0.471393	tr-a-peak@32: 0.964541	tr-rmse: 0.462075	tr-rmse: 0.462075
2025-07-23 05:57:31 [DEBUG] XGB iter  25: tr-p-rmse: 0.046871	tr-a-peak@32: 0.999498	tr-rmse: 0.541051	tr-rmse: 0.541051
2025-07-23 05:57:31 [DEBUG] XGB iter  50: tr-p-rmse: 0.046871	tr-a-peak@32: 0.999498	tr-rmse: 0.541051	tr-rmse: 0.541051
2025-07-23 05:57:31 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.04687	tr-a-peak@32:0.99950	tr-rmse:0.54105	tr-rmse:0.54105 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 06:05:31 [DEBUG] XGB validation: p-rmse: 0.156367	a-peak@32: 0.987432
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 06:13:12 [DEBUG] XGB validation: p-rmse: 0.080696	a-peak@32: 0.979944
2025-07-23 06:13:12 [DEBUG] XGB iter   0: tr-p-rmse: 0.421580	tr-a-peak@32: 0.958264	tr-rmse: 0.492139	tr-rmse: 0.492139
2025-07-23 06:13:12 [DEBUG] XGB iter  25: tr-p-rmse: 0.052460	tr-a-peak@32: 0.999338	tr-rmse: 0.569977	tr-rmse: 0.569977
2025-07-23 06:13:12 [DEBUG] XGB iter  50: tr-p-rmse: 0.052460	tr-a-peak@32: 0.999338	tr-rmse: 0.569978	tr-rmse: 0.569978
2025-07-23 06:13:12 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.05246	tr-a-peak@32:0.99934	tr-rmse:0.56998	tr-rmse:0.56998 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 06:21:31 [DEBUG] XGB validation: p-rmse: 0.121681	a-peak@32: 0.985215
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 06:29:53 [DEBUG] XGB validation: p-rmse: 0.092020	a-peak@32: 0.986562
2025-07-23 06:29:53 [DEBUG] XGB iter   0: tr-p-rmse: 0.410768	tr-a-peak@32: 0.972787	tr-rmse: 0.502418	tr-rmse: 0.502418
2025-07-23 06:29:53 [DEBUG] XGB iter  25: tr-p-rmse: 0.054204	tr-a-peak@32: 0.994845	tr-rmse: 0.579412	tr-rmse: 0.579412
2025-07-23 06:29:53 [DEBUG] XGB iter  50: tr-p-rmse: 0.054204	tr-a-peak@32: 0.994845	tr-rmse: 0.579413	tr-rmse: 0.579413
2025-07-23 06:29:53 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.05420	tr-a-peak@32:0.99484	tr-rmse:0.57941	tr-rmse:0.57941 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 06:38:13 [DEBUG] XGB validation: p-rmse: 0.059705	a-peak@32: 0.987056
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 06:45:32 [DEBUG] XGB validation: p-rmse: 0.058886	a-peak@32: 0.990176
2025-07-23 06:45:32 [DEBUG] XGB iter   0: tr-p-rmse: 0.382928	tr-a-peak@32: 0.998090	tr-rmse: 0.500737	tr-rmse: 0.500737
2025-07-23 06:45:32 [DEBUG] XGB iter  25: tr-p-rmse: 0.052988	tr-a-peak@32: 0.996346	tr-rmse: 0.579428	tr-rmse: 0.579428
2025-07-23 06:45:32 [DEBUG] XGB iter  50: tr-p-rmse: 0.052988	tr-a-peak@32: 0.996346	tr-rmse: 0.579428	tr-rmse: 0.579428
2025-07-23 06:45:32 [DEBUG] XGB iter  75: tr-p-rmse: 0.052988	tr-a-peak@32: 0.996346	tr-rmse: 0.579428	tr-rmse: 0.579428
2025-07-23 06:45:32 [DEBUG] XGB stopped. Best iteration: [25] tr-p-rmse:0.05299	tr-a-peak@32:0.99635	tr-rmse:0.57943	tr-rmse:0.57943 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 06:53:39 [DEBUG] XGB validation: p-rmse: 0.150419	a-peak@32: 0.984932
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:01:29 [DEBUG] XGB validation: p-rmse: 0.107830	a-peak@32: 0.992110
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:09:44 [DEBUG] XGB validation: p-rmse: 0.094599	a-peak@32: 0.989692
2025-07-23 07:09:44 [DEBUG] XGB iter   0: tr-p-rmse: 0.375341	tr-a-peak@32: 0.980148	tr-rmse: 0.493166	tr-rmse: 0.493166
2025-07-23 07:09:44 [DEBUG] XGB iter  25: tr-p-rmse: 0.050405	tr-a-peak@32: 0.998690	tr-rmse: 0.573796	tr-rmse: 0.573796
2025-07-23 07:09:44 [DEBUG] XGB iter  50: tr-p-rmse: 0.050405	tr-a-peak@32: 0.998690	tr-rmse: 0.573796	tr-rmse: 0.573796
2025-07-23 07:09:44 [DEBUG] XGB iter  75: tr-p-rmse: 0.050405	tr-a-peak@32: 0.998690	tr-rmse: 0.573796	tr-rmse: 0.573796
2025-07-23 07:09:44 [DEBUG] XGB stopped. Best iteration: [25] tr-p-rmse:0.05040	tr-a-peak@32:0.99869	tr-rmse:0.57380	tr-rmse:0.57380 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:17:55 [DEBUG] XGB validation: p-rmse: 0.066420	a-peak@32: 0.990896
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ conv3d_ndhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ conv3d_ndhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[8];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[8];
  for (int ax1_0_3_init = 0; ax1_0_3_init < 2; ++ax1_0_3_init) {
    for (int ax0_0_4_init = 0; ax0_0_4_init < 2; ++ax0_0_4_init) {
      nvcuda::wmma::fill_fragment(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[((ax0_0_4_init * 2) + ax1_0_3_init)], 0.000000e+00f);
    }
  }
  for (int ax2_0_0 = 0; ax2_0_0 < 108; ++ax2_0_0) {
    __syncthreads();
    for (int ax0_ax1_fused_0 = 0; ax0_ax1_fused_0 < 8; ++ax0_ax1_fused_0) {
      half2 condval;
      if (((((((1 <= ((((((((int)blockIdx.y) >> 1) * 16) + (ax0_ax1_fused_0 * 2)) + (((int)threadIdx.y) >> 2)) / 49) + (ax2_0_0 / 36))) && (((((((((int)blockIdx.y) >> 1) * 16) + (ax0_ax1_fused_0 * 2)) + (((int)threadIdx.y) >> 2)) / 49) + (ax2_0_0 / 36)) < 17)) && (1 <= (((ax2_0_0 % 36) / 12) + ((((((((int)blockIdx.y) >> 1) * 32) + (ax0_ax1_fused_0 * 4)) + (((int)threadIdx.y) >> 1)) % 98) / 7)))) && ((((ax2_0_0 % 36) / 12) + ((((((((int)blockIdx.y) >> 1) * 32) + (ax0_ax1_fused_0 * 4)) + (((int)threadIdx.y) >> 1)) % 98) / 7)) < 15)) && (1 <= (((ax2_0_0 % 12) >> 2) + (((((((int)blockIdx.y) >> 1) * 64) + (ax0_ax1_fused_0 * 8)) + ((int)threadIdx.y)) % 14)))) && ((((ax2_0_0 % 12) >> 2) + (((((((int)blockIdx.y) >> 1) * 64) + (ax0_ax1_fused_0 * 8)) + ((int)threadIdx.y)) % 14)) < 15))) {
        condval = *(half2*)(inputs + (((((((((ax2_0_0 / 36) * 50176) + ((((int)blockIdx.y) >> 1) * 16384)) + (((ax2_0_0 % 36) / 12) * 3584)) + (ax0_ax1_fused_0 * 2048)) + (((int)threadIdx.y) * 256)) + ((ax2_0_0 % 12) * 64)) + (((int)threadIdx.x) * 2)) - 54016));
      } else {
        condval = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
      }
      *(half2*)(((half*)buf_dyn_shmem) + (((ax0_ax1_fused_0 * 576) + (((int)threadIdx.y) * 72)) + (((int)threadIdx.x) * 2))) = condval;
    }
    for (int ax0_ax1_fused_0_1 = 0; ax0_ax1_fused_0_1 < 4; ++ax0_ax1_fused_0_1) {
      *(uint4*)(((half*)buf_dyn_shmem) + (((((ax0_ax1_fused_0_1 * 2176) + (((int)threadIdx.y) * 272)) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4608)) = *(uint4*)(weight + ((((((ax2_0_0 * 16384) + (ax0_ax1_fused_0_1 * 4096)) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)));
    }
    __syncthreads();
    for (int ax0_0 = 0; ax0_0 < 2; ++ax0_0) {
      for (int ax1_0 = 0; ax1_0 < 4; ++ax1_0) {
        nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[((ax0_0 * 4) + ax1_0)], (&(((half*)buf_dyn_shmem)[((((((int)threadIdx.y) >> 2) * 2304) + (ax0_0 * 1152)) + (ax1_0 * 16))])), 72);
      }
    }
    for (int ax0_0_1 = 0; ax0_0_1 < 4; ++ax0_0_1) {
      for (int ax1_0_1 = 0; ax1_0_1 < 2; ++ax1_0_1) {
        nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[((ax0_0_1 * 2) + ax1_0_1)], (&(((half*)buf_dyn_shmem)[((((ax0_0_1 * 2176) + ((((int)threadIdx.y) & 3) * 32)) + (ax1_0_1 * 16)) + 4608)])), 136);
      }
    }
    for (int ax1_0_3 = 0; ax1_0_3 < 2; ++ax1_0_3) {
      for (int ax2_0_2 = 0; ax2_0_2 < 4; ++ax2_0_2) {
        for (int ax0_0_4 = 0; ax0_0_4 < 2; ++ax0_0_4) {
          nvcuda::wmma::mma_sync(conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[((ax0_0_4 * 2) + ax1_0_3)], PadInput_reindex_shared_dyn_wmma_matrix_a[((ax0_0_4 * 4) + ax2_0_2)], weight_reindex_shared_dyn_wmma_matrix_b[((ax2_0_2 * 2) + ax1_0_3)], conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[((ax0_0_4 * 2) + ax1_0_3)]);
        }
      }
    }
  }
  for (int ax2 = 0; ax2 < 2; ++ax2) {
    __syncthreads();
    for (int ax3 = 0; ax3 < 2; ++ax3) {
      nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + (ax3 * 256))])), conv3d_ndhwc_reindex_shared_dyn_wmma_accumulator[((ax2 * 2) + ax3)], 16, nvcuda::wmma::mem_row_major);
    }
    __syncthreads();
    for (int ax0_ax1_ax3_ax4_ax5_fused_0 = 0; ax0_ax1_ax3_ax4_ax5_fused_0 < 8; ++ax0_ax1_ax3_ax4_ax5_fused_0) {
      *(half2*)(conv3d_ndhwc + ((((((((((((int)blockIdx.y) >> 1) * 16384) + ((ax0_ax1_ax3_ax4_ax5_fused_0 >> 2) * 8192)) + (ax2 * 4096)) + ((((int)threadIdx.y) & 3) * 1024)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.y) & 1) * 128)) + ((ax0_ax1_ax3_ax4_ax5_fused_0 & 3) * 32)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2))) = *(half2*)(((half*)buf_dyn_shmem) + (((ax0_ax1_ax3_ax4_ax5_fused_0 * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)));
    }
  }
}


The time of C3D is 0.234 ms
2025-07-23 07:17:57 [INFO] Logging directory: /tmp/tmp8e8gm2w6/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:20:28 [DEBUG] XGB iter   0: tr-p-rmse: 0.509538	tr-a-peak@32: 0.851730	tr-rmse: 0.340758	tr-rmse: 0.340758
2025-07-23 07:20:28 [DEBUG] XGB iter  25: tr-p-rmse: 0.037396	tr-a-peak@32: 1.000000	tr-rmse: 0.417734	tr-rmse: 0.417734
2025-07-23 07:20:28 [DEBUG] XGB iter  50: tr-p-rmse: 0.037396	tr-a-peak@32: 1.000000	tr-rmse: 0.417734	tr-rmse: 0.417734
2025-07-23 07:20:28 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.03740	tr-a-peak@32:1.00000	tr-rmse:0.41773	tr-rmse:0.41773 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:22:45 [DEBUG] XGB validation: p-rmse: 0.198194	a-peak@32: 0.873533
2025-07-23 07:22:45 [DEBUG] XGB iter   0: tr-p-rmse: 0.507846	tr-a-peak@32: 0.824069	tr-rmse: 0.325915	tr-rmse: 0.325915
2025-07-23 07:22:45 [DEBUG] XGB iter  25: tr-p-rmse: 0.032541	tr-a-peak@32: 1.000000	tr-rmse: 0.404869	tr-rmse: 0.404869
2025-07-23 07:22:45 [DEBUG] XGB iter  50: tr-p-rmse: 0.032541	tr-a-peak@32: 1.000000	tr-rmse: 0.404869	tr-rmse: 0.404869
2025-07-23 07:22:45 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.03254	tr-a-peak@32:1.00000	tr-rmse:0.40487	tr-rmse:0.40487 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:25:32 [DEBUG] XGB validation: p-rmse: 0.176440	a-peak@32: 0.761322
2025-07-23 07:25:32 [DEBUG] XGB iter   0: tr-p-rmse: 0.482483	tr-a-peak@32: 0.845492	tr-rmse: 0.349806	tr-rmse: 0.349806
2025-07-23 07:25:32 [DEBUG] XGB iter  25: tr-p-rmse: 0.043462	tr-a-peak@32: 1.000000	tr-rmse: 0.436021	tr-rmse: 0.436021
2025-07-23 07:25:32 [DEBUG] XGB iter  50: tr-p-rmse: 0.043462	tr-a-peak@32: 1.000000	tr-rmse: 0.436021	tr-rmse: 0.436021
2025-07-23 07:25:32 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.04346	tr-a-peak@32:1.00000	tr-rmse:0.43602	tr-rmse:0.43602 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:28:10 [DEBUG] XGB validation: p-rmse: 0.119711	a-peak@32: 0.962191
2025-07-23 07:28:10 [DEBUG] XGB iter   0: tr-p-rmse: 0.447880	tr-a-peak@32: 0.926525	tr-rmse: 0.401944	tr-rmse: 0.401944
2025-07-23 07:28:10 [DEBUG] XGB iter  25: tr-p-rmse: 0.044240	tr-a-peak@32: 0.997827	tr-rmse: 0.484893	tr-rmse: 0.484893
2025-07-23 07:28:10 [DEBUG] XGB iter  50: tr-p-rmse: 0.044240	tr-a-peak@32: 0.997827	tr-rmse: 0.484893	tr-rmse: 0.484893
2025-07-23 07:28:10 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.04424	tr-a-peak@32:0.99783	tr-rmse:0.48489	tr-rmse:0.48489 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:30:49 [DEBUG] XGB validation: p-rmse: 0.107520	a-peak@32: 0.993334
2025-07-23 07:30:49 [DEBUG] XGB iter   0: tr-p-rmse: 0.419015	tr-a-peak@32: 0.961481	tr-rmse: 0.435059	tr-rmse: 0.435059
2025-07-23 07:30:49 [DEBUG] XGB iter  25: tr-p-rmse: 0.048815	tr-a-peak@32: 0.999502	tr-rmse: 0.517791	tr-rmse: 0.517791
2025-07-23 07:30:49 [DEBUG] XGB iter  50: tr-p-rmse: 0.048815	tr-a-peak@32: 0.999502	tr-rmse: 0.517791	tr-rmse: 0.517791
2025-07-23 07:30:49 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.04881	tr-a-peak@32:0.99950	tr-rmse:0.51779	tr-rmse:0.51779 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:33:25 [DEBUG] XGB validation: p-rmse: 0.147818	a-peak@32: 0.872719
2025-07-23 07:33:25 [DEBUG] XGB iter   0: tr-p-rmse: 0.468842	tr-a-peak@32: 0.644650	tr-rmse: 0.263011	tr-rmse: 0.263011
2025-07-23 07:33:25 [DEBUG] XGB iter  25: tr-p-rmse: 0.044603	tr-a-peak@32: 1.000000	tr-rmse: 0.370601	tr-rmse: 0.370601
2025-07-23 07:33:25 [DEBUG] XGB iter  50: tr-p-rmse: 0.044603	tr-a-peak@32: 1.000000	tr-rmse: 0.370601	tr-rmse: 0.370601
2025-07-23 07:33:25 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.04460	tr-a-peak@32:1.00000	tr-rmse:0.37060	tr-rmse:0.37060 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:36:04 [DEBUG] XGB validation: p-rmse: 0.268958	a-peak@32: 0.868660
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:38:42 [DEBUG] XGB validation: p-rmse: 0.281529	a-peak@32: 0.893737
2025-07-23 07:38:42 [DEBUG] XGB iter   0: tr-p-rmse: 0.446461	tr-a-peak@32: 0.684979	tr-rmse: 0.274234	tr-rmse: 0.274234
2025-07-23 07:38:42 [DEBUG] XGB iter  25: tr-p-rmse: 0.052262	tr-a-peak@32: 0.703411	tr-rmse: 0.384609	tr-rmse: 0.384609
2025-07-23 07:38:42 [DEBUG] XGB iter  50: tr-p-rmse: 0.052262	tr-a-peak@32: 0.703411	tr-rmse: 0.384609	tr-rmse: 0.384609
2025-07-23 07:38:42 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05226	tr-a-peak@32:0.70341	tr-rmse:0.38461	tr-rmse:0.38461 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:41:20 [DEBUG] XGB validation: p-rmse: 0.110109	a-peak@32: 0.816250
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:44:02 [DEBUG] XGB validation: p-rmse: 0.096733	a-peak@32: 0.860339
2025-07-23 07:44:02 [DEBUG] XGB iter   0: tr-p-rmse: 0.435360	tr-a-peak@32: 0.826336	tr-rmse: 0.281251	tr-rmse: 0.281251
2025-07-23 07:44:02 [DEBUG] XGB iter  25: tr-p-rmse: 0.055662	tr-a-peak@32: 0.724472	tr-rmse: 0.392107	tr-rmse: 0.392107
2025-07-23 07:44:02 [DEBUG] XGB iter  50: tr-p-rmse: 0.055662	tr-a-peak@32: 0.724472	tr-rmse: 0.392107	tr-rmse: 0.392107
2025-07-23 07:44:02 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05566	tr-a-peak@32:0.72447	tr-rmse:0.39211	tr-rmse:0.39211 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:46:40 [DEBUG] XGB validation: p-rmse: 0.104648	a-peak@32: 0.894392
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:49:21 [DEBUG] XGB validation: p-rmse: 0.093319	a-peak@32: 0.872579
2025-07-23 07:49:21 [DEBUG] XGB iter   0: tr-p-rmse: 0.426832	tr-a-peak@32: 0.669261	tr-rmse: 0.286912	tr-rmse: 0.286912
2025-07-23 07:49:21 [DEBUG] XGB iter  25: tr-p-rmse: 0.060279	tr-a-peak@32: 0.756361	tr-rmse: 0.398054	tr-rmse: 0.398054
2025-07-23 07:49:21 [DEBUG] XGB iter  50: tr-p-rmse: 0.060279	tr-a-peak@32: 0.756361	tr-rmse: 0.398054	tr-rmse: 0.398054
2025-07-23 07:49:21 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.06028	tr-a-peak@32:0.75636	tr-rmse:0.39805	tr-rmse:0.39805 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:51:59 [DEBUG] XGB validation: p-rmse: 0.070895	a-peak@32: 0.976958
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:54:41 [DEBUG] XGB validation: p-rmse: 0.066595	a-peak@32: 0.991518
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 07:57:20 [DEBUG] XGB validation: p-rmse: 0.125032	a-peak@32: 0.731598
2025-07-23 07:57:20 [DEBUG] XGB iter   0: tr-p-rmse: 0.416449	tr-a-peak@32: 0.692990	tr-rmse: 0.296764	tr-rmse: 0.296764
2025-07-23 07:57:20 [DEBUG] XGB iter  25: tr-p-rmse: 0.062690	tr-a-peak@32: 0.797515	tr-rmse: 0.407212	tr-rmse: 0.407212
2025-07-23 07:57:20 [DEBUG] XGB iter  50: tr-p-rmse: 0.062690	tr-a-peak@32: 0.797515	tr-rmse: 0.407212	tr-rmse: 0.407212
2025-07-23 07:57:20 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.06269	tr-a-peak@32:0.79751	tr-rmse:0.40721	tr-rmse:0.40721 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:00:02 [DEBUG] XGB validation: p-rmse: 0.143740	a-peak@32: 0.776278
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:02:05 [DEBUG] XGB validation: p-rmse: 0.327638	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ X, half* __restrict__ Y, half* __restrict__ Z);
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ X, half* __restrict__ Y, half* __restrict__ Z) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> Z_reindex_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> X_reindex_shared_dyn_wmma_matrix_a[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> Y_reindex_shared_dyn_wmma_matrix_b[4];
  nvcuda::wmma::fill_fragment(Z_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  for (int ax3_0_0 = 0; ax3_0_0 < 4; ++ax3_0_0) {
    __syncthreads();
    *(half4*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4))) = *(half4*)(X + (((((((int)blockIdx.y) * 32768) + ((((int)blockIdx.x) >> 3) * 16384)) + (((int)threadIdx.y) * 512)) + (ax3_0_0 * 128)) + (((int)threadIdx.x) * 4)));
    *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 1088)) = *(half4*)(X + ((((((((int)blockIdx.y) * 32768) + ((((int)blockIdx.x) >> 3) * 16384)) + (((int)threadIdx.y) * 512)) + (ax3_0_0 * 128)) + (((int)threadIdx.x) * 4)) + 4096));
    *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 2176)) = *(half4*)(X + ((((((((int)blockIdx.y) * 32768) + ((((int)blockIdx.x) >> 3) * 16384)) + (((int)threadIdx.y) * 512)) + (ax3_0_0 * 128)) + (((int)threadIdx.x) * 4)) + 8192));
    *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 136) + (((int)threadIdx.x) * 4)) + 3264)) = *(half4*)(X + ((((((((int)blockIdx.y) * 32768) + ((((int)blockIdx.x) >> 3) * 16384)) + (((int)threadIdx.y) * 512)) + (ax3_0_0 * 128)) + (((int)threadIdx.x) * 4)) + 12288));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 4352)) = *(half4*)(Y + (((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)blockIdx.x) & 7) * 64)) + ((((int)threadIdx.x) & 15) * 4)));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 5504)) = *(half4*)(Y + ((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)blockIdx.x) & 7) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 8192));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 6656)) = *(half4*)(Y + ((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)blockIdx.x) & 7) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 16384));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 7808)) = *(half4*)(Y + ((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)blockIdx.x) & 7) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 24576));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 8960)) = *(half4*)(Y + ((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)blockIdx.x) & 7) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 32768));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 10112)) = *(half4*)(Y + ((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)blockIdx.x) & 7) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 40960));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 11264)) = *(half4*)(Y + ((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)blockIdx.x) & 7) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 49152));
    *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 144) + ((((int)threadIdx.x) >> 4) * 72)) + ((((int)threadIdx.x) & 15) * 4)) + 12416)) = *(half4*)(Y + ((((((ax3_0_0 * 65536) + (((int)threadIdx.y) * 1024)) + ((((int)threadIdx.x) >> 4) * 512)) + ((((int)blockIdx.x) & 7) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 57344));
    __syncthreads();
    for (int ax3_0_1 = 0; ax3_0_1 < 2; ++ax3_0_1) {
      nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(((((int)threadIdx.y) >> 2) * 2176) + (ax3_0_1 * 64))])), 136);
      nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((((int)threadIdx.y) >> 2) * 2176) + (ax3_0_1 * 64)) + 16)])), 136);
      nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((((int)threadIdx.y) >> 2) * 2176) + (ax3_0_1 * 64)) + 32)])), 136);
      nvcuda::wmma::load_matrix_sync(X_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((((int)threadIdx.y) >> 2) * 2176) + (ax3_0_1 * 64)) + 48)])), 136);
      nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((ax3_0_1 * 4608) + ((((int)threadIdx.y) & 3) * 16)) + 4352)])), 72);
      nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[(((ax3_0_1 * 4608) + ((((int)threadIdx.y) & 3) * 16)) + 5504)])), 72);
      nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[(((ax3_0_1 * 4608) + ((((int)threadIdx.y) & 3) * 16)) + 6656)])), 72);
      nvcuda::wmma::load_matrix_sync(Y_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[(((ax3_0_1 * 4608) + ((((int)threadIdx.y) & 3) * 16)) + 7808)])), 72);
      nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[0], Y_reindex_shared_dyn_wmma_matrix_b[0], Z_reindex_shared_dyn_wmma_accumulator[0]);
      nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[1], Y_reindex_shared_dyn_wmma_matrix_b[1], Z_reindex_shared_dyn_wmma_accumulator[0]);
      nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[2], Y_reindex_shared_dyn_wmma_matrix_b[2], Z_reindex_shared_dyn_wmma_accumulator[0]);
      nvcuda::wmma::mma_sync(Z_reindex_shared_dyn_wmma_accumulator[0], X_reindex_shared_dyn_wmma_matrix_a[3], Y_reindex_shared_dyn_wmma_matrix_b[3], Z_reindex_shared_dyn_wmma_accumulator[0]);
    }
  }
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 256)])), Z_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half2*)(Z + (((((((((int)blockIdx.y) * 32768) + ((((int)blockIdx.x) >> 3) * 16384)) + ((((int)threadIdx.y) & 3) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + ((((int)blockIdx.x) & 7) * 64)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2))) = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)));
  *(half2*)(Z + ((((((((((int)blockIdx.y) * 32768) + ((((int)blockIdx.x) >> 3) * 16384)) + ((((int)threadIdx.y) & 3) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + ((((int)blockIdx.x) & 7) * 64)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 32)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 512));
  *(half2*)(Z + ((((((((((int)blockIdx.y) * 32768) + ((((int)blockIdx.x) >> 3) * 16384)) + ((((int)threadIdx.y) & 3) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + ((((int)blockIdx.x) & 7) * 64)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 8192)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1024));
  *(half2*)(Z + ((((((((((int)blockIdx.y) * 32768) + ((((int)blockIdx.x) >> 3) * 16384)) + ((((int)threadIdx.y) & 3) * 2048)) + ((((int)threadIdx.x) >> 3) * 512)) + ((((int)blockIdx.x) & 7) * 64)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 8224)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1536));
}


The time of GMM is 0.019 ms
2025-07-23 08:02:06 [INFO] Logging directory: /tmp/tmp7g4kbhwo/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:04:27 [DEBUG] XGB iter   0: tr-p-rmse: 0.612927	tr-a-peak@32: 0.950500	tr-rmse: 0.406388	tr-rmse: 0.406388
2025-07-23 08:04:27 [DEBUG] XGB iter  25: tr-p-rmse: 0.045806	tr-a-peak@32: 1.000000	tr-rmse: 0.430284	tr-rmse: 0.430284
2025-07-23 08:04:27 [DEBUG] XGB iter  50: tr-p-rmse: 0.045806	tr-a-peak@32: 1.000000	tr-rmse: 0.430284	tr-rmse: 0.430284
2025-07-23 08:04:27 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.04581	tr-a-peak@32:1.00000	tr-rmse:0.43028	tr-rmse:0.43028 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:06:27 [DEBUG] XGB validation: p-rmse: 0.144817	a-peak@32: 0.966710
2025-07-23 08:06:27 [DEBUG] XGB iter   0: tr-p-rmse: 0.544954	tr-a-peak@32: 0.953084	tr-rmse: 0.344237	tr-rmse: 0.344237
2025-07-23 08:06:27 [DEBUG] XGB iter  25: tr-p-rmse: 0.046821	tr-a-peak@32: 1.000000	tr-rmse: 0.384968	tr-rmse: 0.384968
2025-07-23 08:06:27 [DEBUG] XGB iter  50: tr-p-rmse: 0.046821	tr-a-peak@32: 1.000000	tr-rmse: 0.384968	tr-rmse: 0.384968
2025-07-23 08:06:27 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.04682	tr-a-peak@32:1.00000	tr-rmse:0.38497	tr-rmse:0.38497 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:09:14 [DEBUG] XGB validation: p-rmse: 0.260569	a-peak@32: 0.941888
2025-07-23 08:09:14 [DEBUG] XGB iter   0: tr-p-rmse: 0.473667	tr-a-peak@32: 0.896252	tr-rmse: 0.434979	tr-rmse: 0.434979
2025-07-23 08:09:14 [DEBUG] XGB iter  25: tr-p-rmse: 0.049014	tr-a-peak@32: 1.000000	tr-rmse: 0.485716	tr-rmse: 0.485716
2025-07-23 08:09:14 [DEBUG] XGB iter  50: tr-p-rmse: 0.049014	tr-a-peak@32: 1.000000	tr-rmse: 0.485716	tr-rmse: 0.485716
2025-07-23 08:09:14 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.04901	tr-a-peak@32:1.00000	tr-rmse:0.48572	tr-rmse:0.48572 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:12:02 [DEBUG] XGB validation: p-rmse: 0.254500	a-peak@32: 0.724740
2025-07-23 08:12:02 [DEBUG] XGB iter   0: tr-p-rmse: 0.429188	tr-a-peak@32: 0.762930	tr-rmse: 0.366532	tr-rmse: 0.366532
2025-07-23 08:12:02 [DEBUG] XGB iter  25: tr-p-rmse: 0.051939	tr-a-peak@32: 1.000000	tr-rmse: 0.426233	tr-rmse: 0.426233
2025-07-23 08:12:02 [DEBUG] XGB iter  50: tr-p-rmse: 0.051939	tr-a-peak@32: 1.000000	tr-rmse: 0.426233	tr-rmse: 0.426233
2025-07-23 08:12:02 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.05194	tr-a-peak@32:1.00000	tr-rmse:0.42623	tr-rmse:0.42623 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:14:46 [DEBUG] XGB validation: p-rmse: 0.208203	a-peak@32: 0.957086
2025-07-23 08:14:46 [DEBUG] XGB iter   0: tr-p-rmse: 0.415126	tr-a-peak@32: 0.673179	tr-rmse: 0.407786	tr-rmse: 0.407786
2025-07-23 08:14:46 [DEBUG] XGB iter  25: tr-p-rmse: 0.053369	tr-a-peak@32: 0.997104	tr-rmse: 0.464867	tr-rmse: 0.464867
2025-07-23 08:14:46 [DEBUG] XGB iter  50: tr-p-rmse: 0.053369	tr-a-peak@32: 0.997104	tr-rmse: 0.464867	tr-rmse: 0.464867
2025-07-23 08:14:46 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05337	tr-a-peak@32:0.99710	tr-rmse:0.46487	tr-rmse:0.46487 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:17:23 [DEBUG] XGB validation: p-rmse: 0.375452	a-peak@32: 0.715864
2025-07-23 08:17:23 [DEBUG] XGB iter   0: tr-p-rmse: 0.425411	tr-a-peak@32: 0.855531	tr-rmse: 0.442122	tr-rmse: 0.442122
2025-07-23 08:17:23 [DEBUG] XGB iter  25: tr-p-rmse: 0.153851	tr-a-peak@32: 0.870661	tr-rmse: 0.498153	tr-rmse: 0.498153
2025-07-23 08:17:23 [DEBUG] XGB iter  50: tr-p-rmse: 0.153851	tr-a-peak@32: 0.870661	tr-rmse: 0.498153	tr-rmse: 0.498153
2025-07-23 08:17:23 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.15385	tr-a-peak@32:0.87066	tr-rmse:0.49815	tr-rmse:0.49815 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:20:04 [DEBUG] XGB validation: p-rmse: 0.221633	a-peak@32: 0.832903
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:22:53 [DEBUG] XGB validation: p-rmse: 0.169089	a-peak@32: 0.964804
2025-07-23 08:22:54 [DEBUG] XGB iter   0: tr-p-rmse: 0.404519	tr-a-peak@32: 0.896422	tr-rmse: 0.486809	tr-rmse: 0.486809
2025-07-23 08:22:54 [DEBUG] XGB iter  25: tr-p-rmse: 0.135951	tr-a-peak@32: 0.994029	tr-rmse: 0.542446	tr-rmse: 0.542446
2025-07-23 08:22:54 [DEBUG] XGB iter  50: tr-p-rmse: 0.135951	tr-a-peak@32: 0.994029	tr-rmse: 0.542446	tr-rmse: 0.542446
2025-07-23 08:22:54 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.13592	tr-a-peak@32:0.99478	tr-rmse:0.54241	tr-rmse:0.54241 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:25:41 [DEBUG] XGB validation: p-rmse: 0.121110	a-peak@32: 0.975084
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:28:43 [DEBUG] XGB validation: p-rmse: 0.133494	a-peak@32: 0.927201
2025-07-23 08:28:43 [DEBUG] XGB iter   0: tr-p-rmse: 0.386697	tr-a-peak@32: 0.878614	tr-rmse: 0.496188	tr-rmse: 0.496188
2025-07-23 08:28:43 [DEBUG] XGB iter  25: tr-p-rmse: 0.125738	tr-a-peak@32: 0.995748	tr-rmse: 0.552600	tr-rmse: 0.552600
2025-07-23 08:28:43 [DEBUG] XGB iter  50: tr-p-rmse: 0.125738	tr-a-peak@32: 0.995748	tr-rmse: 0.552600	tr-rmse: 0.552600
2025-07-23 08:28:43 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.12574	tr-a-peak@32:0.99575	tr-rmse:0.55260	tr-rmse:0.55260 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:31:32 [DEBUG] XGB validation: p-rmse: 0.212060	a-peak@32: 0.788898
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:34:08 [DEBUG] XGB validation: p-rmse: 0.150113	a-peak@32: 0.982152
2025-07-23 08:34:08 [DEBUG] XGB iter   0: tr-p-rmse: 0.378185	tr-a-peak@32: 0.627234	tr-rmse: 0.316745	tr-rmse: 0.316745
2025-07-23 08:34:08 [DEBUG] XGB iter  25: tr-p-rmse: 0.090903	tr-a-peak@32: 0.988942	tr-rmse: 0.385399	tr-rmse: 0.385399
2025-07-23 08:34:08 [DEBUG] XGB iter  50: tr-p-rmse: 0.090903	tr-a-peak@32: 0.988942	tr-rmse: 0.385399	tr-rmse: 0.385399
2025-07-23 08:34:08 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.09090	tr-a-peak@32:0.98894	tr-rmse:0.38540	tr-rmse:0.38540 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:36:42 [DEBUG] XGB validation: p-rmse: 0.088247	a-peak@32: 0.990526
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:39:28 [DEBUG] XGB validation: p-rmse: 0.083069	a-peak@32: 0.989788
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:42:00 [DEBUG] XGB validation: p-rmse: 0.107033	a-peak@32: 0.840252
2025-07-23 08:42:00 [DEBUG] XGB iter   0: tr-p-rmse: 0.367848	tr-a-peak@32: 0.630283	tr-rmse: 0.324784	tr-rmse: 0.324784
2025-07-23 08:42:00 [DEBUG] XGB iter  25: tr-p-rmse: 0.089136	tr-a-peak@32: 0.671103	tr-rmse: 0.393787	tr-rmse: 0.393787
2025-07-23 08:42:00 [DEBUG] XGB iter  50: tr-p-rmse: 0.089136	tr-a-peak@32: 0.671103	tr-rmse: 0.393787	tr-rmse: 0.393787
2025-07-23 08:42:00 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.08914	tr-a-peak@32:0.67110	tr-rmse:0.39379	tr-rmse:0.39379 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:44:41 [DEBUG] XGB validation: p-rmse: 0.103708	a-peak@32: 0.843214
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(224) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(224) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  half conv2d_nhwc_local[4];
  __shared__ half PadInput_shared[1152];
  __shared__ half weight_shared[18432];
  conv2d_nhwc_local[0] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[1] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[2] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[3] = __float2half_rn(0.000000e+00f);
  for (int rc_0 = 0; rc_0 < 2; ++rc_0) {
    __syncthreads();
    half4 condval;
    if ((((1 <= (((((int)blockIdx.x) / 28) * 7) + (((int)threadIdx.x) >> 5))) && (1 <= ((((((int)blockIdx.x) % 28) >> 2) * 2) + ((((int)threadIdx.x) & 31) >> 3)))) && (((((((int)blockIdx.x) % 28) >> 2) * 2) + ((((int)threadIdx.x) & 31) >> 3)) < 15))) {
      condval = *(half4*)(inputs + (((((((((((int)blockIdx.x) / 28) * 25088) + ((((int)threadIdx.x) >> 5) * 3584)) + (((((int)blockIdx.x) % 28) >> 2) * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + (rc_0 * 32)) + ((((int)threadIdx.x) & 7) * 4)) - 3840));
    } else {
      condval = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half4*)(PadInput_shared + (((int)threadIdx.x) * 4)) = condval;
    if (((int)threadIdx.x) < 64) {
      half4 condval_1;
      if (((((((((int)blockIdx.x) / 28) * 7) + (((int)threadIdx.x) >> 5)) < 8) && (1 <= ((((((int)blockIdx.x) % 28) >> 2) * 2) + ((((int)threadIdx.x) & 31) >> 3)))) && (((((((int)blockIdx.x) % 28) >> 2) * 2) + ((((int)threadIdx.x) & 31) >> 3)) < 15))) {
        condval_1 = *(half4*)(inputs + (((((((((((int)blockIdx.x) / 28) * 25088) + ((((int)threadIdx.x) >> 5) * 3584)) + (((((int)blockIdx.x) % 28) >> 2) * 512)) + (((((int)threadIdx.x) & 31) >> 3) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + (rc_0 * 32)) + ((((int)threadIdx.x) & 7) * 4)) + 21248));
      } else {
        condval_1 = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
      }
      *(half4*)(PadInput_shared + ((((int)threadIdx.x) * 4) + 896)) = condval_1;
    }
    *(half4*)(weight_shared + (((int)threadIdx.x) * 4)) = *(half4*)(weight + ((((rc_0 * 8192) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 896)) = *(half4*)(weight + (((((rc_0 * 8192) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 3584));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 1792)) = *(half4*)(weight + (((((((((int)threadIdx.x) + 448) >> 9) * 16384) + (rc_0 * 8192)) + ((((((int)threadIdx.x) >> 4) + 28) & 31) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 2688)) = *(half4*)(weight + ((((((((((int)threadIdx.x) + 672) >> 9) * 16384) + (rc_0 * 8192)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 2560));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 3584)) = *(half4*)(weight + (((((((((int)threadIdx.x) + 896) >> 9) * 16384) + (rc_0 * 8192)) + ((((((int)threadIdx.x) >> 4) + 24) & 31) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 4480)) = *(half4*)(weight + ((((((((((int)threadIdx.x) + 1120) >> 9) * 16384) + (rc_0 * 8192)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 1536));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 5376)) = *(half4*)(weight + (((((((((int)threadIdx.x) + 1344) >> 9) * 16384) + (rc_0 * 8192)) + ((((((int)threadIdx.x) >> 4) + 20) & 31) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 6272)) = *(half4*)(weight + ((((((((((int)threadIdx.x) + 1568) >> 9) * 16384) + (rc_0 * 8192)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 512));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 7168)) = *(half4*)(weight + ((((((((((int)threadIdx.x) + 1792) >> 9) * 16384) + (rc_0 * 8192)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 4096));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 8064)) = *(half4*)(weight + (((((((((int)threadIdx.x) + 2016) >> 9) * 16384) + (rc_0 * 8192)) + ((((((int)threadIdx.x) >> 4) + 30) & 31) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 8960)) = *(half4*)(weight + ((((((((((int)threadIdx.x) + 2240) >> 9) * 16384) + (rc_0 * 8192)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 3072));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 9856)) = *(half4*)(weight + (((((((((int)threadIdx.x) + 2464) >> 9) * 16384) + (rc_0 * 8192)) + ((((((int)threadIdx.x) >> 4) + 26) & 31) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 10752)) = *(half4*)(weight + ((((((((((int)threadIdx.x) + 2688) >> 9) * 16384) + (rc_0 * 8192)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 2048));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 11648)) = *(half4*)(weight + (((((((((int)threadIdx.x) + 2912) >> 9) * 16384) + (rc_0 * 8192)) + ((((((int)threadIdx.x) >> 4) + 22) & 31) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 12544)) = *(half4*)(weight + ((((((((((int)threadIdx.x) + 3136) >> 9) * 16384) + (rc_0 * 8192)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 1024));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 13440)) = *(half4*)(weight + ((((((((((int)threadIdx.x) + 3360) >> 9) * 16384) + (rc_0 * 8192)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 4608));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 14336)) = *(half4*)(weight + (((((rc_0 * 8192) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 114688));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 15232)) = *(half4*)(weight + ((((((((((int)threadIdx.x) + 3808) >> 9) * 16384) + (rc_0 * 8192)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 3584));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 16128)) = *(half4*)(weight + (((((((((int)threadIdx.x) + 4032) >> 9) * 16384) + (rc_0 * 8192)) + ((((((int)threadIdx.x) >> 4) + 28) & 31) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)));
    *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 17024)) = *(half4*)(weight + ((((((((((int)threadIdx.x) + 4256) >> 9) * 16384) + (rc_0 * 8192)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 2560));
    if (((int)threadIdx.x) < 128) {
      *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 17920)) = *(half4*)(weight + ((((((((((int)threadIdx.x) + 4480) >> 9) * 16384) + (rc_0 * 8192)) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 15) * 4)) + 6144));
    }
    __syncthreads();
    for (int rc_1 = 0; rc_1 < 2; ++rc_1) {
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16))] * weight_shared[((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2))]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16))] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 1)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 32)] * weight_shared[((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2))]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 32)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 1)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 1)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 64)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 1)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 65)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 33)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 64)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 33)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 65)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 2)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 128)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 2)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 129)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 34)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 128)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 34)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 129)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 3)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 192)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 3)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 193)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 35)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 192)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 35)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 193)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 4)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 256)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 4)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 257)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 36)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 256)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 36)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 257)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 5)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 320)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 5)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 321)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 37)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 320)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 37)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 321)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 6)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 384)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 6)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 385)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 38)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 384)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 38)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 385)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 7)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 448)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 7)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 449)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 39)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 448)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 39)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 449)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 8)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 512)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 8)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 513)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 40)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 512)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 40)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 513)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 9)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 576)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 9)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 577)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 41)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 576)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 41)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 577)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 10)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 640)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 10)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 641)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 42)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 640)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 42)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 641)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 11)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 704)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 11)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 705)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 43)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 704)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 43)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 705)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 12)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 768)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 12)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 769)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 44)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 768)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 44)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 769)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 13)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 832)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 13)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 833)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 45)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 832)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 45)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 833)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 14)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 896)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 14)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 897)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 46)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 896)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 46)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 897)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 15)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 960)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 15)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 961)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 47)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 960)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 47)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 961)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 32)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2048)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 32)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2049)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 64)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2048)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 64)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2049)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 33)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2112)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 33)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2113)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 65)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2112)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 65)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2113)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 34)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2176)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 34)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2177)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 66)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2176)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 66)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2177)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 35)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2240)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 35)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2241)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 67)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2240)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 67)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2241)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 36)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2304)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 36)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2305)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 68)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2304)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 68)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2305)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 37)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2368)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 37)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2369)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 69)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2368)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 69)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2369)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 38)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2432)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 38)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2433)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 70)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2432)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 70)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2433)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 39)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2496)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 39)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2497)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 71)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2496)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 71)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2497)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 40)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2560)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 40)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2561)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 72)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2560)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 72)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2561)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 41)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2624)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 41)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2625)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 73)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2624)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 73)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2625)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 42)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2688)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 42)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2689)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 74)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2688)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 74)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2689)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 43)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2752)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 43)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2753)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 75)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2752)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 75)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2753)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 44)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2816)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 44)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2817)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 76)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2816)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 76)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2817)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 45)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2880)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 45)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2881)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 77)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2880)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 77)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2881)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 46)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2944)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 46)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2945)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 78)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2944)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 78)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 2945)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 47)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 3008)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 47)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 3009)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 79)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 3008)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 79)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 3009)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 64)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4096)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 64)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4097)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 96)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4096)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 96)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4097)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 65)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4160)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 65)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4161)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 97)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4160)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 97)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4161)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 66)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4224)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 66)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4225)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 98)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4224)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 98)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4225)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 67)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4288)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 67)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4289)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 99)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4288)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 99)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4289)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 68)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4352)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 68)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4353)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 100)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4352)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 100)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4353)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 69)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4416)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 69)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4417)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 101)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4416)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 101)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4417)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 70)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4480)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 70)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4481)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 102)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4480)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 102)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4481)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 71)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4544)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 71)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4545)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 103)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4544)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 103)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4545)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 72)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4608)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 72)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4609)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 104)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4608)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 104)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4609)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 73)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4672)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 73)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4673)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 105)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4672)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 105)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4673)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 74)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4736)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 74)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4737)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 106)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4736)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 106)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4737)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 75)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4800)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 75)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4801)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 107)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4800)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 107)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4801)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 76)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4864)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 76)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4865)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 108)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4864)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 108)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4865)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 77)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4928)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 77)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4929)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 109)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4928)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 109)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4929)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 78)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4992)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 78)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4993)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 110)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4992)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 110)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 4993)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 79)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 5056)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 79)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 5057)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 111)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 5056)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 111)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 5057)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 128)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6144)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 128)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6145)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 160)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6144)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 160)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6145)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 129)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6208)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 129)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6209)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 161)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6208)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 161)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6209)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 130)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6272)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 130)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6273)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 162)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6272)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 162)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6273)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 131)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6336)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 131)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6337)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 163)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6336)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 163)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6337)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 132)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6400)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 132)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6401)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 164)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6400)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 164)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6401)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 133)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6464)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 133)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6465)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 165)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6464)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 165)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6465)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 134)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6528)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 134)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6529)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 166)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6528)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 166)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6529)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 135)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6592)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 135)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6593)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 167)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6592)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 167)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6593)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 136)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6656)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 136)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6657)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 168)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6656)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 168)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6657)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 137)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6720)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 137)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6721)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 169)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6720)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 169)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6721)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 138)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6784)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 138)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6785)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 170)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6784)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 170)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6785)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 139)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6848)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 139)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6849)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 171)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6848)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 171)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6849)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 140)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6912)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 140)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6913)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 172)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6912)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 172)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6913)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 141)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6976)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 141)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6977)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 173)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6976)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 173)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 6977)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 142)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 7040)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 142)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 7041)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 174)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 7040)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 174)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 7041)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 143)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 7104)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 143)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 7105)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 175)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 7104)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 175)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 7105)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 160)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8192)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 160)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8193)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 192)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8192)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 192)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8193)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 161)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8256)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 161)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8257)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 193)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8256)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 193)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8257)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 162)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8320)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 162)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8321)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 194)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8320)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 194)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8321)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 163)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8384)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 163)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8385)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 195)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8384)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 195)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8385)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 164)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8448)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 164)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8449)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 196)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8448)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 196)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8449)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 165)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8512)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 165)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8513)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 197)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8512)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 197)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8513)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 166)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8576)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 166)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8577)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 198)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8576)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 198)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8577)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 167)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8640)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 167)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8641)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 199)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8640)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 199)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8641)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 168)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8704)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 168)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8705)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 200)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8704)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 200)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8705)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 169)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8768)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 169)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8769)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 201)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8768)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 201)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8769)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 170)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8832)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 170)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8833)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 202)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8832)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 202)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8833)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 171)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8896)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 171)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8897)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 203)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8896)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 203)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8897)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 172)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8960)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 172)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8961)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 204)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8960)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 204)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 8961)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 173)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 9024)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 173)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 9025)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 205)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 9024)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 205)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 9025)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 174)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 9088)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 174)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 9089)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 206)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 9088)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 206)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 9089)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 175)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 9152)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 175)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 9153)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 207)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 9152)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 207)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 9153)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 192)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10240)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 192)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10241)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 224)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10240)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 224)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10241)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 193)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10304)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 193)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10305)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 225)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10304)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 225)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10305)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 194)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10368)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 194)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10369)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 226)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10368)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 226)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10369)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 195)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10432)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 195)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10433)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 227)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10432)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 227)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10433)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 196)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10496)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 196)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10497)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 228)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10496)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 228)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10497)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 197)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10560)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 197)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10561)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 229)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10560)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 229)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10561)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 198)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10624)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 198)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10625)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 230)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10624)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 230)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10625)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 199)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10688)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 199)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10689)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 231)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10688)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 231)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10689)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 200)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10752)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 200)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10753)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 232)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10752)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 232)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10753)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 201)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10816)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 201)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10817)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 233)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10816)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 233)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10817)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 202)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10880)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 202)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10881)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 234)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10880)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 234)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10881)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 203)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10944)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 203)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10945)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 235)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10944)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 235)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 10945)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 204)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11008)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 204)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11009)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 236)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11008)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 236)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11009)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 205)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11072)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 205)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11073)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 237)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11072)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 237)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11073)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 206)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11136)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 206)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11137)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 238)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11136)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 238)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11137)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 207)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11200)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 207)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11201)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 239)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11200)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 239)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 11201)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 256)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12288)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 256)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12289)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 288)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12288)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 288)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12289)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 257)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12352)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 257)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12353)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 289)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12352)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 289)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12353)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 258)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12416)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 258)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12417)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 290)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12416)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 290)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12417)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 259)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12480)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 259)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12481)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 291)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12480)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 291)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12481)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 260)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12544)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 260)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12545)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 292)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12544)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 292)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12545)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 261)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12608)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 261)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12609)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 293)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12608)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 293)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12609)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 262)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12672)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 262)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12673)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 294)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12672)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 294)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12673)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 263)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12736)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 263)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12737)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 295)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12736)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 295)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12737)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 264)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12800)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 264)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12801)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 296)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12800)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 296)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12801)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 265)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12864)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 265)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12865)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 297)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12864)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 297)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12865)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 266)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12928)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 266)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12929)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 298)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12928)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 298)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12929)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 267)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12992)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 267)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12993)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 299)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12992)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 299)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 12993)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 268)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13056)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 268)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13057)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 300)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13056)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 300)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13057)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 269)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13120)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 269)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13121)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 301)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13120)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 301)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13121)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 270)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13184)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 270)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13185)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 302)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13184)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 302)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13185)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 271)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13248)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 271)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13249)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 303)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13248)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 303)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 13249)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 288)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14336)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 288)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14337)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 320)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14336)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 320)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14337)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 289)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14400)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 289)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14401)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 321)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14400)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 321)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14401)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 290)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14464)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 290)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14465)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 322)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14464)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 322)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14465)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 291)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14528)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 291)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14529)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 323)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14528)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 323)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14529)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 292)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14592)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 292)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14593)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 324)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14592)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 324)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14593)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 293)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14656)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 293)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14657)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 325)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14656)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 325)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14657)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 294)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14720)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 294)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14721)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 326)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14720)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 326)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14721)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 295)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14784)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 295)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14785)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 327)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14784)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 327)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14785)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 296)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14848)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 296)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14849)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 328)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14848)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 328)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14849)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 297)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14912)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 297)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14913)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 329)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14912)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 329)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14913)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 298)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14976)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 298)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14977)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 330)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14976)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 330)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 14977)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 299)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15040)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 299)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15041)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 331)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15040)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 331)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15041)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 300)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15104)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 300)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15105)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 332)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15104)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 332)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15105)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 301)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15168)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 301)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15169)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 333)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15168)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 333)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15169)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 302)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15232)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 302)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15233)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 334)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15232)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 334)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15233)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 303)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15296)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 303)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15297)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 335)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15296)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 335)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 15297)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 320)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16384)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 320)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16385)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 352)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16384)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 352)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16385)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 321)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16448)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 321)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16449)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 353)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16448)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 353)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16449)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 322)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16512)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 322)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16513)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 354)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16512)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 354)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16513)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 323)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16576)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 323)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16577)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 355)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16576)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 355)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16577)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 324)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16640)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 324)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16641)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 356)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16640)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 356)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16641)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 325)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16704)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 325)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16705)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 357)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16704)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 357)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16705)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 326)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16768)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 326)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16769)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 358)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16768)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 358)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16769)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 327)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16832)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 327)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16833)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 359)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16832)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 359)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16833)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 328)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16896)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 328)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16897)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 360)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16896)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 360)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16897)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 329)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16960)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 329)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16961)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 361)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16960)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 361)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 16961)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 330)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17024)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 330)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17025)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 362)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17024)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 362)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17025)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 331)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17088)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 331)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17089)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 363)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17088)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 363)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17089)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 332)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17152)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 332)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17153)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 364)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17152)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 364)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17153)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 333)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17216)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 333)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17217)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 365)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17216)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 365)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17217)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 334)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17280)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 334)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17281)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 366)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17280)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 366)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17281)]));
      conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 335)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17344)]));
      conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 335)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17345)]));
      conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 367)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17344)]));
      conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[((((((int)threadIdx.x) >> 5) * 128) + (rc_1 * 16)) + 367)] * weight_shared[(((rc_1 * 1024) + ((((int)threadIdx.x) & 31) * 2)) + 17345)]));
    }
  }
  conv2d_nhwc[((((((((int)blockIdx.x) / 28) * 25088) + ((((int)threadIdx.x) >> 5) * 3584)) + (((((int)blockIdx.x) % 28) >> 2) * 512)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 31) * 2))] = conv2d_nhwc_local[0];
  conv2d_nhwc[(((((((((int)blockIdx.x) / 28) * 25088) + ((((int)threadIdx.x) >> 5) * 3584)) + (((((int)blockIdx.x) % 28) >> 2) * 512)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 31) * 2)) + 1)] = conv2d_nhwc_local[1];
  conv2d_nhwc[(((((((((int)blockIdx.x) / 28) * 25088) + ((((int)threadIdx.x) >> 5) * 3584)) + (((((int)blockIdx.x) % 28) >> 2) * 512)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 31) * 2)) + 256)] = conv2d_nhwc_local[2];
  conv2d_nhwc[(((((((((int)blockIdx.x) / 28) * 25088) + ((((int)threadIdx.x) >> 5) * 3584)) + (((((int)blockIdx.x) % 28) >> 2) * 512)) + ((((int)blockIdx.x) & 3) * 64)) + ((((int)threadIdx.x) & 31) * 2)) + 257)] = conv2d_nhwc_local[3];
}


The time of GRP is 0.018 ms
2025-07-23 08:44:44 [INFO] Logging directory: /tmp/tmpoy6iy076/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:48:35 [DEBUG] XGB iter   0: tr-p-rmse: 0.637506	tr-a-peak@32: 1.000000	tr-rmse: 0.287995	tr-rmse: 0.287995
2025-07-23 08:48:36 [DEBUG] XGB iter  25: tr-p-rmse: 0.052900	tr-a-peak@32: 1.000000	tr-rmse: 0.344213	tr-rmse: 0.344213
2025-07-23 08:48:36 [DEBUG] XGB iter  50: tr-p-rmse: 0.052900	tr-a-peak@32: 1.000000	tr-rmse: 0.344213	tr-rmse: 0.344213
2025-07-23 08:48:36 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05290	tr-a-peak@32:1.00000	tr-rmse:0.34421	tr-rmse:0.34421 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:52:05 [DEBUG] XGB validation: p-rmse: 0.206187	a-peak@32: 0.940840
2025-07-23 08:52:05 [DEBUG] XGB iter   0: tr-p-rmse: 0.634679	tr-a-peak@32: 0.454532	tr-rmse: 0.280837	tr-rmse: 0.280837
2025-07-23 08:52:05 [DEBUG] XGB iter  25: tr-p-rmse: 0.056497	tr-a-peak@32: 1.000000	tr-rmse: 0.333016	tr-rmse: 0.333016
2025-07-23 08:52:08 [DEBUG] XGB iter  50: tr-p-rmse: 0.056497	tr-a-peak@32: 1.000000	tr-rmse: 0.333016	tr-rmse: 0.333016
2025-07-23 08:52:08 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.05650	tr-a-peak@32:1.00000	tr-rmse:0.33302	tr-rmse:0.33302 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 08:56:55 [DEBUG] XGB validation: p-rmse: 0.366684	a-peak@32: 0.995663
2025-07-23 08:56:55 [DEBUG] XGB iter   0: tr-p-rmse: 0.588777	tr-a-peak@32: 0.941000	tr-rmse: 0.272731	tr-rmse: 0.272731
2025-07-23 08:56:55 [DEBUG] XGB iter  25: tr-p-rmse: 0.050092	tr-a-peak@32: 0.999965	tr-rmse: 0.351734	tr-rmse: 0.351734
2025-07-23 08:56:55 [DEBUG] XGB iter  50: tr-p-rmse: 0.050092	tr-a-peak@32: 0.999965	tr-rmse: 0.351734	tr-rmse: 0.351734
2025-07-23 08:56:55 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.05009	tr-a-peak@32:0.99996	tr-rmse:0.35173	tr-rmse:0.35173 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:01:29 [DEBUG] XGB validation: p-rmse: 0.130861	a-peak@32: 0.969311
2025-07-23 09:01:29 [DEBUG] XGB iter   0: tr-p-rmse: 0.537644	tr-a-peak@32: 0.934960	tr-rmse: 0.345037	tr-rmse: 0.345037
2025-07-23 09:01:29 [DEBUG] XGB iter  25: tr-p-rmse: 0.051275	tr-a-peak@32: 0.973700	tr-rmse: 0.429754	tr-rmse: 0.429754
2025-07-23 09:01:29 [DEBUG] XGB iter  50: tr-p-rmse: 0.051275	tr-a-peak@32: 0.973700	tr-rmse: 0.429754	tr-rmse: 0.429754
2025-07-23 09:01:29 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.05128	tr-a-peak@32:0.97370	tr-rmse:0.42975	tr-rmse:0.42975 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:06:00 [DEBUG] XGB validation: p-rmse: 0.128347	a-peak@32: 0.903323
2025-07-23 09:06:00 [DEBUG] XGB iter   0: tr-p-rmse: 0.509103	tr-a-peak@32: 0.859325	tr-rmse: 0.347310	tr-rmse: 0.347310
2025-07-23 09:06:00 [DEBUG] XGB iter  25: tr-p-rmse: 0.049522	tr-a-peak@32: 1.000000	tr-rmse: 0.437941	tr-rmse: 0.437941
2025-07-23 09:06:00 [DEBUG] XGB iter  50: tr-p-rmse: 0.049522	tr-a-peak@32: 1.000000	tr-rmse: 0.437941	tr-rmse: 0.437941
2025-07-23 09:06:00 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.04952	tr-a-peak@32:1.00000	tr-rmse:0.43794	tr-rmse:0.43794 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:10:33 [DEBUG] XGB validation: p-rmse: 0.059650	a-peak@32: 0.868221
2025-07-23 09:10:33 [DEBUG] XGB iter   0: tr-p-rmse: 0.482375	tr-a-peak@32: 0.883801	tr-rmse: 0.368289	tr-rmse: 0.368289
2025-07-23 09:10:33 [DEBUG] XGB iter  25: tr-p-rmse: 0.047734	tr-a-peak@32: 0.918968	tr-rmse: 0.459521	tr-rmse: 0.459521
2025-07-23 09:10:33 [DEBUG] XGB iter  50: tr-p-rmse: 0.047734	tr-a-peak@32: 0.918968	tr-rmse: 0.459521	tr-rmse: 0.459521
2025-07-23 09:10:33 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.04773	tr-a-peak@32:0.91897	tr-rmse:0.45952	tr-rmse:0.45952 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:15:07 [DEBUG] XGB validation: p-rmse: 0.115662	a-peak@32: 0.918572
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:19:36 [DEBUG] XGB validation: p-rmse: 0.099541	a-peak@32: 0.977905
2025-07-23 09:19:36 [DEBUG] XGB iter   0: tr-p-rmse: 0.449109	tr-a-peak@32: 0.941444	tr-rmse: 0.389412	tr-rmse: 0.389412
2025-07-23 09:19:36 [DEBUG] XGB iter  25: tr-p-rmse: 0.049752	tr-a-peak@32: 0.891922	tr-rmse: 0.480826	tr-rmse: 0.480826
2025-07-23 09:19:36 [DEBUG] XGB iter  50: tr-p-rmse: 0.049752	tr-a-peak@32: 0.891922	tr-rmse: 0.480826	tr-rmse: 0.480826
2025-07-23 09:19:36 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.04975	tr-a-peak@32:0.89192	tr-rmse:0.48083	tr-rmse:0.48083 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:23:51 [DEBUG] XGB validation: p-rmse: 0.230808	a-peak@32: 0.981607
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:26:01 [DEBUG] XGB validation: p-rmse: 0.084254	a-peak@32: 0.953022
2025-07-23 09:26:01 [DEBUG] XGB iter   0: tr-p-rmse: 0.450367	tr-a-peak@32: 0.971345	tr-rmse: 0.361982	tr-rmse: 0.361982
2025-07-23 09:26:01 [DEBUG] XGB iter  25: tr-p-rmse: 0.059696	tr-a-peak@32: 0.984921	tr-rmse: 0.457353	tr-rmse: 0.457353
2025-07-23 09:26:01 [DEBUG] XGB iter  50: tr-p-rmse: 0.059696	tr-a-peak@32: 0.984921	tr-rmse: 0.457353	tr-rmse: 0.457353
2025-07-23 09:26:01 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.05970	tr-a-peak@32:0.98492	tr-rmse:0.45735	tr-rmse:0.45735 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:28:20 [DEBUG] XGB validation: p-rmse: 0.177270	a-peak@32: 0.956479
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:32:19 [DEBUG] XGB validation: p-rmse: 0.203760	a-peak@32: 0.918024
2025-07-23 09:32:19 [DEBUG] XGB iter   0: tr-p-rmse: 0.443690	tr-a-peak@32: 0.936018	tr-rmse: 0.354624	tr-rmse: 0.354624
2025-07-23 09:32:19 [DEBUG] XGB iter  25: tr-p-rmse: 0.060343	tr-a-peak@32: 0.971953	tr-rmse: 0.452238	tr-rmse: 0.452238
2025-07-23 09:32:19 [DEBUG] XGB iter  50: tr-p-rmse: 0.060343	tr-a-peak@32: 0.971953	tr-rmse: 0.452238	tr-rmse: 0.452238
2025-07-23 09:32:19 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.06034	tr-a-peak@32:0.97195	tr-rmse:0.45224	tr-rmse:0.45224 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:36:50 [DEBUG] XGB validation: p-rmse: 0.121661	a-peak@32: 0.853724
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:41:29 [DEBUG] XGB validation: p-rmse: 0.082243	a-peak@32: 0.931647
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:46:04 [DEBUG] XGB validation: p-rmse: 0.086618	a-peak@32: 0.957080
2025-07-23 09:46:04 [DEBUG] XGB iter   0: tr-p-rmse: 0.431197	tr-a-peak@32: 0.887662	tr-rmse: 0.342948	tr-rmse: 0.342948
2025-07-23 09:46:04 [DEBUG] XGB iter  25: tr-p-rmse: 0.060109	tr-a-peak@32: 0.993086	tr-rmse: 0.444247	tr-rmse: 0.444247
2025-07-23 09:46:08 [DEBUG] XGB iter  50: tr-p-rmse: 0.060109	tr-a-peak@32: 0.993086	tr-rmse: 0.444247	tr-rmse: 0.444247
2025-07-23 09:46:08 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.06011	tr-a-peak@32:0.99309	tr-rmse:0.44425	tr-rmse:0.44425 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:50:50 [DEBUG] XGB validation: p-rmse: 0.074989	a-peak@32: 0.971508
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[1];
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  uint4 condval;
  if (((1 <= ((((int)blockIdx.y) * 4) + ((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3))) && (1 <= (((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12)))) {
    condval = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 3840));
  } else {
    condval = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + ((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 4096));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 8192));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 12288));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 16384));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 20480));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 24576));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 28672));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_1;
  if (((1 <= ((((int)blockIdx.y) * 4) + ((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3))) && (1 <= (((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12)))) {
    condval_1 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 3712));
  } else {
    condval_1 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_1;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 32768));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 36864));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 40960));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 45056));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 49152));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 53248));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 57344));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 61440));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_2;
  if ((1 <= ((((int)blockIdx.y) * 4) + ((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3)))) {
    condval_2 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 3328));
  } else {
    condval_2 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_2;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 65536));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 69632));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 73728));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 77824));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 81920));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 86016));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 90112));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 94208));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_3;
  if ((1 <= ((((int)blockIdx.y) * 4) + ((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3)))) {
    condval_3 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 3200));
  } else {
    condval_3 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_3;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 98304));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 102400));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 106496));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 110592));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 114688));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 118784));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 122880));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 126976));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_4;
  if (((1 <= ((((int)blockIdx.y) * 4) + ((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3))) && ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) < 11))) {
    condval_4 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 2816));
  } else {
    condval_4 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_4;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 131072));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 135168));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 139264));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 143360));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 147456));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 151552));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 155648));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 159744));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_5;
  if (((1 <= ((((int)blockIdx.y) * 4) + ((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3))) && ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) < 11))) {
    condval_5 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) - 2688));
  } else {
    condval_5 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_5;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 163840));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 167936));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 172032));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 176128));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 180224));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 184320));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 188416));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 192512));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_6;
  if ((1 <= (((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12))) {
    condval_6 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 3328));
  } else {
    condval_6 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_6;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 196608));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 200704));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 204800));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 208896));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 212992));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 217088));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 221184));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 225280));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_7;
  if ((1 <= (((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12))) {
    condval_7 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 3456));
  } else {
    condval_7 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_7;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 229376));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 233472));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 237568));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 241664));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 245760));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 249856));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 253952));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 258048));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 3840));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 262144));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 266240));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 270336));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 274432));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 278528));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 282624));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 286720));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 290816));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 3968));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 294912));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 299008));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 303104));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 307200));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 311296));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 315392));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 319488));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 323584));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_8;
  if (((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) < 11)) {
    condval_8 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 4352));
  } else {
    condval_8 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_8;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 327680));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 331776));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 335872));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 339968));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 344064));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 348160));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 352256));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 356352));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_9;
  if (((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) < 11)) {
    condval_9 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 4480));
  } else {
    condval_9 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_9;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 360448));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 364544));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 368640));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 372736));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 376832));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 380928));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 385024));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 389120));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_10;
  if (((((((int)blockIdx.y) * 4) + ((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3)) < 11) && (1 <= (((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12)))) {
    condval_10 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 10496));
  } else {
    condval_10 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_10;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 393216));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 397312));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 401408));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 405504));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 409600));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 413696));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 417792));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 421888));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_11;
  if (((((((int)blockIdx.y) * 4) + ((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3)) < 11) && (1 <= (((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12)))) {
    condval_11 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 10624));
  } else {
    condval_11 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_11;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 425984));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 430080));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 434176));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 438272));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 442368));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 446464));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 450560));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 454656));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_12;
  if ((((((int)blockIdx.y) * 4) + ((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3)) < 11)) {
    condval_12 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 11008));
  } else {
    condval_12 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_12;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 458752));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 462848));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 466944));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 471040));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 475136));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 479232));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 483328));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 487424));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_13;
  if ((((((int)blockIdx.y) * 4) + ((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3)) < 11)) {
    condval_13 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 11136));
  } else {
    condval_13 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_13;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 491520));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 495616));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 499712));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 503808));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 507904));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 512000));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 516096));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 520192));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_14;
  if (((((((int)blockIdx.y) * 4) + ((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3)) < 11) && ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) < 11))) {
    condval_14 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 11520));
  } else {
    condval_14 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_14;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 524288));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 528384));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 532480));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 536576));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 540672));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 544768));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 548864));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 552960));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  uint4 condval_15;
  if (((((((int)blockIdx.y) * 4) + ((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3)) < 11) && ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) < 11))) {
    condval_15 = *(uint4*)(inputs + (((((((int)blockIdx.y) * 14336) + (((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.y) >> 1)) / 3) * 3584)) + ((((((((int)blockIdx.x) >> 1) * 16) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) % 12) * 256)) + ((((int)threadIdx.x) & 15) * 8)) + 11648));
  } else {
    condval_15 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
  }
  *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = condval_15;
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 557056));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 561152));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 6528)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 565248));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 8704)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 569344));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 10880)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 573440));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 13056)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 577536));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 15232)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 581632));
  *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 17408)) = *(uint4*)(weight + (((((((int)threadIdx.y) * 512) + ((((int)threadIdx.x) >> 4) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 585728));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 2176)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[16])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 4352)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[32])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 6528)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[48])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 8704)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[64])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 10880)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[80])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 13056)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[96])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 15232)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[112])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 16) + 17408)])), 136);
  nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0]);
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 256)])), conv2d_nhwc_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half2*)(conv2d_nhwc + (((((((((int)blockIdx.y) * 12288) + ((((int)blockIdx.x) >> 1) * 4096)) + ((((int)threadIdx.y) & 3) * 1024)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2))) = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)));
  *(half2*)(conv2d_nhwc + ((((((((((int)blockIdx.y) * 12288) + ((((int)blockIdx.x) >> 1) * 4096)) + ((((int)threadIdx.y) & 3) * 1024)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 32)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 512));
  *(half2*)(conv2d_nhwc + ((((((((((int)blockIdx.y) * 12288) + ((((int)blockIdx.x) >> 1) * 4096)) + ((((int)threadIdx.y) & 3) * 1024)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 64)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1024));
  *(half2*)(conv2d_nhwc + ((((((((((int)blockIdx.y) * 12288) + ((((int)blockIdx.x) >> 1) * 4096)) + ((((int)threadIdx.y) & 3) * 1024)) + ((((int)threadIdx.x) >> 3) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 96)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1536));
}


The time of DIL is 0.042 ms
2025-07-23 09:50:52 [INFO] Logging directory: /tmp/tmp4tmzx2wm/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:52:35 [DEBUG] XGB iter   0: tr-p-rmse: 0.480029	tr-a-peak@32: 0.921648	tr-rmse: 0.397154	tr-rmse: 0.397154
2025-07-23 09:52:35 [DEBUG] XGB iter  25: tr-p-rmse: 0.038044	tr-a-peak@32: 1.000000	tr-rmse: 0.438366	tr-rmse: 0.438366
2025-07-23 09:52:35 [DEBUG] XGB iter  50: tr-p-rmse: 0.038044	tr-a-peak@32: 1.000000	tr-rmse: 0.438366	tr-rmse: 0.438366
2025-07-23 09:52:35 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.03804	tr-a-peak@32:1.00000	tr-rmse:0.43837	tr-rmse:0.43837 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:54:16 [DEBUG] XGB validation: p-rmse: 0.232760	a-peak@32: 0.966110
2025-07-23 09:54:16 [DEBUG] XGB iter   0: tr-p-rmse: 0.487831	tr-a-peak@32: 0.794591	tr-rmse: 0.395796	tr-rmse: 0.395796
2025-07-23 09:54:17 [DEBUG] XGB iter  25: tr-p-rmse: 0.044399	tr-a-peak@32: 1.000000	tr-rmse: 0.434630	tr-rmse: 0.434630
2025-07-23 09:54:17 [DEBUG] XGB iter  50: tr-p-rmse: 0.044399	tr-a-peak@32: 1.000000	tr-rmse: 0.434630	tr-rmse: 0.434630
2025-07-23 09:54:17 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.04440	tr-a-peak@32:1.00000	tr-rmse:0.43463	tr-rmse:0.43463 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:56:18 [DEBUG] XGB validation: p-rmse: 0.432897	a-peak@32: 0.863596
2025-07-23 09:56:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.441074	tr-a-peak@32: 0.614118	tr-rmse: 0.376001	tr-rmse: 0.376001
2025-07-23 09:56:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.059729	tr-a-peak@32: 0.992708	tr-rmse: 0.427457	tr-rmse: 0.427457
2025-07-23 09:56:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.059729	tr-a-peak@32: 0.992708	tr-rmse: 0.427457	tr-rmse: 0.427457
2025-07-23 09:56:18 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.05973	tr-a-peak@32:0.99271	tr-rmse:0.42746	tr-rmse:0.42746 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 09:58:19 [DEBUG] XGB validation: p-rmse: 0.378209	a-peak@32: 0.843444
2025-07-23 09:58:19 [DEBUG] XGB iter   0: tr-p-rmse: 0.418007	tr-a-peak@32: 0.921866	tr-rmse: 0.361345	tr-rmse: 0.361345
2025-07-23 09:58:19 [DEBUG] XGB iter  25: tr-p-rmse: 0.061387	tr-a-peak@32: 0.998542	tr-rmse: 0.417031	tr-rmse: 0.417031
2025-07-23 09:58:19 [DEBUG] XGB iter  50: tr-p-rmse: 0.061387	tr-a-peak@32: 0.998542	tr-rmse: 0.417031	tr-rmse: 0.417031
2025-07-23 09:58:19 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.06139	tr-a-peak@32:0.99854	tr-rmse:0.41703	tr-rmse:0.41703 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:00:24 [DEBUG] XGB validation: p-rmse: 0.210128	a-peak@32: 0.922357
2025-07-23 10:00:24 [DEBUG] XGB iter   0: tr-p-rmse: 0.410316	tr-a-peak@32: 0.763649	tr-rmse: 0.375908	tr-rmse: 0.375908
2025-07-23 10:00:24 [DEBUG] XGB iter  25: tr-p-rmse: 0.060606	tr-a-peak@32: 1.000000	tr-rmse: 0.430322	tr-rmse: 0.430322
2025-07-23 10:00:24 [DEBUG] XGB iter  50: tr-p-rmse: 0.060606	tr-a-peak@32: 1.000000	tr-rmse: 0.430322	tr-rmse: 0.430322
2025-07-23 10:00:24 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.06061	tr-a-peak@32:1.00000	tr-rmse:0.43032	tr-rmse:0.43032 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:02:18 [DEBUG] XGB validation: p-rmse: 0.331854	a-peak@32: 0.984339
2025-07-23 10:02:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.406355	tr-a-peak@32: 0.859254	tr-rmse: 0.388746	tr-rmse: 0.388746
2025-07-23 10:02:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.067311	tr-a-peak@32: 1.000000	tr-rmse: 0.444368	tr-rmse: 0.444368
2025-07-23 10:02:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.067311	tr-a-peak@32: 1.000000	tr-rmse: 0.444368	tr-rmse: 0.444368
2025-07-23 10:02:18 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.06731	tr-a-peak@32:1.00000	tr-rmse:0.44437	tr-rmse:0.44437 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:04:11 [DEBUG] XGB validation: p-rmse: 0.380617	a-peak@32: 0.900639
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:06:03 [DEBUG] XGB validation: p-rmse: 0.268509	a-peak@32: 0.989675
2025-07-23 10:06:03 [DEBUG] XGB iter   0: tr-p-rmse: 0.395240	tr-a-peak@32: 0.890177	tr-rmse: 0.380910	tr-rmse: 0.380910
2025-07-23 10:06:03 [DEBUG] XGB iter  25: tr-p-rmse: 0.095804	tr-a-peak@32: 0.965911	tr-rmse: 0.439681	tr-rmse: 0.439681
2025-07-23 10:06:03 [DEBUG] XGB iter  50: tr-p-rmse: 0.095804	tr-a-peak@32: 0.965911	tr-rmse: 0.439681	tr-rmse: 0.439681
2025-07-23 10:06:03 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.09580	tr-a-peak@32:0.96591	tr-rmse:0.43968	tr-rmse:0.43968 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:07:57 [DEBUG] XGB validation: p-rmse: 0.191281	a-peak@32: 0.986926
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:09:51 [DEBUG] XGB validation: p-rmse: 0.272987	a-peak@32: 0.946884
2025-07-23 10:09:51 [DEBUG] XGB iter   0: tr-p-rmse: 0.387129	tr-a-peak@32: 0.671560	tr-rmse: 0.351226	tr-rmse: 0.351226
2025-07-23 10:09:52 [DEBUG] XGB iter  25: tr-p-rmse: 0.093962	tr-a-peak@32: 0.902377	tr-rmse: 0.412978	tr-rmse: 0.412978
2025-07-23 10:09:52 [DEBUG] XGB iter  50: tr-p-rmse: 0.093962	tr-a-peak@32: 0.902377	tr-rmse: 0.412978	tr-rmse: 0.412978
2025-07-23 10:09:52 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.09396	tr-a-peak@32:0.90238	tr-rmse:0.41298	tr-rmse:0.41298 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:11:47 [DEBUG] XGB validation: p-rmse: 0.222464	a-peak@32: 0.741284
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:13:41 [DEBUG] XGB validation: p-rmse: 0.159369	a-peak@32: 0.989982
2025-07-23 10:13:41 [DEBUG] XGB iter   0: tr-p-rmse: 0.385078	tr-a-peak@32: 0.498834	tr-rmse: 0.347245	tr-rmse: 0.347245
2025-07-23 10:13:41 [DEBUG] XGB iter  25: tr-p-rmse: 0.095763	tr-a-peak@32: 0.919642	tr-rmse: 0.409442	tr-rmse: 0.409442
2025-07-23 10:13:41 [DEBUG] XGB iter  50: tr-p-rmse: 0.095763	tr-a-peak@32: 0.919642	tr-rmse: 0.409442	tr-rmse: 0.409442
2025-07-23 10:13:41 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.09576	tr-a-peak@32:0.91964	tr-rmse:0.40944	tr-rmse:0.40944 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:15:38 [DEBUG] XGB validation: p-rmse: 0.174240	a-peak@32: 0.990835
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:17:30 [DEBUG] XGB validation: p-rmse: 0.185839	a-peak@32: 0.745682
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:19:25 [DEBUG] XGB validation: p-rmse: 0.155915	a-peak@32: 0.995660
2025-07-23 10:19:25 [DEBUG] XGB iter   0: tr-p-rmse: 0.384111	tr-a-peak@32: 0.746987	tr-rmse: 0.354341	tr-rmse: 0.354341
2025-07-23 10:19:25 [DEBUG] XGB iter  25: tr-p-rmse: 0.096071	tr-a-peak@32: 0.944091	tr-rmse: 0.416005	tr-rmse: 0.416005
2025-07-23 10:19:25 [DEBUG] XGB iter  50: tr-p-rmse: 0.096071	tr-a-peak@32: 0.944091	tr-rmse: 0.416005	tr-rmse: 0.416005
2025-07-23 10:19:25 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.09607	tr-a-peak@32:0.94409	tr-rmse:0.41600	tr-rmse:0.41600 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:21:18 [DEBUG] XGB validation: p-rmse: 0.182401	a-peak@32: 0.688830
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:22:39 [DEBUG] XGB validation: p-rmse: 0.203888	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ depth_conv2d_nhwc, half* __restrict__ placeholder, half* __restrict__ placeholder_1);
extern "C" __global__ void __launch_bounds__(256) main_kernel(half* __restrict__ depth_conv2d_nhwc, half* __restrict__ placeholder, half* __restrict__ placeholder_1) {
  half depth_conv2d_nhwc_local[2];
  __shared__ half PadInput_shared[4608];
  __shared__ half placeholder_shared[4608];
  depth_conv2d_nhwc_local[0] = __float2half_rn(0.000000e+00f);
  depth_conv2d_nhwc_local[1] = __float2half_rn(0.000000e+00f);
  half condval;
  if (((7 <= ((int)blockIdx.x)) && (1 <= (((int)blockIdx.x) % 7)))) {
    condval = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) - 7680)];
  } else {
    condval = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) * 2)] = condval;
  half condval_1;
  if (((7 <= ((int)blockIdx.x)) && (1 <= (((int)blockIdx.x) % 7)))) {
    condval_1 = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) - 7679)];
  } else {
    condval_1 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 1)] = condval_1;
  half condval_2;
  if ((7 <= ((int)blockIdx.x))) {
    condval_2 = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) - 7168)];
  } else {
    condval_2 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 512)] = condval_2;
  half condval_3;
  if ((7 <= ((int)blockIdx.x))) {
    condval_3 = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) - 7167)];
  } else {
    condval_3 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 513)] = condval_3;
  half condval_4;
  if ((7 <= ((int)blockIdx.x))) {
    condval_4 = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) - 6656)];
  } else {
    condval_4 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 1024)] = condval_4;
  half condval_5;
  if ((7 <= ((int)blockIdx.x))) {
    condval_5 = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) - 6655)];
  } else {
    condval_5 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 1025)] = condval_5;
  half condval_6;
  if ((1 <= (((int)blockIdx.x) % 7))) {
    condval_6 = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) - 512)];
  } else {
    condval_6 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 1536)] = condval_6;
  half condval_7;
  if ((1 <= (((int)blockIdx.x) % 7))) {
    condval_7 = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) - 511)];
  } else {
    condval_7 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 1537)] = condval_7;
  PadInput_shared[((((int)threadIdx.x) * 2) + 2048)] = placeholder[((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2))];
  PadInput_shared[((((int)threadIdx.x) * 2) + 2049)] = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) + 1)];
  PadInput_shared[((((int)threadIdx.x) * 2) + 2560)] = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) + 512)];
  PadInput_shared[((((int)threadIdx.x) * 2) + 2561)] = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) + 513)];
  half condval_8;
  if ((1 <= (((int)blockIdx.x) % 7))) {
    condval_8 = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) + 6656)];
  } else {
    condval_8 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 3072)] = condval_8;
  half condval_9;
  if ((1 <= (((int)blockIdx.x) % 7))) {
    condval_9 = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) + 6657)];
  } else {
    condval_9 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 3073)] = condval_9;
  PadInput_shared[((((int)threadIdx.x) * 2) + 3584)] = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) + 7168)];
  PadInput_shared[((((int)threadIdx.x) * 2) + 3585)] = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) + 7169)];
  PadInput_shared[((((int)threadIdx.x) * 2) + 4096)] = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) + 7680)];
  PadInput_shared[((((int)threadIdx.x) * 2) + 4097)] = placeholder[(((((((int)blockIdx.x) / 7) * 14336) + ((((int)blockIdx.x) % 7) * 1024)) + (((int)threadIdx.x) * 2)) + 7681)];
  placeholder_shared[((int)threadIdx.x)] = placeholder_1[((int)threadIdx.x)];
  placeholder_shared[(((int)threadIdx.x) + 256)] = placeholder_1[(((int)threadIdx.x) + 256)];
  placeholder_shared[(((int)threadIdx.x) + 512)] = placeholder_1[(((int)threadIdx.x) + 512)];
  placeholder_shared[(((int)threadIdx.x) + 768)] = placeholder_1[(((int)threadIdx.x) + 768)];
  placeholder_shared[(((int)threadIdx.x) + 1024)] = placeholder_1[(((int)threadIdx.x) + 1024)];
  placeholder_shared[(((int)threadIdx.x) + 1280)] = placeholder_1[(((int)threadIdx.x) + 1280)];
  placeholder_shared[(((int)threadIdx.x) + 1536)] = placeholder_1[(((int)threadIdx.x) + 1536)];
  placeholder_shared[(((int)threadIdx.x) + 1792)] = placeholder_1[(((int)threadIdx.x) + 1792)];
  placeholder_shared[(((int)threadIdx.x) + 2048)] = placeholder_1[(((int)threadIdx.x) + 2048)];
  placeholder_shared[(((int)threadIdx.x) + 2304)] = placeholder_1[(((int)threadIdx.x) + 2304)];
  placeholder_shared[(((int)threadIdx.x) + 2560)] = placeholder_1[(((int)threadIdx.x) + 2560)];
  placeholder_shared[(((int)threadIdx.x) + 2816)] = placeholder_1[(((int)threadIdx.x) + 2816)];
  placeholder_shared[(((int)threadIdx.x) + 3072)] = placeholder_1[(((int)threadIdx.x) + 3072)];
  placeholder_shared[(((int)threadIdx.x) + 3328)] = placeholder_1[(((int)threadIdx.x) + 3328)];
  placeholder_shared[(((int)threadIdx.x) + 3584)] = placeholder_1[(((int)threadIdx.x) + 3584)];
  placeholder_shared[(((int)threadIdx.x) + 3840)] = placeholder_1[(((int)threadIdx.x) + 3840)];
  placeholder_shared[(((int)threadIdx.x) + 4096)] = placeholder_1[(((int)threadIdx.x) + 4096)];
  placeholder_shared[(((int)threadIdx.x) + 4352)] = placeholder_1[(((int)threadIdx.x) + 4352)];
  __syncthreads();
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[((int)threadIdx.x)] * placeholder_shared[((int)threadIdx.x)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 256)] * placeholder_shared[(((int)threadIdx.x) + 256)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 512)] * placeholder_shared[(((int)threadIdx.x) + 512)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 768)] * placeholder_shared[(((int)threadIdx.x) + 768)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 1024)] * placeholder_shared[(((int)threadIdx.x) + 1024)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 1280)] * placeholder_shared[(((int)threadIdx.x) + 1280)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 1536)] * placeholder_shared[(((int)threadIdx.x) + 1536)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 1792)] * placeholder_shared[(((int)threadIdx.x) + 1792)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 2048)] * placeholder_shared[(((int)threadIdx.x) + 2048)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 2304)] * placeholder_shared[(((int)threadIdx.x) + 2304)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 2560)] * placeholder_shared[(((int)threadIdx.x) + 2560)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 2816)] * placeholder_shared[(((int)threadIdx.x) + 2816)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 3072)] * placeholder_shared[(((int)threadIdx.x) + 3072)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 3328)] * placeholder_shared[(((int)threadIdx.x) + 3328)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 3584)] * placeholder_shared[(((int)threadIdx.x) + 3584)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 3840)] * placeholder_shared[(((int)threadIdx.x) + 3840)]));
  depth_conv2d_nhwc_local[0] = (depth_conv2d_nhwc_local[0] + (PadInput_shared[(((int)threadIdx.x) + 4096)] * placeholder_shared[(((int)threadIdx.x) + 4096)]));
  depth_conv2d_nhwc_local[1] = (depth_conv2d_nhwc_local[1] + (PadInput_shared[(((int)threadIdx.x) + 4352)] * placeholder_shared[(((int)threadIdx.x) + 4352)]));
  depth_conv2d_nhwc[((((int)blockIdx.x) * 512) + ((int)threadIdx.x))] = depth_conv2d_nhwc_local[0];
  depth_conv2d_nhwc[(((((int)blockIdx.x) * 512) + ((int)threadIdx.x)) + 256)] = depth_conv2d_nhwc_local[1];
}


The time of DEP is 0.008 ms
2025-07-23 10:22:40 [INFO] Logging directory: /tmp/tmp4kwwd035/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:25:19 [DEBUG] XGB iter   0: tr-p-rmse: 0.758209	tr-a-peak@32: 0.824315	tr-rmse: 0.463026	tr-rmse: 0.463026
2025-07-23 10:25:19 [DEBUG] XGB iter  25: tr-p-rmse: 0.154232	tr-a-peak@32: 1.000000	tr-rmse: 0.482897	tr-rmse: 0.482897
2025-07-23 10:25:21 [DEBUG] XGB iter  50: tr-p-rmse: 0.154232	tr-a-peak@32: 1.000000	tr-rmse: 0.482897	tr-rmse: 0.482897
2025-07-23 10:25:21 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.15423	tr-a-peak@32:1.00000	tr-rmse:0.48290	tr-rmse:0.48290 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:27:44 [DEBUG] XGB validation: p-rmse: 0.288821	a-peak@32: 0.906250
2025-07-23 10:27:44 [DEBUG] XGB iter   0: tr-p-rmse: 0.737653	tr-a-peak@32: 0.774154	tr-rmse: 0.435377	tr-rmse: 0.435377
2025-07-23 10:27:44 [DEBUG] XGB iter  25: tr-p-rmse: 0.223164	tr-a-peak@32: 1.000000	tr-rmse: 0.454157	tr-rmse: 0.454157
2025-07-23 10:27:44 [DEBUG] XGB iter  50: tr-p-rmse: 0.223164	tr-a-peak@32: 1.000000	tr-rmse: 0.454157	tr-rmse: 0.454157
2025-07-23 10:27:44 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.22316	tr-a-peak@32:1.00000	tr-rmse:0.45416	tr-rmse:0.45416 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:31:02 [DEBUG] XGB validation: p-rmse: 0.424635	a-peak@32: 0.806845
2025-07-23 10:31:02 [DEBUG] XGB iter   0: tr-p-rmse: 0.669436	tr-a-peak@32: 0.358843	tr-rmse: 0.396705	tr-rmse: 0.396705
2025-07-23 10:31:03 [DEBUG] XGB iter  25: tr-p-rmse: 0.140758	tr-a-peak@32: 1.000000	tr-rmse: 0.437534	tr-rmse: 0.437534
2025-07-23 10:31:03 [DEBUG] XGB iter  50: tr-p-rmse: 0.140758	tr-a-peak@32: 1.000000	tr-rmse: 0.437534	tr-rmse: 0.437534
2025-07-23 10:31:03 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.14076	tr-a-peak@32:1.00000	tr-rmse:0.43753	tr-rmse:0.43753 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:34:12 [DEBUG] XGB validation: p-rmse: 0.304910	a-peak@32: 0.772736
2025-07-23 10:34:12 [DEBUG] XGB iter   0: tr-p-rmse: 0.631576	tr-a-peak@32: 0.836502	tr-rmse: 0.474438	tr-rmse: 0.474438
2025-07-23 10:34:12 [DEBUG] XGB iter  25: tr-p-rmse: 0.167803	tr-a-peak@32: 0.999264	tr-rmse: 0.522050	tr-rmse: 0.522050
2025-07-23 10:34:12 [DEBUG] XGB iter  50: tr-p-rmse: 0.167803	tr-a-peak@32: 0.999264	tr-rmse: 0.522050	tr-rmse: 0.522050
2025-07-23 10:34:12 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.16780	tr-a-peak@32:0.99926	tr-rmse:0.52205	tr-rmse:0.52205 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:37:09 [DEBUG] XGB validation: p-rmse: 0.178772	a-peak@32: 0.931305
2025-07-23 10:37:09 [DEBUG] XGB iter   0: tr-p-rmse: 0.571227	tr-a-peak@32: 0.882851	tr-rmse: 0.478581	tr-rmse: 0.478581
2025-07-23 10:37:09 [DEBUG] XGB iter  25: tr-p-rmse: 0.143307	tr-a-peak@32: 1.000000	tr-rmse: 0.529870	tr-rmse: 0.529870
2025-07-23 10:37:09 [DEBUG] XGB iter  50: tr-p-rmse: 0.143307	tr-a-peak@32: 1.000000	tr-rmse: 0.529870	tr-rmse: 0.529870
2025-07-23 10:37:09 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.14331	tr-a-peak@32:1.00000	tr-rmse:0.52987	tr-rmse:0.52987 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:39:58 [DEBUG] XGB validation: p-rmse: 0.231923	a-peak@32: 0.591154
2025-07-23 10:39:58 [DEBUG] XGB iter   0: tr-p-rmse: 0.517443	tr-a-peak@32: 0.390395	tr-rmse: 0.268862	tr-rmse: 0.268862
2025-07-23 10:39:58 [DEBUG] XGB iter  25: tr-p-rmse: 0.083420	tr-a-peak@32: 1.000000	tr-rmse: 0.327275	tr-rmse: 0.327275
2025-07-23 10:39:58 [DEBUG] XGB iter  50: tr-p-rmse: 0.083420	tr-a-peak@32: 1.000000	tr-rmse: 0.327275	tr-rmse: 0.327275
2025-07-23 10:39:58 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.08342	tr-a-peak@32:1.00000	tr-rmse:0.32728	tr-rmse:0.32728 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:43:12 [DEBUG] XGB validation: p-rmse: 0.292801	a-peak@32: 0.780173
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:46:40 [DEBUG] XGB validation: p-rmse: 0.387838	a-peak@32: 0.835891
2025-07-23 10:46:40 [DEBUG] XGB iter   0: tr-p-rmse: 0.489299	tr-a-peak@32: 0.493509	tr-rmse: 0.315478	tr-rmse: 0.315478
2025-07-23 10:46:40 [DEBUG] XGB iter  25: tr-p-rmse: 0.074539	tr-a-peak@32: 1.000000	tr-rmse: 0.374692	tr-rmse: 0.374692
2025-07-23 10:46:40 [DEBUG] XGB iter  50: tr-p-rmse: 0.074539	tr-a-peak@32: 1.000000	tr-rmse: 0.374692	tr-rmse: 0.374692
2025-07-23 10:46:40 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.07454	tr-a-peak@32:1.00000	tr-rmse:0.37469	tr-rmse:0.37469 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:50:26 [DEBUG] XGB validation: p-rmse: 0.205801	a-peak@32: 0.916950
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:54:03 [DEBUG] XGB validation: p-rmse: 0.172498	a-peak@32: 0.982305
2025-07-23 10:54:03 [DEBUG] XGB iter   0: tr-p-rmse: 0.472872	tr-a-peak@32: 0.762780	tr-rmse: 0.358420	tr-rmse: 0.358420
2025-07-23 10:54:03 [DEBUG] XGB iter  25: tr-p-rmse: 0.075793	tr-a-peak@32: 1.000000	tr-rmse: 0.417567	tr-rmse: 0.417567
2025-07-23 10:54:03 [DEBUG] XGB iter  50: tr-p-rmse: 0.075793	tr-a-peak@32: 1.000000	tr-rmse: 0.417567	tr-rmse: 0.417567
2025-07-23 10:54:03 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.07579	tr-a-peak@32:1.00000	tr-rmse:0.41757	tr-rmse:0.41757 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 10:57:43 [DEBUG] XGB validation: p-rmse: 0.201375	a-peak@32: 0.800955
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:01:12 [DEBUG] XGB validation: p-rmse: 0.289922	a-peak@32: 0.572298
2025-07-23 11:01:12 [DEBUG] XGB iter   0: tr-p-rmse: 0.452334	tr-a-peak@32: 0.669321	tr-rmse: 0.336526	tr-rmse: 0.336526
2025-07-23 11:01:12 [DEBUG] XGB iter  25: tr-p-rmse: 0.081944	tr-a-peak@32: 0.985924	tr-rmse: 0.398973	tr-rmse: 0.398973
2025-07-23 11:01:12 [DEBUG] XGB iter  50: tr-p-rmse: 0.081944	tr-a-peak@32: 0.985924	tr-rmse: 0.398973	tr-rmse: 0.398973
2025-07-23 11:01:12 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.08194	tr-a-peak@32:0.98592	tr-rmse:0.39897	tr-rmse:0.39897 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:04:38 [DEBUG] XGB validation: p-rmse: 0.113516	a-peak@32: 0.933877
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:08:09 [DEBUG] XGB validation: p-rmse: 0.100678	a-peak@32: 0.980228
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:10:37 [DEBUG] XGB validation: p-rmse: 0.198501	a-peak@32: 0.932591
2025-07-23 11:10:37 [DEBUG] XGB iter   0: tr-p-rmse: 0.436065	tr-a-peak@32: 0.813292	tr-rmse: 0.380665	tr-rmse: 0.380665
2025-07-23 11:10:37 [DEBUG] XGB iter  25: tr-p-rmse: 0.089489	tr-a-peak@32: 0.970800	tr-rmse: 0.441495	tr-rmse: 0.441495
2025-07-23 11:10:37 [DEBUG] XGB iter  50: tr-p-rmse: 0.089489	tr-a-peak@32: 0.970800	tr-rmse: 0.441495	tr-rmse: 0.441495
2025-07-23 11:10:37 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.08949	tr-a-peak@32:0.97080	tr-rmse:0.44149	tr-rmse:0.44149 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:12:39 [DEBUG] XGB validation: p-rmse: 0.246297	a-peak@32: 0.819310
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:13:51 [DEBUG] XGB validation: p-rmse: 0.442236	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_transpose_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_transpose_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  half conv2d_transpose_nhwc_local[8];
  __shared__ half PadInput_shared[2560];
  __shared__ half weight_shared[16384];
  conv2d_transpose_nhwc_local[0] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[1] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[4] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[5] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[2] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[3] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[6] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[7] = __float2half_rn(0.000000e+00f);
  if (((int)threadIdx.x) < 80) {
    uint4 condval;
    if (((((1 <= (((((int)blockIdx.x) >> 3) * 2) + (((int)threadIdx.x) / 20))) && ((((((int)blockIdx.x) >> 3) * 2) + (((int)threadIdx.x) / 20)) < 17)) && (1 <= ((((((int)blockIdx.x) & 7) >> 2) * 8) + ((((int)threadIdx.x) % 20) >> 1)))) && (((((((int)blockIdx.x) & 7) >> 2) * 8) + ((((int)threadIdx.x) % 20) >> 1)) < 17))) {
      condval = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 4096) + ((((int)threadIdx.x) / 20) * 2048)) + (((((int)blockIdx.x) & 7) >> 2) * 1024)) + (((((int)threadIdx.x) % 20) >> 1) * 128)) + ((((int)threadIdx.x) & 1) * 8)) - 2176));
    } else {
      condval = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(PadInput_shared + (((int)threadIdx.x) * 8)) = condval;
  }
  *(half4*)(weight_shared + (((int)threadIdx.x) * 4)) = *(half4*)(weight + (((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 512)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 16384));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 1024)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 32768));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 1536)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 49152));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 2048)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 65536));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 2560)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 81920));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 3072)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 98304));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 3584)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 114688));
__asm__ __volatile__("cp.async.commit_group;");

  if (((int)threadIdx.x) < 80) {
    uint4 condval_1;
    if (((((1 <= (((((int)blockIdx.x) >> 3) * 2) + (((int)threadIdx.x) / 20))) && ((((((int)blockIdx.x) >> 3) * 2) + (((int)threadIdx.x) / 20)) < 17)) && (1 <= ((((((int)blockIdx.x) & 7) >> 2) * 8) + ((((int)threadIdx.x) % 20) >> 1)))) && (((((((int)blockIdx.x) & 7) >> 2) * 8) + ((((int)threadIdx.x) % 20) >> 1)) < 17))) {
      condval_1 = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 4096) + ((((int)threadIdx.x) / 20) * 2048)) + (((((int)blockIdx.x) & 7) >> 2) * 1024)) + (((((int)threadIdx.x) % 20) >> 1) * 128)) + ((((int)threadIdx.x) & 1) * 8)) - 2160));
    } else {
      condval_1 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(PadInput_shared + ((((int)threadIdx.x) * 8) + 640)) = condval_1;
  }
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 4096)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 1024));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 4608)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 17408));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 5120)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 33792));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 5632)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 50176));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 6144)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 66560));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 6656)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 82944));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 7168)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 99328));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 7680)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 115712));
__asm__ __volatile__("cp.async.commit_group;");

  if (((int)threadIdx.x) < 80) {
    uint4 condval_2;
    if (((((1 <= (((((int)blockIdx.x) >> 3) * 2) + (((int)threadIdx.x) / 20))) && ((((((int)blockIdx.x) >> 3) * 2) + (((int)threadIdx.x) / 20)) < 17)) && (1 <= ((((((int)blockIdx.x) & 7) >> 2) * 8) + ((((int)threadIdx.x) % 20) >> 1)))) && (((((((int)blockIdx.x) & 7) >> 2) * 8) + ((((int)threadIdx.x) % 20) >> 1)) < 17))) {
      condval_2 = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 3) * 4096) + ((((int)threadIdx.x) / 20) * 2048)) + (((((int)blockIdx.x) & 7) >> 2) * 1024)) + (((((int)threadIdx.x) % 20) >> 1) * 128)) + ((((int)threadIdx.x) & 1) * 8)) - 2144));
    } else {
      condval_2 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(PadInput_shared + ((((int)threadIdx.x) * 8) + 1280)) = condval_2;
  }
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 8192)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 2048));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 8704)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 18432));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 9216)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 34816));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 9728)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 51200));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 10240)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 67584));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 10752)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 83968));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 11264)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 100352));
  *(half4*)(weight_shared + ((((int)threadIdx.x) * 4) + 11776)) = *(half4*)(weight + ((((((((int)threadIdx.x) >> 6) * 8192) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 116736));
__asm__ __volatile__("cp.async.commit_group;");

  for (int rh_0_rw_0_rc_0_fused = 0; rh_0_rw_0_rc_0_fused < 5; ++rh_0_rw_0_rc_0_fused) {
    __syncthreads();
    if (((int)threadIdx.x) < 80) {
      uint4 condval_3;
      if (((((1 <= (((((int)blockIdx.x) >> 3) * 2) + (((int)threadIdx.x) / 20))) && ((((((int)blockIdx.x) >> 3) * 2) + (((int)threadIdx.x) / 20)) < 17)) && (1 <= ((((((int)blockIdx.x) & 7) >> 2) * 8) + ((((int)threadIdx.x) % 20) >> 1)))) && (((((((int)blockIdx.x) & 7) >> 2) * 8) + ((((int)threadIdx.x) % 20) >> 1)) < 17))) {
        condval_3 = *(uint4*)(inputs + ((((((((((int)blockIdx.x) >> 3) * 4096) + ((((int)threadIdx.x) / 20) * 2048)) + (((((int)blockIdx.x) & 7) >> 2) * 1024)) + (((((int)threadIdx.x) % 20) >> 1) * 128)) + (rh_0_rw_0_rc_0_fused * 16)) + ((((int)threadIdx.x) & 1) * 8)) - 2128));
      } else {
        condval_3 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
      }
      *(uint4*)(PadInput_shared + ((((rh_0_rw_0_rc_0_fused + 3) & 3) * 640) + (((int)threadIdx.x) * 8))) = condval_3;
    }
    *(half4*)(weight_shared + ((((rh_0_rw_0_rc_0_fused + 3) & 3) * 4096) + (((int)threadIdx.x) * 4))) = *(half4*)(weight + (((((((((int)threadIdx.x) >> 6) * 8192) + (rh_0_rw_0_rc_0_fused * 1024)) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 3072));
    *(half4*)(weight_shared + (((((rh_0_rw_0_rc_0_fused + 3) & 3) * 4096) + (((int)threadIdx.x) * 4)) + 512)) = *(half4*)(weight + (((((((((int)threadIdx.x) >> 6) * 8192) + (rh_0_rw_0_rc_0_fused * 1024)) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 19456));
    *(half4*)(weight_shared + (((((rh_0_rw_0_rc_0_fused + 3) & 3) * 4096) + (((int)threadIdx.x) * 4)) + 1024)) = *(half4*)(weight + (((((((((int)threadIdx.x) >> 6) * 8192) + (rh_0_rw_0_rc_0_fused * 1024)) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 35840));
    *(half4*)(weight_shared + (((((rh_0_rw_0_rc_0_fused + 3) & 3) * 4096) + (((int)threadIdx.x) * 4)) + 1536)) = *(half4*)(weight + (((((((((int)threadIdx.x) >> 6) * 8192) + (rh_0_rw_0_rc_0_fused * 1024)) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 52224));
    *(half4*)(weight_shared + (((((rh_0_rw_0_rc_0_fused + 3) & 3) * 4096) + (((int)threadIdx.x) * 4)) + 2048)) = *(half4*)(weight + (((((((((int)threadIdx.x) >> 6) * 8192) + (rh_0_rw_0_rc_0_fused * 1024)) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 68608));
    *(half4*)(weight_shared + (((((rh_0_rw_0_rc_0_fused + 3) & 3) * 4096) + (((int)threadIdx.x) * 4)) + 2560)) = *(half4*)(weight + (((((((((int)threadIdx.x) >> 6) * 8192) + (rh_0_rw_0_rc_0_fused * 1024)) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 84992));
    *(half4*)(weight_shared + (((((rh_0_rw_0_rc_0_fused + 3) & 3) * 4096) + (((int)threadIdx.x) * 4)) + 3072)) = *(half4*)(weight + (((((((((int)threadIdx.x) >> 6) * 8192) + (rh_0_rw_0_rc_0_fused * 1024)) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 101376));
    *(half4*)(weight_shared + (((((rh_0_rw_0_rc_0_fused + 3) & 3) * 4096) + (((int)threadIdx.x) * 4)) + 3584)) = *(half4*)(weight + (((((((((int)threadIdx.x) >> 6) * 8192) + (rh_0_rw_0_rc_0_fused * 1024)) + (((((int)threadIdx.x) & 63) >> 2) * 64)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 3) * 4)) + 117760));
__asm__ __volatile__("cp.async.commit_group;");

__asm__ __volatile__("cp.async.wait_group 3;");

    __syncthreads();
    for (int rh_1 = 0; rh_1 < 2; ++rh_1) {
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16))] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3840) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16))] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3841) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3856) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3857) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3872) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3873) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 3)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3888) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 3)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3889) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 4)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3904) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 4)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3905) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 5)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3920) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 5)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3921) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 6)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3936) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 6)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3937) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 7)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3952) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 7)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3953) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 160)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2816) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 160)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2817) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 161)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2832) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 161)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2833) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 162)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2848) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 162)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2849) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 163)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2864) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 163)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2865) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 164)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2880) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 164)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2881) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 165)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2896) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 165)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2897) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 166)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2912) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 166)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2913) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 167)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2928) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 167)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2929) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 16)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3584) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 16)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3585) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 17)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3600) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 17)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3601) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 18)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3616) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 18)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3617) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 19)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3632) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 19)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3633) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 20)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3648) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 20)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3649) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 21)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3664) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 21)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3665) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 22)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3680) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 22)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3681) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 23)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3696) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 23)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3697) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 176)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2560) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 176)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2561) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 177)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2576) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 177)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2577) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 178)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2592) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 178)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2593) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 179)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2608) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 179)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2609) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 180)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2624) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 180)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2625) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 181)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2640) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 181)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2641) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 182)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2656) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 182)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2657) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 183)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2672) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 183)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2673) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 8)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3968) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 8)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3969) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 9)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3984) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 9)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3985) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 10)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 4000) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 10)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 4001) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 11)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 4016) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 11)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 4017) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 12)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 4032) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 12)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 4033) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 13)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 4048) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 13)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 4049) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 14)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 4064) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 14)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 4065) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 15)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 4080) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 15)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 4081) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 168)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2944) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 168)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2945) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 169)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2960) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 169)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2961) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 170)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2976) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 170)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2977) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 171)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2992) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 171)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2993) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 172)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3008) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 172)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3009) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 173)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3024) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 173)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3025) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 174)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3040) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 174)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3041) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 175)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3056) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 175)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3057) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 24)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3712) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 24)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3713) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 25)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3728) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 25)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3729) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 26)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3744) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 26)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3745) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 27)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3760) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 27)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3761) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 28)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3776) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 28)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3777) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 29)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3792) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 29)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3793) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 30)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3808) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 30)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3809) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 31)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3824) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 31)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3825) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 184)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2688) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 184)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2689) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 185)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2704) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 185)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2705) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 186)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2720) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 186)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2721) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 187)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2736) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 187)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2737) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 188)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2752) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 188)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2753) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 189)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2768) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 189)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2769) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 190)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2784) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 190)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2785) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 191)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2800) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 191)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2801) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 16)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3328) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 16)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3329) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 17)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3344) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 17)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3345) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 18)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3360) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 18)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3361) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 19)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3376) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 19)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3377) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 20)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3392) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 20)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3393) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 21)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3408) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 21)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3409) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 22)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3424) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 22)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3425) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 23)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3440) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 23)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3441) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 176)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2304) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 176)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2305) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 177)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2320) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 177)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2321) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 178)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2336) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 178)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2337) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 179)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2352) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 179)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2353) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 180)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2368) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 180)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2369) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 181)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2384) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 181)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2385) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 182)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2400) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 182)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2401) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 183)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2416) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 183)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2417) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 32)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3072) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 32)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3073) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 33)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3088) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 33)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3089) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 34)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3104) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 34)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3105) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 35)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3120) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 35)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3121) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 36)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3136) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 36)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3137) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 37)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3152) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 37)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3153) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 38)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3168) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 38)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3169) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 39)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3184) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 39)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3185) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 192)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2048) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 192)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2049) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 193)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2064) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 193)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2065) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 194)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2080) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 194)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2081) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 195)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2096) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 195)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2097) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 196)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2112) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 196)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2113) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 197)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2128) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 197)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2129) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 198)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2144) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 198)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2145) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 199)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2160) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 199)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2161) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 24)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3456) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 24)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3457) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 25)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3472) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 25)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3473) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 26)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3488) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 26)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3489) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 27)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3504) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 27)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3505) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 28)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3520) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 28)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3521) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 29)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3536) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 29)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3537) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 30)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3552) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 30)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3553) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 31)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3568) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 31)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3569) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 184)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2432) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 184)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2433) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 185)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2448) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 185)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2449) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 186)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2464) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 186)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2465) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 187)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2480) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 187)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2481) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 188)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2496) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 188)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2497) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 189)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2512) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 189)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2513) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 190)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2528) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 190)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2529) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 191)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2544) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 191)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2545) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 40)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3200) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 40)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3201) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 41)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3216) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 41)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3217) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 42)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3232) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 42)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3233) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 43)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3248) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 43)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3249) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 44)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3264) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 44)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3265) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 45)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3280) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 45)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3281) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 46)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3296) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 46)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3297) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 47)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3312) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 47)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 3313) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 200)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2176) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 200)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2177) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 201)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2192) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 201)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2193) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 202)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2208) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 202)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2209) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 203)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2224) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 203)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2225) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 204)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2240) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 204)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2241) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 205)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2256) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 205)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2257) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 206)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2272) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 206)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2273) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 207)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2288) - (rh_1 * 2048))]));
      conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[((((((rh_0_rw_0_rc_0_fused & 3) * 640) + ((((int)threadIdx.x) >> 6) * 160)) + (rh_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 207)] * weight_shared[(((((rh_0_rw_0_rc_0_fused & 3) * 4096) + ((((int)threadIdx.x) & 7) * 2)) + 2289) - (rh_1 * 2048))]));
    }
  }
__asm__ __volatile__("cp.async.wait_group 2;");

  __syncthreads();
  for (int rh_1_1 = 0; rh_1_1 < 2; ++rh_1_1) {
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 640)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7936) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 640)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7937) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 641)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7952) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 641)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7953) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 642)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7968) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 642)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7969) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 643)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7984) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 643)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7985) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 644)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8000) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 644)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8001) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 645)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8016) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 645)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8017) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 646)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8032) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 646)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8033) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 647)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8048) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 647)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8049) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 800)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6912) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 800)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6913) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 801)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6928) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 801)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6929) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 802)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6944) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 802)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6945) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 803)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6960) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 803)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6961) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 804)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6976) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 804)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6977) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 805)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6992) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 805)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6993) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 806)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7008) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 806)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7009) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 807)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7024) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 807)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7025) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 656)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7680) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 656)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7681) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 657)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7696) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 657)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7697) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 658)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7712) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 658)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7713) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 659)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7728) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 659)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7729) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 660)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7744) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 660)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7745) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 661)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7760) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 661)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7761) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 662)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7776) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 662)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7777) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 663)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7792) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 663)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7793) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 816)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6656) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 816)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6657) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 817)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6672) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 817)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6673) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 818)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6688) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 818)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6689) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 819)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6704) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 819)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6705) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 820)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6720) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 820)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6721) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 821)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6736) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 821)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6737) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 822)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6752) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 822)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6753) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 823)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6768) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 823)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6769) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 648)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8064) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 648)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8065) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 649)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8080) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 649)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8081) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 650)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8096) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 650)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8097) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 651)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8112) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 651)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8113) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 652)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8128) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 652)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8129) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 653)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8144) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 653)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8145) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 654)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8160) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 654)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8161) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 655)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8176) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 655)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 8177) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 808)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7040) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 808)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7041) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 809)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7056) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 809)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7057) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 810)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7072) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 810)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7073) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 811)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7088) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 811)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7089) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 812)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7104) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 812)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7105) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 813)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7120) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 813)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7121) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 814)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7136) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 814)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7137) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 815)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7152) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 815)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7153) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 664)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7808) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 664)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7809) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 665)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7824) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 665)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7825) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 666)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7840) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 666)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7841) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 667)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7856) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 667)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7857) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 668)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7872) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 668)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7873) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 669)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7888) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 669)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7889) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 670)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7904) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 670)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7905) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 671)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7920) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 671)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7921) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 824)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6784) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 824)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6785) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 825)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6800) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 825)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6801) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 826)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6816) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 826)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6817) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 827)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6832) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 827)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6833) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 828)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6848) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 828)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6849) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 829)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6864) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 829)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6865) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 830)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6880) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 830)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6881) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 831)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6896) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 831)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6897) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 656)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7424) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 656)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7425) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 657)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7440) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 657)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7441) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 658)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7456) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 658)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7457) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 659)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7472) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 659)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7473) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 660)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7488) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 660)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7489) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 661)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7504) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 661)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7505) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 662)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7520) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 662)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7521) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 663)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7536) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 663)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7537) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 816)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6400) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 816)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6401) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 817)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6416) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 817)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6417) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 818)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6432) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 818)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6433) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 819)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6448) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 819)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6449) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 820)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6464) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 820)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6465) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 821)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6480) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 821)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6481) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 822)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6496) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 822)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6497) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 823)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6512) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 823)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6513) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 672)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7168) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 672)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7169) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 673)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7184) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 673)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7185) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 674)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7200) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 674)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7201) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 675)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7216) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 675)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7217) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 676)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7232) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 676)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7233) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 677)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7248) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 677)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7249) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 678)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7264) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 678)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7265) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 679)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7280) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 679)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7281) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 832)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6144) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 832)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6145) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 833)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6160) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 833)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6161) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 834)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6176) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 834)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6177) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 835)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6192) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 835)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6193) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 836)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6208) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 836)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6209) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 837)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6224) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 837)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6225) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 838)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6240) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 838)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6241) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 839)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6256) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 839)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6257) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 664)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7552) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 664)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7553) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 665)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7568) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 665)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7569) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 666)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7584) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 666)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7585) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 667)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7600) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 667)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7601) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 668)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7616) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 668)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7617) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 669)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7632) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 669)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7633) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 670)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7648) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 670)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7649) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 671)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7664) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 671)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7665) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 824)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6528) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 824)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6529) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 825)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6544) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 825)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6545) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 826)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6560) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 826)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6561) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 827)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6576) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 827)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6577) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 828)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6592) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 828)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6593) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 829)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6608) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 829)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6609) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 830)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6624) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 830)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6625) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 831)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6640) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 831)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6641) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 680)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7296) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 680)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7297) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 681)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7312) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 681)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7313) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 682)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7328) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 682)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7329) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 683)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7344) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 683)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7345) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 684)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7360) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 684)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7361) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 685)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7376) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 685)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7377) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 686)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7392) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 686)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7393) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 687)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7408) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 687)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 7409) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 840)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6272) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 840)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6273) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 841)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6288) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 841)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6289) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 842)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6304) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 842)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6305) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 843)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6320) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 843)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6321) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 844)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6336) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 844)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6337) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 845)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6352) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 845)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6353) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 846)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6368) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 846)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6369) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 847)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6384) - (rh_1_1 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_1 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 847)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 6385) - (rh_1_1 * 2048))]));
  }
__asm__ __volatile__("cp.async.wait_group 1;");

  __syncthreads();
  for (int rh_1_2 = 0; rh_1_2 < 2; ++rh_1_2) {
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1280)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12032) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1280)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12033) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1281)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12048) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1281)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12049) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1282)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12064) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1282)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12065) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1283)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12080) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1283)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12081) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1284)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12096) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1284)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12097) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1285)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12112) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1285)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12113) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1286)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12128) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1286)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12129) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1287)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12144) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1287)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12145) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1440)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11008) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1440)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11009) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1441)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11024) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1441)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11025) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1442)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11040) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1442)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11041) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1443)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11056) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1443)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11057) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1444)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11072) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1444)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11073) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1445)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11088) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1445)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11089) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1446)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11104) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1446)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11105) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1447)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11120) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1447)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11121) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1296)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11776) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1296)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11777) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1297)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11792) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1297)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11793) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1298)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11808) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1298)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11809) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1299)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11824) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1299)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11825) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1300)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11840) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1300)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11841) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1301)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11856) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1301)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11857) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1302)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11872) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1302)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11873) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1303)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11888) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1303)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11889) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1456)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10752) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1456)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10753) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1457)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10768) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1457)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10769) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1458)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10784) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1458)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10785) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1459)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10800) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1459)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10801) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1460)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10816) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1460)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10817) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1461)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10832) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1461)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10833) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1462)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10848) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1462)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10849) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1463)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10864) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1463)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10865) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1288)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12160) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1288)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12161) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1289)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12176) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1289)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12177) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1290)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12192) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1290)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12193) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1291)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12208) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1291)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12209) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1292)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12224) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1292)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12225) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1293)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12240) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1293)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12241) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1294)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12256) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1294)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12257) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1295)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12272) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1295)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12273) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1448)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11136) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1448)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11137) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1449)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11152) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1449)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11153) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1450)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11168) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1450)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11169) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1451)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11184) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1451)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11185) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1452)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11200) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1452)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11201) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1453)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11216) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1453)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11217) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1454)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11232) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1454)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11233) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1455)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11248) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1455)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11249) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1304)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11904) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1304)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11905) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1305)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11920) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1305)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11921) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1306)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11936) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1306)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11937) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1307)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11952) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1307)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11953) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1308)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11968) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1308)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11969) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1309)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11984) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1309)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11985) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1310)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12000) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1310)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12001) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1311)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12016) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1311)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 12017) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1464)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10880) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1464)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10881) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1465)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10896) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1465)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10897) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1466)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10912) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1466)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10913) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1467)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10928) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1467)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10929) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1468)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10944) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1468)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10945) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1469)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10960) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1469)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10961) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1470)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10976) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1470)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10977) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1471)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10992) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1471)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10993) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1296)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11520) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1296)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11521) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1297)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11536) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1297)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11537) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1298)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11552) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1298)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11553) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1299)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11568) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1299)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11569) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1300)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11584) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1300)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11585) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1301)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11600) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1301)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11601) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1302)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11616) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1302)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11617) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1303)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11632) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1303)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11633) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1456)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10496) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1456)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10497) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1457)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10512) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1457)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10513) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1458)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10528) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1458)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10529) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1459)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10544) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1459)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10545) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1460)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10560) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1460)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10561) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1461)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10576) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1461)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10577) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1462)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10592) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1462)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10593) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1463)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10608) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1463)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10609) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1312)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11264) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1312)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11265) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1313)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11280) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1313)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11281) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1314)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11296) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1314)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11297) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1315)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11312) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1315)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11313) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1316)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11328) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1316)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11329) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1317)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11344) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1317)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11345) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1318)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11360) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1318)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11361) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1319)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11376) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1319)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11377) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1472)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10240) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1472)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10241) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1473)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10256) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1473)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10257) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1474)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10272) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1474)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10273) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1475)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10288) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1475)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10289) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1476)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10304) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1476)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10305) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1477)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10320) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1477)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10321) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1478)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10336) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1478)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10337) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1479)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10352) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1479)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10353) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1304)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11648) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1304)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11649) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1305)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11664) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1305)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11665) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1306)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11680) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1306)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11681) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1307)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11696) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1307)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11697) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1308)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11712) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1308)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11713) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1309)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11728) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1309)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11729) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1310)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11744) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1310)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11745) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1311)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11760) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1311)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11761) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1464)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10624) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1464)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10625) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1465)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10640) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1465)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10641) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1466)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10656) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1466)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10657) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1467)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10672) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1467)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10673) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1468)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10688) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1468)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10689) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1469)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10704) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1469)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10705) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1470)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10720) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1470)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10721) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1471)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10736) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1471)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10737) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1320)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11392) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1320)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11393) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1321)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11408) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1321)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11409) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1322)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11424) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1322)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11425) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1323)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11440) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1323)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11441) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1324)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11456) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1324)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11457) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1325)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11472) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1325)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11473) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1326)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11488) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1326)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11489) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1327)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11504) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1327)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 11505) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1480)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10368) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1480)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10369) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1481)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10384) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1481)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10385) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1482)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10400) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1482)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10401) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1483)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10416) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1483)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10417) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1484)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10432) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1484)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10433) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1485)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10448) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1485)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10449) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1486)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10464) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1486)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10465) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1487)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10480) - (rh_1_2 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_2 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1487)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 10481) - (rh_1_2 * 2048))]));
  }
__asm__ __volatile__("cp.async.wait_group 0;");

  __syncthreads();
  for (int rh_1_3 = 0; rh_1_3 < 2; ++rh_1_3) {
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1920)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16128) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1920)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16129) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1921)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16144) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1921)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16145) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1922)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16160) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1922)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16161) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1923)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16176) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1923)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16177) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1924)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16192) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1924)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16193) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1925)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16208) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1925)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16209) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1926)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16224) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1926)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16225) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1927)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16240) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1927)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16241) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2080)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15104) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2080)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15105) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2081)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15120) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2081)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15121) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2082)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15136) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2082)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15137) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2083)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15152) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2083)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15153) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2084)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15168) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2084)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15169) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2085)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15184) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2085)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15185) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2086)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15200) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2086)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15201) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2087)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15216) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2087)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15217) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1936)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15872) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1936)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15873) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1937)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15888) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1937)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15889) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1938)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15904) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1938)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15905) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1939)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15920) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1939)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15921) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1940)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15936) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1940)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15937) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1941)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15952) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1941)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15953) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1942)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15968) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1942)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15969) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1943)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15984) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1943)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15985) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2096)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14848) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2096)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14849) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2097)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14864) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2097)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14865) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2098)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14880) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2098)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14881) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2099)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14896) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2099)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14897) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2100)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14912) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2100)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14913) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2101)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14928) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2101)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14929) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2102)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14944) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2102)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14945) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2103)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14960) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2103)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14961) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1928)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16256) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1928)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16257) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1929)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16272) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1929)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16273) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1930)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16288) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1930)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16289) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1931)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16304) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1931)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16305) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1932)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16320) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1932)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16321) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1933)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16336) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1933)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16337) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1934)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16352) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1934)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16353) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1935)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16368) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1935)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16369) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2088)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15232) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2088)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15233) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2089)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15248) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2089)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15249) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2090)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15264) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2090)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15265) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2091)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15280) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2091)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15281) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2092)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15296) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2092)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15297) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2093)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15312) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2093)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15313) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2094)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15328) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2094)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15329) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2095)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15344) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2095)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15345) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1944)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16000) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1944)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16001) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1945)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16016) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1945)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16017) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1946)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16032) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1946)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16033) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1947)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16048) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1947)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16049) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1948)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16064) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1948)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16065) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1949)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16080) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1949)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16081) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1950)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16096) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1950)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16097) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1951)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16112) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1951)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 16113) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2104)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14976) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2104)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14977) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2105)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14992) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2105)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14993) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2106)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15008) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2106)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15009) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2107)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15024) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2107)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15025) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2108)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15040) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2108)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15041) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2109)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15056) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2109)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15057) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2110)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15072) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2110)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15073) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2111)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15088) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2111)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15089) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1936)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15616) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1936)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15617) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1937)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15632) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1937)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15633) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1938)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15648) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1938)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15649) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1939)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15664) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1939)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15665) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1940)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15680) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1940)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15681) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1941)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15696) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1941)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15697) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1942)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15712) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1942)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15713) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1943)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15728) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1943)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15729) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2096)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14592) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2096)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14593) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2097)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14608) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2097)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14609) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2098)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14624) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2098)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14625) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2099)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14640) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2099)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14641) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2100)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14656) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2100)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14657) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2101)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14672) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2101)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14673) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2102)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14688) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2102)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14689) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2103)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14704) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2103)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14705) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1952)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15360) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1952)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15361) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1953)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15376) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1953)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15377) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1954)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15392) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1954)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15393) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1955)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15408) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1955)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15409) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1956)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15424) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1956)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15425) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1957)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15440) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1957)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15441) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1958)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15456) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1958)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15457) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1959)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15472) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1959)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15473) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2112)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14336) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2112)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14337) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2113)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14352) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2113)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14353) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2114)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14368) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2114)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14369) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2115)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14384) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2115)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14385) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2116)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14400) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2116)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14401) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2117)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14416) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2117)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14417) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2118)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14432) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2118)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14433) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2119)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14448) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2119)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14449) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1944)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15744) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1944)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15745) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1945)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15760) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1945)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15761) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1946)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15776) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1946)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15777) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1947)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15792) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1947)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15793) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1948)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15808) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1948)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15809) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1949)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15824) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1949)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15825) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1950)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15840) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1950)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15841) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1951)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15856) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1951)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15857) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2104)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14720) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2104)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14721) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2105)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14736) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2105)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14737) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2106)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14752) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2106)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14753) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2107)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14768) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2107)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14769) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2108)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14784) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2108)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14785) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2109)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14800) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2109)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14801) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2110)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14816) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2110)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14817) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[4] = (conv2d_transpose_nhwc_local[4] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2111)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14832) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[5] = (conv2d_transpose_nhwc_local[5] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2111)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14833) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1960)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15488) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1960)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15489) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1961)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15504) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1961)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15505) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1962)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15520) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1962)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15521) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1963)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15536) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1963)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15537) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1964)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15552) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1964)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15553) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1965)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15568) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1965)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15569) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1966)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15584) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1966)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15585) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[2] = (conv2d_transpose_nhwc_local[2] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1967)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15600) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[3] = (conv2d_transpose_nhwc_local[3] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 1967)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 15601) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2120)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14464) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2120)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14465) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2121)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14480) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2121)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14481) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2122)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14496) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2122)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14497) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2123)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14512) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2123)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14513) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2124)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14528) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2124)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14529) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2125)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14544) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2125)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14545) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2126)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14560) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2126)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14561) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[6] = (conv2d_transpose_nhwc_local[6] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2127)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14576) - (rh_1_3 * 2048))]));
    conv2d_transpose_nhwc_local[7] = (conv2d_transpose_nhwc_local[7] + (PadInput_shared[(((((((int)threadIdx.x) >> 6) * 160) + (rh_1_3 * 160)) + (((((int)threadIdx.x) & 63) >> 3) * 16)) + 2127)] * weight_shared[((((((int)threadIdx.x) & 7) * 2) + 14577) - (rh_1_3 * 2048))]));
  }
  conv2d_transpose_nhwc[(((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) >> 6) * 4096)) + (((((int)blockIdx.x) & 7) >> 2) * 1024)) + (((((int)threadIdx.x) & 63) >> 3) * 128)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2))] = conv2d_transpose_nhwc_local[0];
  conv2d_transpose_nhwc[((((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) >> 6) * 4096)) + (((((int)blockIdx.x) & 7) >> 2) * 1024)) + (((((int)threadIdx.x) & 63) >> 3) * 128)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 1)] = conv2d_transpose_nhwc_local[1];
  conv2d_transpose_nhwc[((((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) >> 6) * 4096)) + (((((int)blockIdx.x) & 7) >> 2) * 1024)) + (((((int)threadIdx.x) & 63) >> 3) * 128)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 64)] = conv2d_transpose_nhwc_local[2];
  conv2d_transpose_nhwc[((((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) >> 6) * 4096)) + (((((int)blockIdx.x) & 7) >> 2) * 1024)) + (((((int)threadIdx.x) & 63) >> 3) * 128)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 65)] = conv2d_transpose_nhwc_local[3];
  conv2d_transpose_nhwc[((((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) >> 6) * 4096)) + (((((int)blockIdx.x) & 7) >> 2) * 1024)) + (((((int)threadIdx.x) & 63) >> 3) * 128)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 2048)] = conv2d_transpose_nhwc_local[4];
  conv2d_transpose_nhwc[((((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) >> 6) * 4096)) + (((((int)blockIdx.x) & 7) >> 2) * 1024)) + (((((int)threadIdx.x) & 63) >> 3) * 128)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 2049)] = conv2d_transpose_nhwc_local[5];
  conv2d_transpose_nhwc[((((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) >> 6) * 4096)) + (((((int)blockIdx.x) & 7) >> 2) * 1024)) + (((((int)threadIdx.x) & 63) >> 3) * 128)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 2112)] = conv2d_transpose_nhwc_local[6];
  conv2d_transpose_nhwc[((((((((((int)blockIdx.x) >> 3) * 8192) + ((((int)threadIdx.x) >> 6) * 4096)) + (((((int)blockIdx.x) & 7) >> 2) * 1024)) + (((((int)threadIdx.x) & 63) >> 3) * 128)) + ((((int)blockIdx.x) & 3) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 2113)] = conv2d_transpose_nhwc_local[7];
}


The time of T2D is 0.030 ms
2025-07-23 11:13:57 [INFO] Logging directory: /tmp/tmpxo805r8a/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:16:28 [DEBUG] XGB iter   0: tr-p-rmse: 0.553723	tr-a-peak@32: 1.000000	tr-rmse: 0.306408	tr-rmse: 0.306408
2025-07-23 11:16:28 [DEBUG] XGB iter  25: tr-p-rmse: 0.043242	tr-a-peak@32: 1.000000	tr-rmse: 0.393181	tr-rmse: 0.393181
2025-07-23 11:16:28 [DEBUG] XGB iter  50: tr-p-rmse: 0.043242	tr-a-peak@32: 1.000000	tr-rmse: 0.393181	tr-rmse: 0.393181
2025-07-23 11:16:28 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.04324	tr-a-peak@32:1.00000	tr-rmse:0.39318	tr-rmse:0.39318 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:19:16 [DEBUG] XGB validation: p-rmse: 0.200298	a-peak@32: 0.862212
2025-07-23 11:19:16 [DEBUG] XGB iter   0: tr-p-rmse: 0.589859	tr-a-peak@32: 0.786751	tr-rmse: 0.273151	tr-rmse: 0.273151
2025-07-23 11:19:16 [DEBUG] XGB iter  25: tr-p-rmse: 0.041469	tr-a-peak@32: 1.000000	tr-rmse: 0.341476	tr-rmse: 0.341476
2025-07-23 11:19:19 [DEBUG] XGB iter  50: tr-p-rmse: 0.041469	tr-a-peak@32: 1.000000	tr-rmse: 0.341476	tr-rmse: 0.341476
2025-07-23 11:19:19 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.04147	tr-a-peak@32:1.00000	tr-rmse:0.34148	tr-rmse:0.34148 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:23:09 [DEBUG] XGB validation: p-rmse: 0.340041	a-peak@32: 0.854139
2025-07-23 11:23:09 [DEBUG] XGB iter   0: tr-p-rmse: 0.540031	tr-a-peak@32: 0.769719	tr-rmse: 0.279912	tr-rmse: 0.279912
2025-07-23 11:23:09 [DEBUG] XGB iter  25: tr-p-rmse: 0.050439	tr-a-peak@32: 1.000000	tr-rmse: 0.367970	tr-rmse: 0.367970
2025-07-23 11:23:09 [DEBUG] XGB iter  50: tr-p-rmse: 0.050439	tr-a-peak@32: 1.000000	tr-rmse: 0.367970	tr-rmse: 0.367970
2025-07-23 11:23:09 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05044	tr-a-peak@32:1.00000	tr-rmse:0.36797	tr-rmse:0.36797 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:27:00 [DEBUG] XGB validation: p-rmse: 0.191610	a-peak@32: 0.967514
2025-07-23 11:27:00 [DEBUG] XGB iter   0: tr-p-rmse: 0.516097	tr-a-peak@32: 0.591174	tr-rmse: 0.294398	tr-rmse: 0.294398
2025-07-23 11:27:00 [DEBUG] XGB iter  25: tr-p-rmse: 0.058147	tr-a-peak@32: 1.000000	tr-rmse: 0.387298	tr-rmse: 0.387298
2025-07-23 11:27:00 [DEBUG] XGB iter  50: tr-p-rmse: 0.058147	tr-a-peak@32: 1.000000	tr-rmse: 0.387298	tr-rmse: 0.387298
2025-07-23 11:27:03 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.05815	tr-a-peak@32:1.00000	tr-rmse:0.38730	tr-rmse:0.38730 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:30:54 [DEBUG] XGB validation: p-rmse: 0.240959	a-peak@32: 0.807674
2025-07-23 11:30:54 [DEBUG] XGB iter   0: tr-p-rmse: 0.498533	tr-a-peak@32: 0.732218	tr-rmse: 0.285689	tr-rmse: 0.285689
2025-07-23 11:30:54 [DEBUG] XGB iter  25: tr-p-rmse: 0.071403	tr-a-peak@32: 1.000000	tr-rmse: 0.384837	tr-rmse: 0.384837
2025-07-23 11:30:54 [DEBUG] XGB iter  50: tr-p-rmse: 0.071403	tr-a-peak@32: 1.000000	tr-rmse: 0.384837	tr-rmse: 0.384837
2025-07-23 11:30:54 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.07140	tr-a-peak@32:1.00000	tr-rmse:0.38484	tr-rmse:0.38484 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:34:45 [DEBUG] XGB validation: p-rmse: 0.234625	a-peak@32: 0.862789
2025-07-23 11:34:45 [DEBUG] XGB iter   0: tr-p-rmse: 0.492195	tr-a-peak@32: 0.888905	tr-rmse: 0.276883	tr-rmse: 0.276883
2025-07-23 11:34:45 [DEBUG] XGB iter  25: tr-p-rmse: 0.085350	tr-a-peak@32: 1.000000	tr-rmse: 0.379913	tr-rmse: 0.379913
2025-07-23 11:34:45 [DEBUG] XGB iter  50: tr-p-rmse: 0.085350	tr-a-peak@32: 1.000000	tr-rmse: 0.379913	tr-rmse: 0.379913
2025-07-23 11:34:45 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.08535	tr-a-peak@32:1.00000	tr-rmse:0.37991	tr-rmse:0.37991 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:38:35 [DEBUG] XGB validation: p-rmse: 0.138359	a-peak@32: 0.979004
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:42:17 [DEBUG] XGB validation: p-rmse: 0.131324	a-peak@32: 0.984076
2025-07-23 11:42:17 [DEBUG] XGB iter   0: tr-p-rmse: 0.505045	tr-a-peak@32: 0.615421	tr-rmse: 0.202123	tr-rmse: 0.202123
2025-07-23 11:42:17 [DEBUG] XGB iter  25: tr-p-rmse: 0.071139	tr-a-peak@32: 1.000000	tr-rmse: 0.313848	tr-rmse: 0.313848
2025-07-23 11:42:17 [DEBUG] XGB iter  50: tr-p-rmse: 0.071139	tr-a-peak@32: 1.000000	tr-rmse: 0.313848	tr-rmse: 0.313848
2025-07-23 11:42:17 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.07114	tr-a-peak@32:1.00000	tr-rmse:0.31385	tr-rmse:0.31385 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:45:56 [DEBUG] XGB validation: p-rmse: 0.182296	a-peak@32: 0.823923
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:49:31 [DEBUG] XGB validation: p-rmse: 0.159278	a-peak@32: 0.988382
2025-07-23 11:49:31 [DEBUG] XGB iter   0: tr-p-rmse: 0.492606	tr-a-peak@32: 0.512948	tr-rmse: 0.229626	tr-rmse: 0.229626
2025-07-23 11:49:32 [DEBUG] XGB iter  25: tr-p-rmse: 0.078339	tr-a-peak@32: 0.979691	tr-rmse: 0.337352	tr-rmse: 0.337352
2025-07-23 11:49:32 [DEBUG] XGB iter  50: tr-p-rmse: 0.078339	tr-a-peak@32: 0.979691	tr-rmse: 0.337352	tr-rmse: 0.337352
2025-07-23 11:49:32 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.07834	tr-a-peak@32:0.97969	tr-rmse:0.33735	tr-rmse:0.33735 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:53:11 [DEBUG] XGB validation: p-rmse: 0.210660	a-peak@32: 0.727736
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 11:56:50 [DEBUG] XGB validation: p-rmse: 0.152496	a-peak@32: 0.989838
2025-07-23 11:56:50 [DEBUG] XGB iter   0: tr-p-rmse: 0.488877	tr-a-peak@32: 0.464369	tr-rmse: 0.236646	tr-rmse: 0.236646
2025-07-23 11:56:50 [DEBUG] XGB iter  25: tr-p-rmse: 0.087471	tr-a-peak@32: 1.000000	tr-rmse: 0.344835	tr-rmse: 0.344835
2025-07-23 11:56:50 [DEBUG] XGB iter  50: tr-p-rmse: 0.087471	tr-a-peak@32: 1.000000	tr-rmse: 0.344835	tr-rmse: 0.344835
2025-07-23 11:56:50 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.08747	tr-a-peak@32:1.00000	tr-rmse:0.34483	tr-rmse:0.34483 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 12:00:36 [DEBUG] XGB validation: p-rmse: 0.182152	a-peak@32: 0.922331
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 12:04:15 [DEBUG] XGB validation: p-rmse: 0.125163	a-peak@32: 0.988783
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 12:07:51 [DEBUG] XGB validation: p-rmse: 0.138790	a-peak@32: 0.981686
2025-07-23 12:07:51 [DEBUG] XGB iter   0: tr-p-rmse: 0.483661	tr-a-peak@32: 0.936831	tr-rmse: 0.242696	tr-rmse: 0.242696
2025-07-23 12:07:51 [DEBUG] XGB iter  25: tr-p-rmse: 0.090249	tr-a-peak@32: 1.000000	tr-rmse: 0.351572	tr-rmse: 0.351572
2025-07-23 12:07:51 [DEBUG] XGB iter  50: tr-p-rmse: 0.090249	tr-a-peak@32: 1.000000	tr-rmse: 0.351573	tr-rmse: 0.351573
2025-07-23 12:07:51 [DEBUG] XGB iter  75: tr-p-rmse: 0.090249	tr-a-peak@32: 1.000000	tr-rmse: 0.351573	tr-rmse: 0.351573
2025-07-23 12:07:51 [DEBUG] XGB stopped. Best iteration: [25] tr-p-rmse:0.09025	tr-a-peak@32:1.00000	tr-rmse:0.35157	tr-rmse:0.35157 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-23 12:11:30 [DEBUG] XGB validation: p-rmse: 0.189281	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ conv2d_capsule_nhwijc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(32) main_kernel(half* __restrict__ conv2d_capsule_nhwijc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[2];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[2];
  nvcuda::wmma::fill_fragment(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  for (int ax2_0_0 = 0; ax2_0_0 < 9; ++ax2_0_0) {
    __syncthreads();
    uint4 condval;
    if (((1 <= (((((int)blockIdx.x) >> 2) * 2) + (ax2_0_0 / 3))) && (1 <= (((((((int)blockIdx.x) & 3) >> 1) * 8) + ((((int)threadIdx.x) >> 4) * 2)) + (ax2_0_0 % 3))))) {
      condval = *(uint4*)(inputs + ((((((((((int)blockIdx.x) >> 2) * 4096) + ((ax2_0_0 / 3) * 2048)) + (((((int)blockIdx.x) & 3) >> 1) * 1024)) + ((((int)threadIdx.x) >> 4) * 256)) + ((ax2_0_0 % 3) * 128)) + ((((int)threadIdx.x) & 15) * 8)) - 2176));
    } else {
      condval = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 8))) = condval;
    uint4 condval_1;
    if (((1 <= (((((int)blockIdx.x) >> 2) * 2) + (ax2_0_0 / 3))) && (1 <= (((((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.x) >> 4)) + 2) & 7) * 2) + (ax2_0_0 % 3))))) {
      condval_1 = *(uint4*)(inputs + (((((((((int)blockIdx.x) >> 2) * 4096) + ((ax2_0_0 / 3) * 2048)) + ((((((((int)blockIdx.x) >> 1) * 4) + (((int)threadIdx.x) >> 4)) + 2) & 7) * 256)) + ((ax2_0_0 % 3) * 128)) + ((((int)threadIdx.x) & 15) * 8)) - 2176));
    } else {
      condval_1 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 2) * 40) + ((((int)threadIdx.x) & 3) * 8)) + 320)) = condval_1;
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 640)) = *(uint4*)(weight + (((((ax2_0_0 * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)));
    *(uint4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.x) >> 1) * 40) + ((((int)threadIdx.x) & 1) * 8)) + 1280)) = *(uint4*)(weight + ((((((ax2_0_0 * 2048) + ((((int)threadIdx.x) >> 4) * 512)) + (((int)blockIdx.y) * 256)) + ((((int)blockIdx.x) & 1) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 1024));
    __syncthreads();
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[0])), 40);
    nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[16])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[640])), 40);
    nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[1280])), 40);
    nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
    nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  }
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[0])), conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  conv2d_capsule_nhwijc[((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15))] = ((half*)buf_dyn_shmem)[((int)threadIdx.x)];
  conv2d_capsule_nhwijc[(((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 128)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 32)];
  conv2d_capsule_nhwijc[(((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 256)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 64)];
  conv2d_capsule_nhwijc[(((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 384)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 96)];
  conv2d_capsule_nhwijc[(((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 512)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 128)];
  conv2d_capsule_nhwijc[(((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 640)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 160)];
  conv2d_capsule_nhwijc[(((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 768)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 192)];
  conv2d_capsule_nhwijc[(((((((((int)blockIdx.x) >> 1) * 1024) + ((((int)threadIdx.x) >> 4) * 64)) + (((int)blockIdx.y) * 32)) + ((((int)blockIdx.x) & 1) * 16)) + (((int)threadIdx.x) & 15)) + 896)] = ((half*)buf_dyn_shmem)[(((int)threadIdx.x) + 224)];
}


The time of CAP is 0.008 ms
2025-07-23 12:11:31 [INFO] Logging directory: /tmp/tmphvus4c34/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K
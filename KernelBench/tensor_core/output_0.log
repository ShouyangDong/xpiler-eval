===========================
2025-07-21 05:07:10 [INFO] Logging directory: /tmp/tmpryll5c03/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:09:39 [DEBUG] XGB iter   0: tr-p-rmse: 0.703734	tr-a-peak@32: 1.000000	tr-rmse: 0.366118	tr-rmse: 0.366118
2025-07-21 05:09:39 [DEBUG] XGB iter  25: tr-p-rmse: 0.301129	tr-a-peak@32: 1.000000	tr-rmse: 0.427139	tr-rmse: 0.427139
2025-07-21 05:09:39 [DEBUG] XGB iter  50: tr-p-rmse: 0.301129	tr-a-peak@32: 1.000000	tr-rmse: 0.427139	tr-rmse: 0.427139
2025-07-21 05:09:39 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.30113	tr-a-peak@32:1.00000	tr-rmse:0.42714	tr-rmse:0.42714 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:12:09 [DEBUG] XGB validation: p-rmse: 0.350636	a-peak@32: 0.482923
2025-07-21 05:12:09 [DEBUG] XGB iter   0: tr-p-rmse: 0.727182	tr-a-peak@32: 0.968750	tr-rmse: 0.371362	tr-rmse: 0.371362
2025-07-21 05:12:09 [DEBUG] XGB iter  25: tr-p-rmse: 0.352555	tr-a-peak@32: 1.000000	tr-rmse: 0.421200	tr-rmse: 0.421200
2025-07-21 05:12:09 [DEBUG] XGB iter  50: tr-p-rmse: 0.352555	tr-a-peak@32: 1.000000	tr-rmse: 0.421200	tr-rmse: 0.421200
2025-07-21 05:12:09 [DEBUG] XGB stopped. Best iteration: [9] tr-p-rmse:0.35256	tr-a-peak@32:1.00000	tr-rmse:0.42120	tr-rmse:0.42120 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:14:39 [DEBUG] XGB validation: p-rmse: 0.770768	a-peak@32: 0.674842
2025-07-21 05:14:39 [DEBUG] XGB iter   0: tr-p-rmse: 0.650708	tr-a-peak@32: 0.881071	tr-rmse: 0.456097	tr-rmse: 0.456097
2025-07-21 05:14:39 [DEBUG] XGB iter  25: tr-p-rmse: 0.272299	tr-a-peak@32: 1.000000	tr-rmse: 0.506954	tr-rmse: 0.506954
2025-07-21 05:14:39 [DEBUG] XGB iter  50: tr-p-rmse: 0.272299	tr-a-peak@32: 1.000000	tr-rmse: 0.506954	tr-rmse: 0.506954
2025-07-21 05:14:43 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.27230	tr-a-peak@32:1.00000	tr-rmse:0.50695	tr-rmse:0.50695 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:17:21 [DEBUG] XGB validation: p-rmse: 0.368540	a-peak@32: 0.761777
2025-07-21 05:17:21 [DEBUG] XGB iter   0: tr-p-rmse: 0.600049	tr-a-peak@32: 0.991388	tr-rmse: 0.455710	tr-rmse: 0.455710
2025-07-21 05:17:21 [DEBUG] XGB iter  25: tr-p-rmse: 0.238067	tr-a-peak@32: 0.992857	tr-rmse: 0.510627	tr-rmse: 0.510627
2025-07-21 05:17:21 [DEBUG] XGB iter  50: tr-p-rmse: 0.238067	tr-a-peak@32: 0.992857	tr-rmse: 0.510627	tr-rmse: 0.510627
2025-07-21 05:17:21 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.23755	tr-a-peak@32:0.99286	tr-rmse:0.51062	tr-rmse:0.51062 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:19:58 [DEBUG] XGB validation: p-rmse: 0.230130	a-peak@32: 0.924221
2025-07-21 05:19:58 [DEBUG] XGB iter   0: tr-p-rmse: 0.549665	tr-a-peak@32: 0.816479	tr-rmse: 0.444204	tr-rmse: 0.444204
2025-07-21 05:19:58 [DEBUG] XGB iter  25: tr-p-rmse: 0.210821	tr-a-peak@32: 1.000000	tr-rmse: 0.500959	tr-rmse: 0.500959
2025-07-21 05:19:58 [DEBUG] XGB iter  50: tr-p-rmse: 0.210821	tr-a-peak@32: 1.000000	tr-rmse: 0.500959	tr-rmse: 0.500959
2025-07-21 05:19:58 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.21082	tr-a-peak@32:1.00000	tr-rmse:0.50096	tr-rmse:0.50096 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:22:34 [DEBUG] XGB validation: p-rmse: 0.302274	a-peak@32: 0.775350
2025-07-21 05:22:34 [DEBUG] XGB iter   0: tr-p-rmse: 0.527890	tr-a-peak@32: 0.903639	tr-rmse: 0.451447	tr-rmse: 0.451447
2025-07-21 05:22:34 [DEBUG] XGB iter  25: tr-p-rmse: 0.191813	tr-a-peak@32: 0.962340	tr-rmse: 0.508698	tr-rmse: 0.508698
2025-07-21 05:22:34 [DEBUG] XGB iter  50: tr-p-rmse: 0.191813	tr-a-peak@32: 0.962340	tr-rmse: 0.508698	tr-rmse: 0.508698
2025-07-21 05:22:34 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.19181	tr-a-peak@32:0.96234	tr-rmse:0.50870	tr-rmse:0.50870 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:25:24 [DEBUG] XGB validation: p-rmse: 0.300622	a-peak@32: 0.784895
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:27:56 [DEBUG] XGB validation: p-rmse: 0.390164	a-peak@32: 0.669682
2025-07-21 05:27:56 [DEBUG] XGB iter   0: tr-p-rmse: 0.511099	tr-a-peak@32: 0.843558	tr-rmse: 0.439965	tr-rmse: 0.439965
2025-07-21 05:27:56 [DEBUG] XGB iter  25: tr-p-rmse: 0.219006	tr-a-peak@32: 0.962615	tr-rmse: 0.499045	tr-rmse: 0.499045
2025-07-21 05:27:56 [DEBUG] XGB iter  50: tr-p-rmse: 0.219006	tr-a-peak@32: 0.962615	tr-rmse: 0.499045	tr-rmse: 0.499045
2025-07-21 05:27:56 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.21901	tr-a-peak@32:0.96261	tr-rmse:0.49905	tr-rmse:0.49905 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:30:28 [DEBUG] XGB validation: p-rmse: 0.357061	a-peak@32: 0.500174
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:33:17 [DEBUG] XGB validation: p-rmse: 0.492915	a-peak@32: 0.504698
2025-07-21 05:33:17 [DEBUG] XGB iter   0: tr-p-rmse: 0.519610	tr-a-peak@32: 0.850067	tr-rmse: 0.436466	tr-rmse: 0.436466
2025-07-21 05:33:17 [DEBUG] XGB iter  25: tr-p-rmse: 0.248119	tr-a-peak@32: 0.980992	tr-rmse: 0.496076	tr-rmse: 0.496076
2025-07-21 05:33:17 [DEBUG] XGB iter  50: tr-p-rmse: 0.248119	tr-a-peak@32: 0.980992	tr-rmse: 0.496076	tr-rmse: 0.496076
2025-07-21 05:33:17 [DEBUG] XGB stopped. Best iteration: [23] tr-p-rmse:0.24812	tr-a-peak@32:0.98099	tr-rmse:0.49608	tr-rmse:0.49608 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:35:52 [DEBUG] XGB validation: p-rmse: 0.326043	a-peak@32: 0.585116
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:38:24 [DEBUG] XGB validation: p-rmse: 0.382255	a-peak@32: 0.647479
2025-07-21 05:38:24 [DEBUG] XGB iter   0: tr-p-rmse: 0.514869	tr-a-peak@32: 0.610111	tr-rmse: 0.304869	tr-rmse: 0.304869
2025-07-21 05:38:24 [DEBUG] XGB iter  25: tr-p-rmse: 0.186987	tr-a-peak@32: 1.000000	tr-rmse: 0.371960	tr-rmse: 0.371960
2025-07-21 05:38:24 [DEBUG] XGB iter  50: tr-p-rmse: 0.186987	tr-a-peak@32: 1.000000	tr-rmse: 0.371960	tr-rmse: 0.371960
2025-07-21 05:38:24 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.18699	tr-a-peak@32:1.00000	tr-rmse:0.37196	tr-rmse:0.37196 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:40:58 [DEBUG] XGB validation: p-rmse: 0.363019	a-peak@32: 0.453681
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:43:26 [DEBUG] XGB validation: p-rmse: 0.384068	a-peak@32: 0.442883
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:45:55 [DEBUG] XGB validation: p-rmse: 0.243379	a-peak@32: 0.722542
2025-07-21 05:45:55 [DEBUG] XGB iter   0: tr-p-rmse: 0.499718	tr-a-peak@32: 0.505569	tr-rmse: 0.299639	tr-rmse: 0.299639
2025-07-21 05:45:55 [DEBUG] XGB iter  25: tr-p-rmse: 0.190771	tr-a-peak@32: 1.000000	tr-rmse: 0.368028	tr-rmse: 0.368028
2025-07-21 05:45:55 [DEBUG] XGB iter  50: tr-p-rmse: 0.190771	tr-a-peak@32: 1.000000	tr-rmse: 0.368028	tr-rmse: 0.368028
2025-07-21 05:45:55 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.19077	tr-a-peak@32:1.00000	tr-rmse:0.36803	tr-rmse:0.36803 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:48:26 [DEBUG] XGB validation: p-rmse: 0.155937	a-peak@32: 0.762702
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(64) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(64) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  half conv2d_nhwc_local[4];
  __shared__ half PadInput_shared[1296];
  __shared__ half weight_shared[2304];
  conv2d_nhwc_local[0] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[2] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[1] = __float2half_rn(0.000000e+00f);
  conv2d_nhwc_local[3] = __float2half_rn(0.000000e+00f);
  half condval;
  if (((56 <= ((int)blockIdx.x)) && (1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((int)threadIdx.x) >> 3))))) {
    condval = inputs[(((((((((int)blockIdx.x) / 56) * 28672) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((int)threadIdx.x) >> 3) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3648)];
  } else {
    condval = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[(((int)threadIdx.x) * 2)] = condval;
  half condval_1;
  if (((56 <= ((int)blockIdx.x)) && (1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((int)threadIdx.x) >> 3))))) {
    condval_1 = inputs[(((((((((int)blockIdx.x) / 56) * 28672) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((int)threadIdx.x) >> 3) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3647)];
  } else {
    condval_1 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 1)] = condval_1;
  half condval_2;
  if (((1 <= (((((int)blockIdx.x) / 56) * 8) + ((((int)threadIdx.x) + 64) / 72))) && (1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 8) % 9))))) {
    condval_2 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 64) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 8) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3648)];
  } else {
    condval_2 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 128)] = condval_2;
  half condval_3;
  if (((1 <= (((((int)blockIdx.x) / 56) * 8) + ((((int)threadIdx.x) + 64) / 72))) && (1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 8) % 9))))) {
    condval_3 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 64) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 8) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3647)];
  } else {
    condval_3 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 129)] = condval_3;
  half condval_4;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 7) % 9)))) {
    condval_4 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 128) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 7) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3648)];
  } else {
    condval_4 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 256)] = condval_4;
  half condval_5;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 7) % 9)))) {
    condval_5 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 128) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 7) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3647)];
  } else {
    condval_5 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 257)] = condval_5;
  half condval_6;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 6) % 9)))) {
    condval_6 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 192) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 6) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3648)];
  } else {
    condval_6 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 384)] = condval_6;
  half condval_7;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 6) % 9)))) {
    condval_7 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 192) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 6) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3647)];
  } else {
    condval_7 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 385)] = condval_7;
  half condval_8;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 5) % 9)))) {
    condval_8 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 256) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 5) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3648)];
  } else {
    condval_8 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 512)] = condval_8;
  half condval_9;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 5) % 9)))) {
    condval_9 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 256) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 5) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3647)];
  } else {
    condval_9 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 513)] = condval_9;
  half condval_10;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 4) % 9)))) {
    condval_10 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 320) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 4) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3648)];
  } else {
    condval_10 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 640)] = condval_10;
  half condval_11;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 4) % 9)))) {
    condval_11 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 320) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 4) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3647)];
  } else {
    condval_11 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 641)] = condval_11;
  half condval_12;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 3) % 9)))) {
    condval_12 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 384) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 3) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3648)];
  } else {
    condval_12 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 768)] = condval_12;
  half condval_13;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 3) % 9)))) {
    condval_13 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 384) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 3) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3647)];
  } else {
    condval_13 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 769)] = condval_13;
  half condval_14;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 2) % 9)))) {
    condval_14 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 448) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 2) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3648)];
  } else {
    condval_14 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 896)] = condval_14;
  half condval_15;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((((int)threadIdx.x) >> 3) + 2) % 9)))) {
    condval_15 = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 448) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((((int)threadIdx.x) >> 3) + 2) % 9) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3647)];
  } else {
    condval_15 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 897)] = condval_15;
  PadInput_shared[((((int)threadIdx.x) * 2) + 1024)] = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 512) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((int)threadIdx.x) >> 3) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3584)];
  PadInput_shared[((((int)threadIdx.x) * 2) + 1025)] = inputs[((((((((((int)blockIdx.x) / 56) * 28672) + (((((int)threadIdx.x) + 512) / 72) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((int)threadIdx.x) >> 3) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) - 3583)];
  half condval_16;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((int)threadIdx.x) >> 3)))) {
    condval_16 = inputs[(((((((((int)blockIdx.x) / 56) * 28672) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((int)threadIdx.x) >> 3) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 25024)];
  } else {
    condval_16 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 1152)] = condval_16;
  half condval_17;
  if ((1 <= ((((((int)blockIdx.x) % 56) >> 3) * 8) + (((int)threadIdx.x) >> 3)))) {
    condval_17 = inputs[(((((((((int)blockIdx.x) / 56) * 28672) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((int)threadIdx.x) >> 3) * 64)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + ((((int)threadIdx.x) & 7) * 2)) + 25025)];
  } else {
    condval_17 = __float2half_rn(0.000000e+00f);
  }
  PadInput_shared[((((int)threadIdx.x) * 2) + 1153)] = condval_17;
  if (((int)threadIdx.x) < 8) {
    PadInput_shared[((((int)threadIdx.x) * 2) + 1280)] = inputs[((((((((int)blockIdx.x) / 56) * 28672) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + (((int)threadIdx.x) * 2)) + 25536)];
    PadInput_shared[((((int)threadIdx.x) * 2) + 1281)] = inputs[((((((((int)blockIdx.x) / 56) * 28672) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + (((((int)blockIdx.x) & 7) >> 1) * 16)) + (((int)threadIdx.x) * 2)) + 25537)];
  }
  *(uint4*)(weight_shared + (((int)threadIdx.x) * 8)) = *(uint4*)(weight + ((((((int)threadIdx.x) >> 1) * 128) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 1) * 8)));
  *(uint4*)(weight_shared + ((((int)threadIdx.x) * 8) + 512)) = *(uint4*)(weight + (((((((int)threadIdx.x) >> 1) * 128) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 4096));
  *(uint4*)(weight_shared + ((((int)threadIdx.x) * 8) + 1024)) = *(uint4*)(weight + (((((((int)threadIdx.x) >> 1) * 128) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 8192));
  *(uint4*)(weight_shared + ((((int)threadIdx.x) * 8) + 1536)) = *(uint4*)(weight + (((((((int)threadIdx.x) >> 1) * 128) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 12288));
  if (((int)threadIdx.x) < 32) {
    *(uint4*)(weight_shared + ((((int)threadIdx.x) * 8) + 2048)) = *(uint4*)(weight + (((((((int)threadIdx.x) >> 1) * 128) + ((((int)blockIdx.x) & 7) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 16384));
  }
  __syncthreads();
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[((((int)threadIdx.x) >> 4) * 288)] * weight_shared[(((int)threadIdx.x) & 15)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 64)] * weight_shared[(((int)threadIdx.x) & 15)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 1)] * weight_shared[((((int)threadIdx.x) & 15) + 16)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 65)] * weight_shared[((((int)threadIdx.x) & 15) + 16)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 2)] * weight_shared[((((int)threadIdx.x) & 15) + 32)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 66)] * weight_shared[((((int)threadIdx.x) & 15) + 32)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 3)] * weight_shared[((((int)threadIdx.x) & 15) + 48)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 67)] * weight_shared[((((int)threadIdx.x) & 15) + 48)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 4)] * weight_shared[((((int)threadIdx.x) & 15) + 64)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 68)] * weight_shared[((((int)threadIdx.x) & 15) + 64)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 5)] * weight_shared[((((int)threadIdx.x) & 15) + 80)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 69)] * weight_shared[((((int)threadIdx.x) & 15) + 80)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 6)] * weight_shared[((((int)threadIdx.x) & 15) + 96)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 70)] * weight_shared[((((int)threadIdx.x) & 15) + 96)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 7)] * weight_shared[((((int)threadIdx.x) & 15) + 112)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 71)] * weight_shared[((((int)threadIdx.x) & 15) + 112)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 8)] * weight_shared[((((int)threadIdx.x) & 15) + 128)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 72)] * weight_shared[((((int)threadIdx.x) & 15) + 128)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 9)] * weight_shared[((((int)threadIdx.x) & 15) + 144)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 73)] * weight_shared[((((int)threadIdx.x) & 15) + 144)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 10)] * weight_shared[((((int)threadIdx.x) & 15) + 160)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 74)] * weight_shared[((((int)threadIdx.x) & 15) + 160)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 11)] * weight_shared[((((int)threadIdx.x) & 15) + 176)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 75)] * weight_shared[((((int)threadIdx.x) & 15) + 176)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 12)] * weight_shared[((((int)threadIdx.x) & 15) + 192)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 76)] * weight_shared[((((int)threadIdx.x) & 15) + 192)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 13)] * weight_shared[((((int)threadIdx.x) & 15) + 208)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 77)] * weight_shared[((((int)threadIdx.x) & 15) + 208)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 14)] * weight_shared[((((int)threadIdx.x) & 15) + 224)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 78)] * weight_shared[((((int)threadIdx.x) & 15) + 224)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 15)] * weight_shared[((((int)threadIdx.x) & 15) + 240)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 79)] * weight_shared[((((int)threadIdx.x) & 15) + 240)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 144)] * weight_shared[((((int)threadIdx.x) & 15) + 768)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 208)] * weight_shared[((((int)threadIdx.x) & 15) + 768)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 145)] * weight_shared[((((int)threadIdx.x) & 15) + 784)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 209)] * weight_shared[((((int)threadIdx.x) & 15) + 784)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 146)] * weight_shared[((((int)threadIdx.x) & 15) + 800)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 210)] * weight_shared[((((int)threadIdx.x) & 15) + 800)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 147)] * weight_shared[((((int)threadIdx.x) & 15) + 816)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 211)] * weight_shared[((((int)threadIdx.x) & 15) + 816)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 148)] * weight_shared[((((int)threadIdx.x) & 15) + 832)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 212)] * weight_shared[((((int)threadIdx.x) & 15) + 832)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 149)] * weight_shared[((((int)threadIdx.x) & 15) + 848)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 213)] * weight_shared[((((int)threadIdx.x) & 15) + 848)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 150)] * weight_shared[((((int)threadIdx.x) & 15) + 864)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 214)] * weight_shared[((((int)threadIdx.x) & 15) + 864)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 151)] * weight_shared[((((int)threadIdx.x) & 15) + 880)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 215)] * weight_shared[((((int)threadIdx.x) & 15) + 880)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 152)] * weight_shared[((((int)threadIdx.x) & 15) + 896)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 216)] * weight_shared[((((int)threadIdx.x) & 15) + 896)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 153)] * weight_shared[((((int)threadIdx.x) & 15) + 912)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 217)] * weight_shared[((((int)threadIdx.x) & 15) + 912)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 154)] * weight_shared[((((int)threadIdx.x) & 15) + 928)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 218)] * weight_shared[((((int)threadIdx.x) & 15) + 928)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 155)] * weight_shared[((((int)threadIdx.x) & 15) + 944)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 219)] * weight_shared[((((int)threadIdx.x) & 15) + 944)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 156)] * weight_shared[((((int)threadIdx.x) & 15) + 960)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 220)] * weight_shared[((((int)threadIdx.x) & 15) + 960)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 157)] * weight_shared[((((int)threadIdx.x) & 15) + 976)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 221)] * weight_shared[((((int)threadIdx.x) & 15) + 976)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 158)] * weight_shared[((((int)threadIdx.x) & 15) + 992)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 222)] * weight_shared[((((int)threadIdx.x) & 15) + 992)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 159)] * weight_shared[((((int)threadIdx.x) & 15) + 1008)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 223)] * weight_shared[((((int)threadIdx.x) & 15) + 1008)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 288)] * weight_shared[((((int)threadIdx.x) & 15) + 1536)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 352)] * weight_shared[((((int)threadIdx.x) & 15) + 1536)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 289)] * weight_shared[((((int)threadIdx.x) & 15) + 1552)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 353)] * weight_shared[((((int)threadIdx.x) & 15) + 1552)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 290)] * weight_shared[((((int)threadIdx.x) & 15) + 1568)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 354)] * weight_shared[((((int)threadIdx.x) & 15) + 1568)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 291)] * weight_shared[((((int)threadIdx.x) & 15) + 1584)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 355)] * weight_shared[((((int)threadIdx.x) & 15) + 1584)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 292)] * weight_shared[((((int)threadIdx.x) & 15) + 1600)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 356)] * weight_shared[((((int)threadIdx.x) & 15) + 1600)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 293)] * weight_shared[((((int)threadIdx.x) & 15) + 1616)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 357)] * weight_shared[((((int)threadIdx.x) & 15) + 1616)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 294)] * weight_shared[((((int)threadIdx.x) & 15) + 1632)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 358)] * weight_shared[((((int)threadIdx.x) & 15) + 1632)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 295)] * weight_shared[((((int)threadIdx.x) & 15) + 1648)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 359)] * weight_shared[((((int)threadIdx.x) & 15) + 1648)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 296)] * weight_shared[((((int)threadIdx.x) & 15) + 1664)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 360)] * weight_shared[((((int)threadIdx.x) & 15) + 1664)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 297)] * weight_shared[((((int)threadIdx.x) & 15) + 1680)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 361)] * weight_shared[((((int)threadIdx.x) & 15) + 1680)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 298)] * weight_shared[((((int)threadIdx.x) & 15) + 1696)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 362)] * weight_shared[((((int)threadIdx.x) & 15) + 1696)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 299)] * weight_shared[((((int)threadIdx.x) & 15) + 1712)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 363)] * weight_shared[((((int)threadIdx.x) & 15) + 1712)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 300)] * weight_shared[((((int)threadIdx.x) & 15) + 1728)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 364)] * weight_shared[((((int)threadIdx.x) & 15) + 1728)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 301)] * weight_shared[((((int)threadIdx.x) & 15) + 1744)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 365)] * weight_shared[((((int)threadIdx.x) & 15) + 1744)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 302)] * weight_shared[((((int)threadIdx.x) & 15) + 1760)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 366)] * weight_shared[((((int)threadIdx.x) & 15) + 1760)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 303)] * weight_shared[((((int)threadIdx.x) & 15) + 1776)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 367)] * weight_shared[((((int)threadIdx.x) & 15) + 1776)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 32)] * weight_shared[(((int)threadIdx.x) & 15)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 96)] * weight_shared[(((int)threadIdx.x) & 15)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 33)] * weight_shared[((((int)threadIdx.x) & 15) + 16)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 97)] * weight_shared[((((int)threadIdx.x) & 15) + 16)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 34)] * weight_shared[((((int)threadIdx.x) & 15) + 32)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 98)] * weight_shared[((((int)threadIdx.x) & 15) + 32)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 35)] * weight_shared[((((int)threadIdx.x) & 15) + 48)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 99)] * weight_shared[((((int)threadIdx.x) & 15) + 48)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 36)] * weight_shared[((((int)threadIdx.x) & 15) + 64)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 100)] * weight_shared[((((int)threadIdx.x) & 15) + 64)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 37)] * weight_shared[((((int)threadIdx.x) & 15) + 80)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 101)] * weight_shared[((((int)threadIdx.x) & 15) + 80)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 38)] * weight_shared[((((int)threadIdx.x) & 15) + 96)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 102)] * weight_shared[((((int)threadIdx.x) & 15) + 96)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 39)] * weight_shared[((((int)threadIdx.x) & 15) + 112)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 103)] * weight_shared[((((int)threadIdx.x) & 15) + 112)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 40)] * weight_shared[((((int)threadIdx.x) & 15) + 128)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 104)] * weight_shared[((((int)threadIdx.x) & 15) + 128)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 41)] * weight_shared[((((int)threadIdx.x) & 15) + 144)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 105)] * weight_shared[((((int)threadIdx.x) & 15) + 144)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 42)] * weight_shared[((((int)threadIdx.x) & 15) + 160)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 106)] * weight_shared[((((int)threadIdx.x) & 15) + 160)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 43)] * weight_shared[((((int)threadIdx.x) & 15) + 176)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 107)] * weight_shared[((((int)threadIdx.x) & 15) + 176)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 44)] * weight_shared[((((int)threadIdx.x) & 15) + 192)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 108)] * weight_shared[((((int)threadIdx.x) & 15) + 192)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 45)] * weight_shared[((((int)threadIdx.x) & 15) + 208)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 109)] * weight_shared[((((int)threadIdx.x) & 15) + 208)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 46)] * weight_shared[((((int)threadIdx.x) & 15) + 224)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 110)] * weight_shared[((((int)threadIdx.x) & 15) + 224)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 47)] * weight_shared[((((int)threadIdx.x) & 15) + 240)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 111)] * weight_shared[((((int)threadIdx.x) & 15) + 240)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 176)] * weight_shared[((((int)threadIdx.x) & 15) + 768)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 240)] * weight_shared[((((int)threadIdx.x) & 15) + 768)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 177)] * weight_shared[((((int)threadIdx.x) & 15) + 784)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 241)] * weight_shared[((((int)threadIdx.x) & 15) + 784)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 178)] * weight_shared[((((int)threadIdx.x) & 15) + 800)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 242)] * weight_shared[((((int)threadIdx.x) & 15) + 800)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 179)] * weight_shared[((((int)threadIdx.x) & 15) + 816)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 243)] * weight_shared[((((int)threadIdx.x) & 15) + 816)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 180)] * weight_shared[((((int)threadIdx.x) & 15) + 832)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 244)] * weight_shared[((((int)threadIdx.x) & 15) + 832)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 181)] * weight_shared[((((int)threadIdx.x) & 15) + 848)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 245)] * weight_shared[((((int)threadIdx.x) & 15) + 848)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 182)] * weight_shared[((((int)threadIdx.x) & 15) + 864)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 246)] * weight_shared[((((int)threadIdx.x) & 15) + 864)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 183)] * weight_shared[((((int)threadIdx.x) & 15) + 880)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 247)] * weight_shared[((((int)threadIdx.x) & 15) + 880)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 184)] * weight_shared[((((int)threadIdx.x) & 15) + 896)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 248)] * weight_shared[((((int)threadIdx.x) & 15) + 896)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 185)] * weight_shared[((((int)threadIdx.x) & 15) + 912)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 249)] * weight_shared[((((int)threadIdx.x) & 15) + 912)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 186)] * weight_shared[((((int)threadIdx.x) & 15) + 928)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 250)] * weight_shared[((((int)threadIdx.x) & 15) + 928)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 187)] * weight_shared[((((int)threadIdx.x) & 15) + 944)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 251)] * weight_shared[((((int)threadIdx.x) & 15) + 944)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 188)] * weight_shared[((((int)threadIdx.x) & 15) + 960)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 252)] * weight_shared[((((int)threadIdx.x) & 15) + 960)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 189)] * weight_shared[((((int)threadIdx.x) & 15) + 976)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 253)] * weight_shared[((((int)threadIdx.x) & 15) + 976)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 190)] * weight_shared[((((int)threadIdx.x) & 15) + 992)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 254)] * weight_shared[((((int)threadIdx.x) & 15) + 992)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 191)] * weight_shared[((((int)threadIdx.x) & 15) + 1008)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 255)] * weight_shared[((((int)threadIdx.x) & 15) + 1008)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 320)] * weight_shared[((((int)threadIdx.x) & 15) + 1536)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 384)] * weight_shared[((((int)threadIdx.x) & 15) + 1536)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 321)] * weight_shared[((((int)threadIdx.x) & 15) + 1552)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 385)] * weight_shared[((((int)threadIdx.x) & 15) + 1552)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 322)] * weight_shared[((((int)threadIdx.x) & 15) + 1568)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 386)] * weight_shared[((((int)threadIdx.x) & 15) + 1568)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 323)] * weight_shared[((((int)threadIdx.x) & 15) + 1584)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 387)] * weight_shared[((((int)threadIdx.x) & 15) + 1584)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 324)] * weight_shared[((((int)threadIdx.x) & 15) + 1600)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 388)] * weight_shared[((((int)threadIdx.x) & 15) + 1600)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 325)] * weight_shared[((((int)threadIdx.x) & 15) + 1616)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 389)] * weight_shared[((((int)threadIdx.x) & 15) + 1616)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 326)] * weight_shared[((((int)threadIdx.x) & 15) + 1632)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 390)] * weight_shared[((((int)threadIdx.x) & 15) + 1632)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 327)] * weight_shared[((((int)threadIdx.x) & 15) + 1648)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 391)] * weight_shared[((((int)threadIdx.x) & 15) + 1648)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 328)] * weight_shared[((((int)threadIdx.x) & 15) + 1664)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 392)] * weight_shared[((((int)threadIdx.x) & 15) + 1664)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 329)] * weight_shared[((((int)threadIdx.x) & 15) + 1680)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 393)] * weight_shared[((((int)threadIdx.x) & 15) + 1680)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 330)] * weight_shared[((((int)threadIdx.x) & 15) + 1696)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 394)] * weight_shared[((((int)threadIdx.x) & 15) + 1696)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 331)] * weight_shared[((((int)threadIdx.x) & 15) + 1712)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 395)] * weight_shared[((((int)threadIdx.x) & 15) + 1712)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 332)] * weight_shared[((((int)threadIdx.x) & 15) + 1728)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 396)] * weight_shared[((((int)threadIdx.x) & 15) + 1728)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 333)] * weight_shared[((((int)threadIdx.x) & 15) + 1744)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 397)] * weight_shared[((((int)threadIdx.x) & 15) + 1744)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 334)] * weight_shared[((((int)threadIdx.x) & 15) + 1760)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 398)] * weight_shared[((((int)threadIdx.x) & 15) + 1760)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 335)] * weight_shared[((((int)threadIdx.x) & 15) + 1776)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 399)] * weight_shared[((((int)threadIdx.x) & 15) + 1776)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 16)] * weight_shared[((((int)threadIdx.x) & 15) + 256)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 80)] * weight_shared[((((int)threadIdx.x) & 15) + 256)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 17)] * weight_shared[((((int)threadIdx.x) & 15) + 272)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 81)] * weight_shared[((((int)threadIdx.x) & 15) + 272)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 18)] * weight_shared[((((int)threadIdx.x) & 15) + 288)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 82)] * weight_shared[((((int)threadIdx.x) & 15) + 288)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 19)] * weight_shared[((((int)threadIdx.x) & 15) + 304)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 83)] * weight_shared[((((int)threadIdx.x) & 15) + 304)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 20)] * weight_shared[((((int)threadIdx.x) & 15) + 320)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 84)] * weight_shared[((((int)threadIdx.x) & 15) + 320)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 21)] * weight_shared[((((int)threadIdx.x) & 15) + 336)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 85)] * weight_shared[((((int)threadIdx.x) & 15) + 336)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 22)] * weight_shared[((((int)threadIdx.x) & 15) + 352)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 86)] * weight_shared[((((int)threadIdx.x) & 15) + 352)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 23)] * weight_shared[((((int)threadIdx.x) & 15) + 368)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 87)] * weight_shared[((((int)threadIdx.x) & 15) + 368)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 24)] * weight_shared[((((int)threadIdx.x) & 15) + 384)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 88)] * weight_shared[((((int)threadIdx.x) & 15) + 384)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 25)] * weight_shared[((((int)threadIdx.x) & 15) + 400)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 89)] * weight_shared[((((int)threadIdx.x) & 15) + 400)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 26)] * weight_shared[((((int)threadIdx.x) & 15) + 416)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 90)] * weight_shared[((((int)threadIdx.x) & 15) + 416)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 27)] * weight_shared[((((int)threadIdx.x) & 15) + 432)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 91)] * weight_shared[((((int)threadIdx.x) & 15) + 432)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 28)] * weight_shared[((((int)threadIdx.x) & 15) + 448)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 92)] * weight_shared[((((int)threadIdx.x) & 15) + 448)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 29)] * weight_shared[((((int)threadIdx.x) & 15) + 464)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 93)] * weight_shared[((((int)threadIdx.x) & 15) + 464)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 30)] * weight_shared[((((int)threadIdx.x) & 15) + 480)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 94)] * weight_shared[((((int)threadIdx.x) & 15) + 480)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 31)] * weight_shared[((((int)threadIdx.x) & 15) + 496)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 95)] * weight_shared[((((int)threadIdx.x) & 15) + 496)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 160)] * weight_shared[((((int)threadIdx.x) & 15) + 1024)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 224)] * weight_shared[((((int)threadIdx.x) & 15) + 1024)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 161)] * weight_shared[((((int)threadIdx.x) & 15) + 1040)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 225)] * weight_shared[((((int)threadIdx.x) & 15) + 1040)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 162)] * weight_shared[((((int)threadIdx.x) & 15) + 1056)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 226)] * weight_shared[((((int)threadIdx.x) & 15) + 1056)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 163)] * weight_shared[((((int)threadIdx.x) & 15) + 1072)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 227)] * weight_shared[((((int)threadIdx.x) & 15) + 1072)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 164)] * weight_shared[((((int)threadIdx.x) & 15) + 1088)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 228)] * weight_shared[((((int)threadIdx.x) & 15) + 1088)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 165)] * weight_shared[((((int)threadIdx.x) & 15) + 1104)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 229)] * weight_shared[((((int)threadIdx.x) & 15) + 1104)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 166)] * weight_shared[((((int)threadIdx.x) & 15) + 1120)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 230)] * weight_shared[((((int)threadIdx.x) & 15) + 1120)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 167)] * weight_shared[((((int)threadIdx.x) & 15) + 1136)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 231)] * weight_shared[((((int)threadIdx.x) & 15) + 1136)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 168)] * weight_shared[((((int)threadIdx.x) & 15) + 1152)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 232)] * weight_shared[((((int)threadIdx.x) & 15) + 1152)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 169)] * weight_shared[((((int)threadIdx.x) & 15) + 1168)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 233)] * weight_shared[((((int)threadIdx.x) & 15) + 1168)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 170)] * weight_shared[((((int)threadIdx.x) & 15) + 1184)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 234)] * weight_shared[((((int)threadIdx.x) & 15) + 1184)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 171)] * weight_shared[((((int)threadIdx.x) & 15) + 1200)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 235)] * weight_shared[((((int)threadIdx.x) & 15) + 1200)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 172)] * weight_shared[((((int)threadIdx.x) & 15) + 1216)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 236)] * weight_shared[((((int)threadIdx.x) & 15) + 1216)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 173)] * weight_shared[((((int)threadIdx.x) & 15) + 1232)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 237)] * weight_shared[((((int)threadIdx.x) & 15) + 1232)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 174)] * weight_shared[((((int)threadIdx.x) & 15) + 1248)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 238)] * weight_shared[((((int)threadIdx.x) & 15) + 1248)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 175)] * weight_shared[((((int)threadIdx.x) & 15) + 1264)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 239)] * weight_shared[((((int)threadIdx.x) & 15) + 1264)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 304)] * weight_shared[((((int)threadIdx.x) & 15) + 1792)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 368)] * weight_shared[((((int)threadIdx.x) & 15) + 1792)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 305)] * weight_shared[((((int)threadIdx.x) & 15) + 1808)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 369)] * weight_shared[((((int)threadIdx.x) & 15) + 1808)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 306)] * weight_shared[((((int)threadIdx.x) & 15) + 1824)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 370)] * weight_shared[((((int)threadIdx.x) & 15) + 1824)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 307)] * weight_shared[((((int)threadIdx.x) & 15) + 1840)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 371)] * weight_shared[((((int)threadIdx.x) & 15) + 1840)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 308)] * weight_shared[((((int)threadIdx.x) & 15) + 1856)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 372)] * weight_shared[((((int)threadIdx.x) & 15) + 1856)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 309)] * weight_shared[((((int)threadIdx.x) & 15) + 1872)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 373)] * weight_shared[((((int)threadIdx.x) & 15) + 1872)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 310)] * weight_shared[((((int)threadIdx.x) & 15) + 1888)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 374)] * weight_shared[((((int)threadIdx.x) & 15) + 1888)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 311)] * weight_shared[((((int)threadIdx.x) & 15) + 1904)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 375)] * weight_shared[((((int)threadIdx.x) & 15) + 1904)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 312)] * weight_shared[((((int)threadIdx.x) & 15) + 1920)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 376)] * weight_shared[((((int)threadIdx.x) & 15) + 1920)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 313)] * weight_shared[((((int)threadIdx.x) & 15) + 1936)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 377)] * weight_shared[((((int)threadIdx.x) & 15) + 1936)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 314)] * weight_shared[((((int)threadIdx.x) & 15) + 1952)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 378)] * weight_shared[((((int)threadIdx.x) & 15) + 1952)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 315)] * weight_shared[((((int)threadIdx.x) & 15) + 1968)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 379)] * weight_shared[((((int)threadIdx.x) & 15) + 1968)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 316)] * weight_shared[((((int)threadIdx.x) & 15) + 1984)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 380)] * weight_shared[((((int)threadIdx.x) & 15) + 1984)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 317)] * weight_shared[((((int)threadIdx.x) & 15) + 2000)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 381)] * weight_shared[((((int)threadIdx.x) & 15) + 2000)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 318)] * weight_shared[((((int)threadIdx.x) & 15) + 2016)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 382)] * weight_shared[((((int)threadIdx.x) & 15) + 2016)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 319)] * weight_shared[((((int)threadIdx.x) & 15) + 2032)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 383)] * weight_shared[((((int)threadIdx.x) & 15) + 2032)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 48)] * weight_shared[((((int)threadIdx.x) & 15) + 256)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 112)] * weight_shared[((((int)threadIdx.x) & 15) + 256)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 49)] * weight_shared[((((int)threadIdx.x) & 15) + 272)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 113)] * weight_shared[((((int)threadIdx.x) & 15) + 272)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 50)] * weight_shared[((((int)threadIdx.x) & 15) + 288)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 114)] * weight_shared[((((int)threadIdx.x) & 15) + 288)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 51)] * weight_shared[((((int)threadIdx.x) & 15) + 304)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 115)] * weight_shared[((((int)threadIdx.x) & 15) + 304)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 52)] * weight_shared[((((int)threadIdx.x) & 15) + 320)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 116)] * weight_shared[((((int)threadIdx.x) & 15) + 320)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 53)] * weight_shared[((((int)threadIdx.x) & 15) + 336)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 117)] * weight_shared[((((int)threadIdx.x) & 15) + 336)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 54)] * weight_shared[((((int)threadIdx.x) & 15) + 352)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 118)] * weight_shared[((((int)threadIdx.x) & 15) + 352)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 55)] * weight_shared[((((int)threadIdx.x) & 15) + 368)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 119)] * weight_shared[((((int)threadIdx.x) & 15) + 368)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 56)] * weight_shared[((((int)threadIdx.x) & 15) + 384)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 120)] * weight_shared[((((int)threadIdx.x) & 15) + 384)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 57)] * weight_shared[((((int)threadIdx.x) & 15) + 400)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 121)] * weight_shared[((((int)threadIdx.x) & 15) + 400)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 58)] * weight_shared[((((int)threadIdx.x) & 15) + 416)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 122)] * weight_shared[((((int)threadIdx.x) & 15) + 416)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 59)] * weight_shared[((((int)threadIdx.x) & 15) + 432)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 123)] * weight_shared[((((int)threadIdx.x) & 15) + 432)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 60)] * weight_shared[((((int)threadIdx.x) & 15) + 448)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 124)] * weight_shared[((((int)threadIdx.x) & 15) + 448)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 61)] * weight_shared[((((int)threadIdx.x) & 15) + 464)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 125)] * weight_shared[((((int)threadIdx.x) & 15) + 464)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 62)] * weight_shared[((((int)threadIdx.x) & 15) + 480)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 126)] * weight_shared[((((int)threadIdx.x) & 15) + 480)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 63)] * weight_shared[((((int)threadIdx.x) & 15) + 496)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 127)] * weight_shared[((((int)threadIdx.x) & 15) + 496)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 192)] * weight_shared[((((int)threadIdx.x) & 15) + 1024)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 256)] * weight_shared[((((int)threadIdx.x) & 15) + 1024)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 193)] * weight_shared[((((int)threadIdx.x) & 15) + 1040)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 257)] * weight_shared[((((int)threadIdx.x) & 15) + 1040)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 194)] * weight_shared[((((int)threadIdx.x) & 15) + 1056)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 258)] * weight_shared[((((int)threadIdx.x) & 15) + 1056)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 195)] * weight_shared[((((int)threadIdx.x) & 15) + 1072)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 259)] * weight_shared[((((int)threadIdx.x) & 15) + 1072)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 196)] * weight_shared[((((int)threadIdx.x) & 15) + 1088)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 260)] * weight_shared[((((int)threadIdx.x) & 15) + 1088)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 197)] * weight_shared[((((int)threadIdx.x) & 15) + 1104)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 261)] * weight_shared[((((int)threadIdx.x) & 15) + 1104)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 198)] * weight_shared[((((int)threadIdx.x) & 15) + 1120)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 262)] * weight_shared[((((int)threadIdx.x) & 15) + 1120)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 199)] * weight_shared[((((int)threadIdx.x) & 15) + 1136)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 263)] * weight_shared[((((int)threadIdx.x) & 15) + 1136)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 200)] * weight_shared[((((int)threadIdx.x) & 15) + 1152)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 264)] * weight_shared[((((int)threadIdx.x) & 15) + 1152)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 201)] * weight_shared[((((int)threadIdx.x) & 15) + 1168)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 265)] * weight_shared[((((int)threadIdx.x) & 15) + 1168)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 202)] * weight_shared[((((int)threadIdx.x) & 15) + 1184)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 266)] * weight_shared[((((int)threadIdx.x) & 15) + 1184)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 203)] * weight_shared[((((int)threadIdx.x) & 15) + 1200)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 267)] * weight_shared[((((int)threadIdx.x) & 15) + 1200)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 204)] * weight_shared[((((int)threadIdx.x) & 15) + 1216)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 268)] * weight_shared[((((int)threadIdx.x) & 15) + 1216)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 205)] * weight_shared[((((int)threadIdx.x) & 15) + 1232)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 269)] * weight_shared[((((int)threadIdx.x) & 15) + 1232)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 206)] * weight_shared[((((int)threadIdx.x) & 15) + 1248)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 270)] * weight_shared[((((int)threadIdx.x) & 15) + 1248)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 207)] * weight_shared[((((int)threadIdx.x) & 15) + 1264)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 271)] * weight_shared[((((int)threadIdx.x) & 15) + 1264)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 336)] * weight_shared[((((int)threadIdx.x) & 15) + 1792)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 400)] * weight_shared[((((int)threadIdx.x) & 15) + 1792)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 337)] * weight_shared[((((int)threadIdx.x) & 15) + 1808)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 401)] * weight_shared[((((int)threadIdx.x) & 15) + 1808)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 338)] * weight_shared[((((int)threadIdx.x) & 15) + 1824)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 402)] * weight_shared[((((int)threadIdx.x) & 15) + 1824)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 339)] * weight_shared[((((int)threadIdx.x) & 15) + 1840)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 403)] * weight_shared[((((int)threadIdx.x) & 15) + 1840)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 340)] * weight_shared[((((int)threadIdx.x) & 15) + 1856)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 404)] * weight_shared[((((int)threadIdx.x) & 15) + 1856)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 341)] * weight_shared[((((int)threadIdx.x) & 15) + 1872)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 405)] * weight_shared[((((int)threadIdx.x) & 15) + 1872)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 342)] * weight_shared[((((int)threadIdx.x) & 15) + 1888)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 406)] * weight_shared[((((int)threadIdx.x) & 15) + 1888)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 343)] * weight_shared[((((int)threadIdx.x) & 15) + 1904)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 407)] * weight_shared[((((int)threadIdx.x) & 15) + 1904)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 344)] * weight_shared[((((int)threadIdx.x) & 15) + 1920)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 408)] * weight_shared[((((int)threadIdx.x) & 15) + 1920)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 345)] * weight_shared[((((int)threadIdx.x) & 15) + 1936)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 409)] * weight_shared[((((int)threadIdx.x) & 15) + 1936)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 346)] * weight_shared[((((int)threadIdx.x) & 15) + 1952)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 410)] * weight_shared[((((int)threadIdx.x) & 15) + 1952)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 347)] * weight_shared[((((int)threadIdx.x) & 15) + 1968)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 411)] * weight_shared[((((int)threadIdx.x) & 15) + 1968)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 348)] * weight_shared[((((int)threadIdx.x) & 15) + 1984)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 412)] * weight_shared[((((int)threadIdx.x) & 15) + 1984)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 349)] * weight_shared[((((int)threadIdx.x) & 15) + 2000)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 413)] * weight_shared[((((int)threadIdx.x) & 15) + 2000)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 350)] * weight_shared[((((int)threadIdx.x) & 15) + 2016)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 414)] * weight_shared[((((int)threadIdx.x) & 15) + 2016)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 351)] * weight_shared[((((int)threadIdx.x) & 15) + 2032)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 415)] * weight_shared[((((int)threadIdx.x) & 15) + 2032)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 32)] * weight_shared[((((int)threadIdx.x) & 15) + 512)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 96)] * weight_shared[((((int)threadIdx.x) & 15) + 512)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 33)] * weight_shared[((((int)threadIdx.x) & 15) + 528)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 97)] * weight_shared[((((int)threadIdx.x) & 15) + 528)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 34)] * weight_shared[((((int)threadIdx.x) & 15) + 544)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 98)] * weight_shared[((((int)threadIdx.x) & 15) + 544)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 35)] * weight_shared[((((int)threadIdx.x) & 15) + 560)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 99)] * weight_shared[((((int)threadIdx.x) & 15) + 560)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 36)] * weight_shared[((((int)threadIdx.x) & 15) + 576)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 100)] * weight_shared[((((int)threadIdx.x) & 15) + 576)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 37)] * weight_shared[((((int)threadIdx.x) & 15) + 592)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 101)] * weight_shared[((((int)threadIdx.x) & 15) + 592)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 38)] * weight_shared[((((int)threadIdx.x) & 15) + 608)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 102)] * weight_shared[((((int)threadIdx.x) & 15) + 608)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 39)] * weight_shared[((((int)threadIdx.x) & 15) + 624)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 103)] * weight_shared[((((int)threadIdx.x) & 15) + 624)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 40)] * weight_shared[((((int)threadIdx.x) & 15) + 640)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 104)] * weight_shared[((((int)threadIdx.x) & 15) + 640)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 41)] * weight_shared[((((int)threadIdx.x) & 15) + 656)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 105)] * weight_shared[((((int)threadIdx.x) & 15) + 656)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 42)] * weight_shared[((((int)threadIdx.x) & 15) + 672)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 106)] * weight_shared[((((int)threadIdx.x) & 15) + 672)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 43)] * weight_shared[((((int)threadIdx.x) & 15) + 688)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 107)] * weight_shared[((((int)threadIdx.x) & 15) + 688)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 44)] * weight_shared[((((int)threadIdx.x) & 15) + 704)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 108)] * weight_shared[((((int)threadIdx.x) & 15) + 704)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 45)] * weight_shared[((((int)threadIdx.x) & 15) + 720)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 109)] * weight_shared[((((int)threadIdx.x) & 15) + 720)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 46)] * weight_shared[((((int)threadIdx.x) & 15) + 736)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 110)] * weight_shared[((((int)threadIdx.x) & 15) + 736)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 47)] * weight_shared[((((int)threadIdx.x) & 15) + 752)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 111)] * weight_shared[((((int)threadIdx.x) & 15) + 752)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 176)] * weight_shared[((((int)threadIdx.x) & 15) + 1280)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 240)] * weight_shared[((((int)threadIdx.x) & 15) + 1280)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 177)] * weight_shared[((((int)threadIdx.x) & 15) + 1296)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 241)] * weight_shared[((((int)threadIdx.x) & 15) + 1296)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 178)] * weight_shared[((((int)threadIdx.x) & 15) + 1312)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 242)] * weight_shared[((((int)threadIdx.x) & 15) + 1312)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 179)] * weight_shared[((((int)threadIdx.x) & 15) + 1328)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 243)] * weight_shared[((((int)threadIdx.x) & 15) + 1328)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 180)] * weight_shared[((((int)threadIdx.x) & 15) + 1344)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 244)] * weight_shared[((((int)threadIdx.x) & 15) + 1344)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 181)] * weight_shared[((((int)threadIdx.x) & 15) + 1360)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 245)] * weight_shared[((((int)threadIdx.x) & 15) + 1360)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 182)] * weight_shared[((((int)threadIdx.x) & 15) + 1376)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 246)] * weight_shared[((((int)threadIdx.x) & 15) + 1376)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 183)] * weight_shared[((((int)threadIdx.x) & 15) + 1392)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 247)] * weight_shared[((((int)threadIdx.x) & 15) + 1392)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 184)] * weight_shared[((((int)threadIdx.x) & 15) + 1408)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 248)] * weight_shared[((((int)threadIdx.x) & 15) + 1408)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 185)] * weight_shared[((((int)threadIdx.x) & 15) + 1424)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 249)] * weight_shared[((((int)threadIdx.x) & 15) + 1424)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 186)] * weight_shared[((((int)threadIdx.x) & 15) + 1440)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 250)] * weight_shared[((((int)threadIdx.x) & 15) + 1440)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 187)] * weight_shared[((((int)threadIdx.x) & 15) + 1456)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 251)] * weight_shared[((((int)threadIdx.x) & 15) + 1456)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 188)] * weight_shared[((((int)threadIdx.x) & 15) + 1472)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 252)] * weight_shared[((((int)threadIdx.x) & 15) + 1472)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 189)] * weight_shared[((((int)threadIdx.x) & 15) + 1488)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 253)] * weight_shared[((((int)threadIdx.x) & 15) + 1488)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 190)] * weight_shared[((((int)threadIdx.x) & 15) + 1504)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 254)] * weight_shared[((((int)threadIdx.x) & 15) + 1504)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 191)] * weight_shared[((((int)threadIdx.x) & 15) + 1520)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 255)] * weight_shared[((((int)threadIdx.x) & 15) + 1520)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 320)] * weight_shared[((((int)threadIdx.x) & 15) + 2048)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 384)] * weight_shared[((((int)threadIdx.x) & 15) + 2048)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 321)] * weight_shared[((((int)threadIdx.x) & 15) + 2064)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 385)] * weight_shared[((((int)threadIdx.x) & 15) + 2064)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 322)] * weight_shared[((((int)threadIdx.x) & 15) + 2080)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 386)] * weight_shared[((((int)threadIdx.x) & 15) + 2080)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 323)] * weight_shared[((((int)threadIdx.x) & 15) + 2096)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 387)] * weight_shared[((((int)threadIdx.x) & 15) + 2096)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 324)] * weight_shared[((((int)threadIdx.x) & 15) + 2112)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 388)] * weight_shared[((((int)threadIdx.x) & 15) + 2112)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 325)] * weight_shared[((((int)threadIdx.x) & 15) + 2128)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 389)] * weight_shared[((((int)threadIdx.x) & 15) + 2128)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 326)] * weight_shared[((((int)threadIdx.x) & 15) + 2144)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 390)] * weight_shared[((((int)threadIdx.x) & 15) + 2144)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 327)] * weight_shared[((((int)threadIdx.x) & 15) + 2160)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 391)] * weight_shared[((((int)threadIdx.x) & 15) + 2160)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 328)] * weight_shared[((((int)threadIdx.x) & 15) + 2176)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 392)] * weight_shared[((((int)threadIdx.x) & 15) + 2176)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 329)] * weight_shared[((((int)threadIdx.x) & 15) + 2192)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 393)] * weight_shared[((((int)threadIdx.x) & 15) + 2192)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 330)] * weight_shared[((((int)threadIdx.x) & 15) + 2208)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 394)] * weight_shared[((((int)threadIdx.x) & 15) + 2208)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 331)] * weight_shared[((((int)threadIdx.x) & 15) + 2224)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 395)] * weight_shared[((((int)threadIdx.x) & 15) + 2224)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 332)] * weight_shared[((((int)threadIdx.x) & 15) + 2240)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 396)] * weight_shared[((((int)threadIdx.x) & 15) + 2240)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 333)] * weight_shared[((((int)threadIdx.x) & 15) + 2256)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 397)] * weight_shared[((((int)threadIdx.x) & 15) + 2256)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 334)] * weight_shared[((((int)threadIdx.x) & 15) + 2272)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 398)] * weight_shared[((((int)threadIdx.x) & 15) + 2272)]));
  conv2d_nhwc_local[0] = (conv2d_nhwc_local[0] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 335)] * weight_shared[((((int)threadIdx.x) & 15) + 2288)]));
  conv2d_nhwc_local[2] = (conv2d_nhwc_local[2] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 399)] * weight_shared[((((int)threadIdx.x) & 15) + 2288)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 64)] * weight_shared[((((int)threadIdx.x) & 15) + 512)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 128)] * weight_shared[((((int)threadIdx.x) & 15) + 512)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 65)] * weight_shared[((((int)threadIdx.x) & 15) + 528)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 129)] * weight_shared[((((int)threadIdx.x) & 15) + 528)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 66)] * weight_shared[((((int)threadIdx.x) & 15) + 544)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 130)] * weight_shared[((((int)threadIdx.x) & 15) + 544)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 67)] * weight_shared[((((int)threadIdx.x) & 15) + 560)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 131)] * weight_shared[((((int)threadIdx.x) & 15) + 560)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 68)] * weight_shared[((((int)threadIdx.x) & 15) + 576)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 132)] * weight_shared[((((int)threadIdx.x) & 15) + 576)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 69)] * weight_shared[((((int)threadIdx.x) & 15) + 592)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 133)] * weight_shared[((((int)threadIdx.x) & 15) + 592)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 70)] * weight_shared[((((int)threadIdx.x) & 15) + 608)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 134)] * weight_shared[((((int)threadIdx.x) & 15) + 608)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 71)] * weight_shared[((((int)threadIdx.x) & 15) + 624)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 135)] * weight_shared[((((int)threadIdx.x) & 15) + 624)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 72)] * weight_shared[((((int)threadIdx.x) & 15) + 640)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 136)] * weight_shared[((((int)threadIdx.x) & 15) + 640)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 73)] * weight_shared[((((int)threadIdx.x) & 15) + 656)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 137)] * weight_shared[((((int)threadIdx.x) & 15) + 656)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 74)] * weight_shared[((((int)threadIdx.x) & 15) + 672)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 138)] * weight_shared[((((int)threadIdx.x) & 15) + 672)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 75)] * weight_shared[((((int)threadIdx.x) & 15) + 688)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 139)] * weight_shared[((((int)threadIdx.x) & 15) + 688)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 76)] * weight_shared[((((int)threadIdx.x) & 15) + 704)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 140)] * weight_shared[((((int)threadIdx.x) & 15) + 704)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 77)] * weight_shared[((((int)threadIdx.x) & 15) + 720)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 141)] * weight_shared[((((int)threadIdx.x) & 15) + 720)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 78)] * weight_shared[((((int)threadIdx.x) & 15) + 736)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 142)] * weight_shared[((((int)threadIdx.x) & 15) + 736)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 79)] * weight_shared[((((int)threadIdx.x) & 15) + 752)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 143)] * weight_shared[((((int)threadIdx.x) & 15) + 752)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 208)] * weight_shared[((((int)threadIdx.x) & 15) + 1280)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 272)] * weight_shared[((((int)threadIdx.x) & 15) + 1280)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 209)] * weight_shared[((((int)threadIdx.x) & 15) + 1296)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 273)] * weight_shared[((((int)threadIdx.x) & 15) + 1296)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 210)] * weight_shared[((((int)threadIdx.x) & 15) + 1312)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 274)] * weight_shared[((((int)threadIdx.x) & 15) + 1312)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 211)] * weight_shared[((((int)threadIdx.x) & 15) + 1328)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 275)] * weight_shared[((((int)threadIdx.x) & 15) + 1328)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 212)] * weight_shared[((((int)threadIdx.x) & 15) + 1344)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 276)] * weight_shared[((((int)threadIdx.x) & 15) + 1344)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 213)] * weight_shared[((((int)threadIdx.x) & 15) + 1360)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 277)] * weight_shared[((((int)threadIdx.x) & 15) + 1360)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 214)] * weight_shared[((((int)threadIdx.x) & 15) + 1376)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 278)] * weight_shared[((((int)threadIdx.x) & 15) + 1376)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 215)] * weight_shared[((((int)threadIdx.x) & 15) + 1392)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 279)] * weight_shared[((((int)threadIdx.x) & 15) + 1392)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 216)] * weight_shared[((((int)threadIdx.x) & 15) + 1408)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 280)] * weight_shared[((((int)threadIdx.x) & 15) + 1408)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 217)] * weight_shared[((((int)threadIdx.x) & 15) + 1424)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 281)] * weight_shared[((((int)threadIdx.x) & 15) + 1424)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 218)] * weight_shared[((((int)threadIdx.x) & 15) + 1440)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 282)] * weight_shared[((((int)threadIdx.x) & 15) + 1440)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 219)] * weight_shared[((((int)threadIdx.x) & 15) + 1456)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 283)] * weight_shared[((((int)threadIdx.x) & 15) + 1456)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 220)] * weight_shared[((((int)threadIdx.x) & 15) + 1472)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 284)] * weight_shared[((((int)threadIdx.x) & 15) + 1472)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 221)] * weight_shared[((((int)threadIdx.x) & 15) + 1488)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 285)] * weight_shared[((((int)threadIdx.x) & 15) + 1488)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 222)] * weight_shared[((((int)threadIdx.x) & 15) + 1504)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 286)] * weight_shared[((((int)threadIdx.x) & 15) + 1504)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 223)] * weight_shared[((((int)threadIdx.x) & 15) + 1520)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 287)] * weight_shared[((((int)threadIdx.x) & 15) + 1520)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 352)] * weight_shared[((((int)threadIdx.x) & 15) + 2048)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 416)] * weight_shared[((((int)threadIdx.x) & 15) + 2048)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 353)] * weight_shared[((((int)threadIdx.x) & 15) + 2064)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 417)] * weight_shared[((((int)threadIdx.x) & 15) + 2064)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 354)] * weight_shared[((((int)threadIdx.x) & 15) + 2080)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 418)] * weight_shared[((((int)threadIdx.x) & 15) + 2080)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 355)] * weight_shared[((((int)threadIdx.x) & 15) + 2096)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 419)] * weight_shared[((((int)threadIdx.x) & 15) + 2096)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 356)] * weight_shared[((((int)threadIdx.x) & 15) + 2112)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 420)] * weight_shared[((((int)threadIdx.x) & 15) + 2112)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 357)] * weight_shared[((((int)threadIdx.x) & 15) + 2128)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 421)] * weight_shared[((((int)threadIdx.x) & 15) + 2128)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 358)] * weight_shared[((((int)threadIdx.x) & 15) + 2144)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 422)] * weight_shared[((((int)threadIdx.x) & 15) + 2144)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 359)] * weight_shared[((((int)threadIdx.x) & 15) + 2160)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 423)] * weight_shared[((((int)threadIdx.x) & 15) + 2160)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 360)] * weight_shared[((((int)threadIdx.x) & 15) + 2176)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 424)] * weight_shared[((((int)threadIdx.x) & 15) + 2176)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 361)] * weight_shared[((((int)threadIdx.x) & 15) + 2192)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 425)] * weight_shared[((((int)threadIdx.x) & 15) + 2192)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 362)] * weight_shared[((((int)threadIdx.x) & 15) + 2208)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 426)] * weight_shared[((((int)threadIdx.x) & 15) + 2208)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 363)] * weight_shared[((((int)threadIdx.x) & 15) + 2224)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 427)] * weight_shared[((((int)threadIdx.x) & 15) + 2224)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 364)] * weight_shared[((((int)threadIdx.x) & 15) + 2240)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 428)] * weight_shared[((((int)threadIdx.x) & 15) + 2240)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 365)] * weight_shared[((((int)threadIdx.x) & 15) + 2256)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 429)] * weight_shared[((((int)threadIdx.x) & 15) + 2256)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 366)] * weight_shared[((((int)threadIdx.x) & 15) + 2272)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 430)] * weight_shared[((((int)threadIdx.x) & 15) + 2272)]));
  conv2d_nhwc_local[1] = (conv2d_nhwc_local[1] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 367)] * weight_shared[((((int)threadIdx.x) & 15) + 2288)]));
  conv2d_nhwc_local[3] = (conv2d_nhwc_local[3] + (PadInput_shared[(((((int)threadIdx.x) >> 4) * 288) + 431)] * weight_shared[((((int)threadIdx.x) & 15) + 2288)]));
  conv2d_nhwc[((((((((int)blockIdx.x) / 56) * 14336) + ((((int)threadIdx.x) >> 4) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((int)blockIdx.x) & 7) * 16)) + (((int)threadIdx.x) & 15))] = conv2d_nhwc_local[0];
  conv2d_nhwc[(((((((((int)blockIdx.x) / 56) * 14336) + ((((int)threadIdx.x) >> 4) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((int)blockIdx.x) & 7) * 16)) + (((int)threadIdx.x) & 15)) + 256)] = conv2d_nhwc_local[2];
  conv2d_nhwc[(((((((((int)blockIdx.x) / 56) * 14336) + ((((int)threadIdx.x) >> 4) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((int)blockIdx.x) & 7) * 16)) + (((int)threadIdx.x) & 15)) + 128)] = conv2d_nhwc_local[1];
  conv2d_nhwc[(((((((((int)blockIdx.x) / 56) * 14336) + ((((int)threadIdx.x) >> 4) * 3584)) + (((((int)blockIdx.x) % 56) >> 3) * 512)) + ((((int)blockIdx.x) & 7) * 16)) + (((int)threadIdx.x) & 15)) + 384)] = conv2d_nhwc_local[3];
}


The time of GRP is 0.015 ms
2025-07-21 05:48:28 [INFO] Logging directory: /tmp/tmpqozftyp1/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:52:42 [DEBUG] XGB iter   0: tr-p-rmse: 0.498262	tr-a-peak@32: 0.885729	tr-rmse: 0.300399	tr-rmse: 0.300399
2025-07-21 05:52:42 [DEBUG] XGB iter  25: tr-p-rmse: 0.038070	tr-a-peak@32: 1.000000	tr-rmse: 0.385847	tr-rmse: 0.385847
2025-07-21 05:52:43 [DEBUG] XGB iter  50: tr-p-rmse: 0.038070	tr-a-peak@32: 1.000000	tr-rmse: 0.385847	tr-rmse: 0.385847
2025-07-21 05:52:43 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.03807	tr-a-peak@32:1.00000	tr-rmse:0.38585	tr-rmse:0.38585 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 05:56:43 [DEBUG] XGB validation: p-rmse: 0.149954	a-peak@32: 1.000000
2025-07-21 05:56:43 [DEBUG] XGB iter   0: tr-p-rmse: 0.519939	tr-a-peak@32: 0.569170	tr-rmse: 0.233334	tr-rmse: 0.233334
2025-07-21 05:56:43 [DEBUG] XGB iter  25: tr-p-rmse: 0.036842	tr-a-peak@32: 1.000000	tr-rmse: 0.324778	tr-rmse: 0.324778
2025-07-21 05:56:43 [DEBUG] XGB iter  50: tr-p-rmse: 0.036842	tr-a-peak@32: 1.000000	tr-rmse: 0.324778	tr-rmse: 0.324778
2025-07-21 05:56:43 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.03684	tr-a-peak@32:1.00000	tr-rmse:0.32478	tr-rmse:0.32478 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 06:02:37 [DEBUG] XGB validation: p-rmse: 0.191447	a-peak@32: 0.888467
2025-07-21 06:02:37 [DEBUG] XGB iter   0: tr-p-rmse: 0.489714	tr-a-peak@32: 0.710818	tr-rmse: 0.296940	tr-rmse: 0.296940
2025-07-21 06:02:37 [DEBUG] XGB iter  25: tr-p-rmse: 0.041969	tr-a-peak@32: 0.996588	tr-rmse: 0.389618	tr-rmse: 0.389618
2025-07-21 06:02:38 [DEBUG] XGB iter  50: tr-p-rmse: 0.041969	tr-a-peak@32: 0.996588	tr-rmse: 0.389618	tr-rmse: 0.389618
2025-07-21 06:02:38 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.04197	tr-a-peak@32:0.99659	tr-rmse:0.38962	tr-rmse:0.38962 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 06:08:25 [DEBUG] XGB validation: p-rmse: 0.100383	a-peak@32: 0.960166
2025-07-21 06:08:25 [DEBUG] XGB iter   0: tr-p-rmse: 0.458019	tr-a-peak@32: 0.981476	tr-rmse: 0.356180	tr-rmse: 0.356180
2025-07-21 06:08:25 [DEBUG] XGB iter  25: tr-p-rmse: 0.045673	tr-a-peak@32: 0.989586	tr-rmse: 0.446165	tr-rmse: 0.446165
2025-07-21 06:08:25 [DEBUG] XGB iter  50: tr-p-rmse: 0.045673	tr-a-peak@32: 0.989586	tr-rmse: 0.446165	tr-rmse: 0.446165
2025-07-21 06:08:25 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.04567	tr-a-peak@32:0.98959	tr-rmse:0.44616	tr-rmse:0.44616 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 06:14:11 [DEBUG] XGB validation: p-rmse: 0.138399	a-peak@32: 0.862629
2025-07-21 06:14:11 [DEBUG] XGB iter   0: tr-p-rmse: 0.438218	tr-a-peak@32: 0.964529	tr-rmse: 0.391512	tr-rmse: 0.391512
2025-07-21 06:14:11 [DEBUG] XGB iter  25: tr-p-rmse: 0.056875	tr-a-peak@32: 0.935688	tr-rmse: 0.478295	tr-rmse: 0.478295
2025-07-21 06:14:12 [DEBUG] XGB iter  50: tr-p-rmse: 0.056875	tr-a-peak@32: 0.935688	tr-rmse: 0.478295	tr-rmse: 0.478295
2025-07-21 06:14:12 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.05688	tr-a-peak@32:0.93569	tr-rmse:0.47829	tr-rmse:0.47829 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 06:20:10 [DEBUG] XGB validation: p-rmse: 0.093294	a-peak@32: 0.885903
2025-07-21 06:20:10 [DEBUG] XGB iter   0: tr-p-rmse: 0.427631	tr-a-peak@32: 0.849350	tr-rmse: 0.380698	tr-rmse: 0.380698
2025-07-21 06:20:10 [DEBUG] XGB iter  25: tr-p-rmse: 0.055860	tr-a-peak@32: 1.000000	tr-rmse: 0.471614	tr-rmse: 0.471614
2025-07-21 06:20:10 [DEBUG] XGB iter  50: tr-p-rmse: 0.055860	tr-a-peak@32: 1.000000	tr-rmse: 0.471614	tr-rmse: 0.471614
2025-07-21 06:20:10 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.05586	tr-a-peak@32:1.00000	tr-rmse:0.47161	tr-rmse:0.47161 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 06:26:07 [DEBUG] XGB validation: p-rmse: 0.087451	a-peak@32: 0.980606
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 06:31:50 [DEBUG] XGB validation: p-rmse: 0.103075	a-peak@32: 0.894628
2025-07-21 06:31:50 [DEBUG] XGB iter   0: tr-p-rmse: 0.403795	tr-a-peak@32: 0.888680	tr-rmse: 0.396703	tr-rmse: 0.396703
2025-07-21 06:31:50 [DEBUG] XGB iter  25: tr-p-rmse: 0.065166	tr-a-peak@32: 0.896449	tr-rmse: 0.488362	tr-rmse: 0.488362
2025-07-21 06:31:50 [DEBUG] XGB iter  50: tr-p-rmse: 0.065166	tr-a-peak@32: 0.896449	tr-rmse: 0.488362	tr-rmse: 0.488362
2025-07-21 06:31:50 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.06517	tr-a-peak@32:0.89645	tr-rmse:0.48836	tr-rmse:0.48836 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 06:37:38 [DEBUG] XGB validation: p-rmse: 0.094157	a-peak@32: 0.892717
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 06:43:18 [DEBUG] XGB validation: p-rmse: 0.115946	a-peak@32: 0.860913
2025-07-21 06:43:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.390694	tr-a-peak@32: 0.884547	tr-rmse: 0.399747	tr-rmse: 0.399747
2025-07-21 06:43:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.069750	tr-a-peak@32: 0.901131	tr-rmse: 0.492588	tr-rmse: 0.492588
2025-07-21 06:43:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.069750	tr-a-peak@32: 0.901131	tr-rmse: 0.492588	tr-rmse: 0.492588
2025-07-21 06:43:18 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.06975	tr-a-peak@32:0.90113	tr-rmse:0.49259	tr-rmse:0.49259 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 06:49:04 [DEBUG] XGB validation: p-rmse: 0.073750	a-peak@32: 0.992134
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 06:54:48 [DEBUG] XGB validation: p-rmse: 0.070939	a-peak@32: 0.992146
2025-07-21 06:54:48 [DEBUG] XGB iter   0: tr-p-rmse: 0.379346	tr-a-peak@32: 0.860043	tr-rmse: 0.403558	tr-rmse: 0.403558
2025-07-21 06:54:48 [DEBUG] XGB iter  25: tr-p-rmse: 0.067143	tr-a-peak@32: 0.935372	tr-rmse: 0.496841	tr-rmse: 0.496841
2025-07-21 06:54:48 [DEBUG] XGB iter  50: tr-p-rmse: 0.067143	tr-a-peak@32: 0.935372	tr-rmse: 0.496841	tr-rmse: 0.496841
2025-07-21 06:54:48 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.06714	tr-a-peak@32:0.93537	tr-rmse:0.49684	tr-rmse:0.49684 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:00:30 [DEBUG] XGB validation: p-rmse: 0.085634	a-peak@32: 0.989722
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:06:02 [DEBUG] XGB validation: p-rmse: 0.114628	a-peak@32: 0.799074
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:11:41 [DEBUG] XGB validation: p-rmse: 0.098199	a-peak@32: 0.879026
2025-07-21 07:11:41 [DEBUG] XGB iter   0: tr-p-rmse: 0.370982	tr-a-peak@32: 0.868652	tr-rmse: 0.405195	tr-rmse: 0.405195
2025-07-21 07:11:41 [DEBUG] XGB iter  25: tr-p-rmse: 0.069484	tr-a-peak@32: 0.935281	tr-rmse: 0.499096	tr-rmse: 0.499096
2025-07-21 07:11:41 [DEBUG] XGB iter  50: tr-p-rmse: 0.069484	tr-a-peak@32: 0.935281	tr-rmse: 0.499096	tr-rmse: 0.499096
2025-07-21 07:11:41 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.06948	tr-a-peak@32:0.93528	tr-rmse:0.49910	tr-rmse:0.49910 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:17:26 [DEBUG] XGB validation: p-rmse: 0.073735	a-peak@32: 0.989700
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:22:27 [DEBUG] XGB validation: p-rmse: 0.297472	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_pad_shared_dyn_wmma_matrix_a[1];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_pad_shared_dyn_wmma_matrix_b[1];
  nvcuda::wmma::fill_fragment(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  for (int ax2_0_0 = 0; ax2_0_0 < 5; ++ax2_0_0) {
    __syncthreads();
    for (int ax0_ax1_fused_0 = 0; ax0_ax1_fused_0 < 4; ++ax0_ax1_fused_0) {
      half condval;
      if ((((((((((((int)blockIdx.x) * 16) + (ax0_ax1_fused_0 * 4)) + ((int)threadIdx.y)) < 11881) && (((ax2_0_0 * 32) + ((int)threadIdx.x)) < 147)) && (1 < (((((((int)blockIdx.x) * 16) + (ax0_ax1_fused_0 * 4)) + ((int)threadIdx.y)) / 109) + (((ax2_0_0 * 32) + ((int)threadIdx.x)) / 21)))) && ((((((((int)blockIdx.x) * 16) + (ax0_ax1_fused_0 * 4)) + ((int)threadIdx.y)) / 109) + (((ax2_0_0 * 32) + ((int)threadIdx.x)) / 21)) < 114)) && (1 < (((((ax2_0_0 * 11) + ((int)threadIdx.x)) % 21) / 3) + ((((((int)blockIdx.x) * 16) + (ax0_ax1_fused_0 * 4)) + ((int)threadIdx.y)) % 109)))) && ((((((ax2_0_0 * 11) + ((int)threadIdx.x)) % 21) / 3) + ((((((int)blockIdx.x) * 16) + (ax0_ax1_fused_0 * 4)) + ((int)threadIdx.y)) % 109)) < 114))) {
        condval = inputs[((((((((((((int)blockIdx.x) * 16) + (ax0_ax1_fused_0 * 4)) + ((int)threadIdx.y)) / 109) * 1344) + ((((ax2_0_0 * 32) + ((int)threadIdx.x)) / 21) * 1344)) + (((((ax2_0_0 * 11) + ((int)threadIdx.x)) % 21) / 3) * 6)) + (((((((int)blockIdx.x) * 16) + (ax0_ax1_fused_0 * 4)) + ((int)threadIdx.y)) % 109) * 6)) + (((ax2_0_0 * 2) + ((int)threadIdx.x)) % 3)) - 2025)];
      } else {
        condval = __float2half_rn(0.000000e+00f);
      }
      ((half*)buf_dyn_shmem)[(((ax0_ax1_fused_0 * 160) + (((int)threadIdx.y) * 40)) + ((int)threadIdx.x))] = condval;
    }
    for (int ax0_ax1_fused_0_1 = 0; ax0_ax1_fused_0_1 < 8; ++ax0_ax1_fused_0_1) {
      half2 condval_1;
      if (((((ax2_0_0 * 32) + (ax0_ax1_fused_0_1 * 4)) + ((int)threadIdx.y)) < 147)) {
        condval_1 = *(half2*)(weight + ((((ax2_0_0 * 2048) + (ax0_ax1_fused_0_1 * 256)) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)));
      } else {
        condval_1 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
      }
      *(half2*)(((half*)buf_dyn_shmem) + ((((ax0_ax1_fused_0_1 * 288) + (((int)threadIdx.y) * 72)) + (((int)threadIdx.x) * 2)) + 640)) = condval_1;
    }
    __syncthreads();
    for (int ax2_0_1 = 0; ax2_0_1 < 2; ++ax2_0_1) {
      nvcuda::wmma::load_matrix_sync(PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[(ax2_0_1 * 16)])), 40);
      nvcuda::wmma::load_matrix_sync(weight_reindex_pad_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[(((ax2_0_1 * 1152) + (((int)threadIdx.y) * 16)) + 640)])), 72);
      nvcuda::wmma::mma_sync(conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], PadInput_reindex_pad_shared_dyn_wmma_matrix_a[0], weight_reindex_pad_shared_dyn_wmma_matrix_b[0], conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0]);
    }
  }
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 256) + 640)])), conv2d_nhwc_reindex_pad_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  if (((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 1)) < 11881) {
    *(uint4*)(conv2d_nhwc + ((((((int)blockIdx.x) * 1024) + ((((int)threadIdx.x) >> 1) * 64)) + (((int)threadIdx.y) * 16)) + ((((int)threadIdx.x) & 1) * 8))) = *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 640));
  }
}


The time of DIL is 0.018 ms
2025-07-21 07:22:29 [INFO] Logging directory: /tmp/tmpggkl_pwe/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:24:52 [DEBUG] XGB iter   0: tr-p-rmse: 0.571920	tr-a-peak@32: 0.920577	tr-rmse: 0.471745	tr-rmse: 0.471745
2025-07-21 07:24:52 [DEBUG] XGB iter  25: tr-p-rmse: 0.040798	tr-a-peak@32: 1.000000	tr-rmse: 0.502736	tr-rmse: 0.502736
2025-07-21 07:24:52 [DEBUG] XGB iter  50: tr-p-rmse: 0.040798	tr-a-peak@32: 1.000000	tr-rmse: 0.502736	tr-rmse: 0.502736
2025-07-21 07:24:52 [DEBUG] XGB stopped. Best iteration: [10] tr-p-rmse:0.04080	tr-a-peak@32:1.00000	tr-rmse:0.50274	tr-rmse:0.50274 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:26:11 [DEBUG] XGB validation: p-rmse: 0.200825	a-peak@32: 0.977597
2025-07-21 07:26:11 [DEBUG] XGB iter   0: tr-p-rmse: 0.546272	tr-a-peak@32: 1.000000	tr-rmse: 0.441679	tr-rmse: 0.441679
2025-07-21 07:26:11 [DEBUG] XGB iter  25: tr-p-rmse: 0.035456	tr-a-peak@32: 1.000000	tr-rmse: 0.474616	tr-rmse: 0.474616
2025-07-21 07:26:11 [DEBUG] XGB iter  50: tr-p-rmse: 0.035456	tr-a-peak@32: 1.000000	tr-rmse: 0.474616	tr-rmse: 0.474616
2025-07-21 07:26:11 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.03546	tr-a-peak@32:1.00000	tr-rmse:0.47462	tr-rmse:0.47462 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:27:48 [DEBUG] XGB validation: p-rmse: 0.356028	a-peak@32: 0.977071
2025-07-21 07:27:48 [DEBUG] XGB iter   0: tr-p-rmse: 0.458940	tr-a-peak@32: 0.908120	tr-rmse: 0.473603	tr-rmse: 0.473603
2025-07-21 07:27:48 [DEBUG] XGB iter  25: tr-p-rmse: 0.040608	tr-a-peak@32: 0.995287	tr-rmse: 0.520928	tr-rmse: 0.520928
2025-07-21 07:27:48 [DEBUG] XGB iter  50: tr-p-rmse: 0.040608	tr-a-peak@32: 0.995287	tr-rmse: 0.520928	tr-rmse: 0.520928
2025-07-21 07:27:48 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.04061	tr-a-peak@32:0.99529	tr-rmse:0.52093	tr-rmse:0.52093 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:29:32 [DEBUG] XGB validation: p-rmse: 0.339534	a-peak@32: 0.839668
2025-07-21 07:29:32 [DEBUG] XGB iter   0: tr-p-rmse: 0.429695	tr-a-peak@32: 0.940083	tr-rmse: 0.463345	tr-rmse: 0.463345
2025-07-21 07:29:32 [DEBUG] XGB iter  25: tr-p-rmse: 0.049633	tr-a-peak@32: 0.985946	tr-rmse: 0.514324	tr-rmse: 0.514324
2025-07-21 07:29:32 [DEBUG] XGB iter  50: tr-p-rmse: 0.049633	tr-a-peak@32: 0.985946	tr-rmse: 0.514324	tr-rmse: 0.514324
2025-07-21 07:29:32 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.04963	tr-a-peak@32:0.98595	tr-rmse:0.51432	tr-rmse:0.51432 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:31:57 [DEBUG] XGB validation: p-rmse: 0.447604	a-peak@32: 0.857505
2025-07-21 07:31:57 [DEBUG] XGB iter   0: tr-p-rmse: 0.410890	tr-a-peak@32: 0.927761	tr-rmse: 0.456697	tr-rmse: 0.456697
2025-07-21 07:31:57 [DEBUG] XGB iter  25: tr-p-rmse: 0.048945	tr-a-peak@32: 0.986402	tr-rmse: 0.509004	tr-rmse: 0.509004
2025-07-21 07:31:57 [DEBUG] XGB iter  50: tr-p-rmse: 0.048945	tr-a-peak@32: 0.986402	tr-rmse: 0.509004	tr-rmse: 0.509004
2025-07-21 07:31:57 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.04895	tr-a-peak@32:0.98640	tr-rmse:0.50900	tr-rmse:0.50900 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:34:44 [DEBUG] XGB validation: p-rmse: 0.354836	a-peak@32: 0.721372
2025-07-21 07:34:44 [DEBUG] XGB iter   0: tr-p-rmse: 0.402721	tr-a-peak@32: 0.931725	tr-rmse: 0.448562	tr-rmse: 0.448562
2025-07-21 07:34:44 [DEBUG] XGB iter  25: tr-p-rmse: 0.056367	tr-a-peak@32: 0.996093	tr-rmse: 0.502078	tr-rmse: 0.502078
2025-07-21 07:34:44 [DEBUG] XGB iter  50: tr-p-rmse: 0.056367	tr-a-peak@32: 0.996093	tr-rmse: 0.502078	tr-rmse: 0.502078
2025-07-21 07:34:44 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.05637	tr-a-peak@32:0.99609	tr-rmse:0.50208	tr-rmse:0.50208 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:37:38 [DEBUG] XGB validation: p-rmse: 0.252280	a-peak@32: 0.662749
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:40:28 [DEBUG] XGB validation: p-rmse: 0.282941	a-peak@32: 0.889778
2025-07-21 07:40:28 [DEBUG] XGB iter   0: tr-p-rmse: 0.396862	tr-a-peak@32: 0.797053	tr-rmse: 0.427371	tr-rmse: 0.427371
2025-07-21 07:40:28 [DEBUG] XGB iter  25: tr-p-rmse: 0.067328	tr-a-peak@32: 1.000000	tr-rmse: 0.483680	tr-rmse: 0.483680
2025-07-21 07:40:28 [DEBUG] XGB iter  50: tr-p-rmse: 0.067328	tr-a-peak@32: 1.000000	tr-rmse: 0.483680	tr-rmse: 0.483680
2025-07-21 07:40:28 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.06733	tr-a-peak@32:1.00000	tr-rmse:0.48368	tr-rmse:0.48368 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:43:19 [DEBUG] XGB validation: p-rmse: 0.204249	a-peak@32: 0.743423
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:46:02 [DEBUG] XGB validation: p-rmse: 0.251257	a-peak@32: 0.851689
2025-07-21 07:46:02 [DEBUG] XGB iter   0: tr-p-rmse: 0.384942	tr-a-peak@32: 0.660423	tr-rmse: 0.430976	tr-rmse: 0.430976
2025-07-21 07:46:02 [DEBUG] XGB iter  25: tr-p-rmse: 0.074328	tr-a-peak@32: 0.994830	tr-rmse: 0.488572	tr-rmse: 0.488572
2025-07-21 07:46:02 [DEBUG] XGB iter  50: tr-p-rmse: 0.074328	tr-a-peak@32: 0.994830	tr-rmse: 0.488572	tr-rmse: 0.488572
2025-07-21 07:46:02 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.07433	tr-a-peak@32:0.99483	tr-rmse:0.48857	tr-rmse:0.48857 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:48:54 [DEBUG] XGB validation: p-rmse: 0.213636	a-peak@32: 0.730925
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:51:41 [DEBUG] XGB validation: p-rmse: 0.273438	a-peak@32: 0.977974
2025-07-21 07:51:41 [DEBUG] XGB iter   0: tr-p-rmse: 0.377116	tr-a-peak@32: 0.685334	tr-rmse: 0.394674	tr-rmse: 0.394674
2025-07-21 07:51:41 [DEBUG] XGB iter  25: tr-p-rmse: 0.074426	tr-a-peak@32: 1.000000	tr-rmse: 0.455533	tr-rmse: 0.455533
2025-07-21 07:51:41 [DEBUG] XGB iter  50: tr-p-rmse: 0.074426	tr-a-peak@32: 1.000000	tr-rmse: 0.455533	tr-rmse: 0.455533
2025-07-21 07:51:41 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.07443	tr-a-peak@32:1.00000	tr-rmse:0.45553	tr-rmse:0.45553 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:54:29 [DEBUG] XGB validation: p-rmse: 0.192043	a-peak@32: 0.966427
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 07:57:16 [DEBUG] XGB validation: p-rmse: 0.166717	a-peak@32: 0.944132
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:00:02 [DEBUG] XGB validation: p-rmse: 0.157218	a-peak@32: 0.912406
2025-07-21 08:00:02 [DEBUG] XGB iter   0: tr-p-rmse: 0.369885	tr-a-peak@32: 0.738139	tr-rmse: 0.396006	tr-rmse: 0.396006
2025-07-21 08:00:02 [DEBUG] XGB iter  25: tr-p-rmse: 0.075405	tr-a-peak@32: 0.950186	tr-rmse: 0.457666	tr-rmse: 0.457666
2025-07-21 08:00:02 [DEBUG] XGB iter  50: tr-p-rmse: 0.075405	tr-a-peak@32: 0.950186	tr-rmse: 0.457666	tr-rmse: 0.457666
2025-07-21 08:00:02 [DEBUG] XGB stopped. Best iteration: [21] tr-p-rmse:0.07540	tr-a-peak@32:0.95019	tr-rmse:0.45767	tr-rmse:0.45767 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:02:46 [DEBUG] XGB validation: p-rmse: 0.163112	a-peak@32: 0.944103
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:04:53 [DEBUG] XGB validation: p-rmse: 0.092329	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(224) main_kernel(half* __restrict__ depth_conv2d_nhwc, half* __restrict__ placeholder, half* __restrict__ placeholder_1);
extern "C" __global__ void __launch_bounds__(224) main_kernel(half* __restrict__ depth_conv2d_nhwc, half* __restrict__ placeholder, half* __restrict__ placeholder_1) {
  half depth_conv2d_nhwc_local[4];
  __shared__ half PadInput_shared[1344];
  __shared__ half placeholder_shared[96];
  for (int c_3_init = 0; c_3_init < 2; ++c_3_init) {
    for (int h_4_init = 0; h_4_init < 2; ++h_4_init) {
      depth_conv2d_nhwc_local[((h_4_init * 2) + c_3_init)] = __float2half_rn(0.000000e+00f);
    }
  }
  for (int rw_0 = 0; rw_0 < 3; ++rw_0) {
    __syncthreads();
    for (int ax0_ax1_ax2_ax3_fused_0 = 0; ax0_ax1_ax2_ax3_fused_0 < 3; ++ax0_ax1_ax2_ax3_fused_0) {
      half2 condval;
      if (((((1 <= ((((((int)blockIdx.x) >> 4) * 4) + (ax0_ax1_ax2_ax3_fused_0 * 2)) + (((int)threadIdx.x) / 112))) && (((((((int)blockIdx.x) >> 4) * 4) + (ax0_ax1_ax2_ax3_fused_0 * 2)) + (((int)threadIdx.x) / 112)) < 113)) && (1 <= ((((((int)blockIdx.x) & 15) * 7) + ((((int)threadIdx.x) % 112) >> 4)) + rw_0))) && (((((((int)blockIdx.x) & 15) * 7) + ((((int)threadIdx.x) % 112) >> 4)) + rw_0) < 113))) {
        condval = *(half2*)(placeholder + ((((((((((int)blockIdx.x) >> 4) * 14336) + (ax0_ax1_ax2_ax3_fused_0 * 7168)) + ((((int)threadIdx.x) / 112) * 3584)) + ((((int)blockIdx.x) & 15) * 224)) + (rw_0 * 32)) + ((((int)threadIdx.x) % 112) * 2)) - 3616));
      } else {
        condval = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
      }
      *(half2*)(PadInput_shared + ((ax0_ax1_ax2_ax3_fused_0 * 448) + (((int)threadIdx.x) * 2))) = condval;
    }
    if (((int)threadIdx.x) < 96) {
      placeholder_shared[((int)threadIdx.x)] = placeholder_1[((((((int)threadIdx.x) >> 5) * 96) + (rw_0 * 32)) + (((int)threadIdx.x) & 31))];
    }
    __syncthreads();
    for (int c_3 = 0; c_3 < 2; ++c_3) {
      for (int rh_2 = 0; rh_2 < 3; ++rh_2) {
        for (int h_4 = 0; h_4 < 2; ++h_4) {
          depth_conv2d_nhwc_local[((h_4 * 2) + c_3)] = (depth_conv2d_nhwc_local[((h_4 * 2) + c_3)] + (PadInput_shared[((((((((int)threadIdx.x) / 112) * 448) + (h_4 * 224)) + (rh_2 * 224)) + ((((int)threadIdx.x) % 112) * 2)) + c_3)] * placeholder_shared[(((rh_2 * 32) + ((((int)threadIdx.x) & 15) * 2)) + c_3)]));
        }
      }
    }
  }
  for (int ax1 = 0; ax1 < 2; ++ax1) {
    for (int ax3 = 0; ax3 < 2; ++ax3) {
      depth_conv2d_nhwc[(((((((((int)blockIdx.x) >> 4) * 14336) + ((((int)threadIdx.x) / 112) * 7168)) + (ax1 * 3584)) + ((((int)blockIdx.x) & 15) * 224)) + ((((int)threadIdx.x) % 112) * 2)) + ax3)] = depth_conv2d_nhwc_local[((ax1 * 2) + ax3)];
    }
  }
}


The time of DEP is 0.009 ms
2025-07-21 08:04:54 [INFO] Logging directory: /tmp/tmpqx3fd9tm/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:07:45 [DEBUG] XGB iter   0: tr-p-rmse: 0.773293	tr-a-peak@32: 0.969221	tr-rmse: 0.463035	tr-rmse: 0.463035
2025-07-21 08:07:45 [DEBUG] XGB iter  25: tr-p-rmse: 0.155410	tr-a-peak@32: 1.000000	tr-rmse: 0.479686	tr-rmse: 0.479686
2025-07-21 08:07:48 [DEBUG] XGB iter  50: tr-p-rmse: 0.155410	tr-a-peak@32: 1.000000	tr-rmse: 0.479686	tr-rmse: 0.479686
2025-07-21 08:07:48 [DEBUG] XGB stopped. Best iteration: [10] tr-p-rmse:0.15541	tr-a-peak@32:1.00000	tr-rmse:0.47969	tr-rmse:0.47969 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:10:32 [DEBUG] XGB validation: p-rmse: 0.092106	a-peak@32: 0.999817
2025-07-21 08:10:32 [DEBUG] XGB iter   0: tr-p-rmse: 0.595431	tr-a-peak@32: 0.953691	tr-rmse: 0.373517	tr-rmse: 0.373517
2025-07-21 08:10:32 [DEBUG] XGB iter  25: tr-p-rmse: 0.089739	tr-a-peak@32: 1.000000	tr-rmse: 0.408801	tr-rmse: 0.408801
2025-07-21 08:10:32 [DEBUG] XGB iter  50: tr-p-rmse: 0.089739	tr-a-peak@32: 1.000000	tr-rmse: 0.408801	tr-rmse: 0.408801
2025-07-21 08:10:32 [DEBUG] XGB stopped. Best iteration: [11] tr-p-rmse:0.08974	tr-a-peak@32:1.00000	tr-rmse:0.40880	tr-rmse:0.40880 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:13:36 [DEBUG] XGB validation: p-rmse: 0.360746	a-peak@32: 0.559380
2025-07-21 08:13:36 [DEBUG] XGB iter   0: tr-p-rmse: 0.639874	tr-a-peak@32: 0.293531	tr-rmse: 0.356516	tr-rmse: 0.356516
2025-07-21 08:13:36 [DEBUG] XGB iter  25: tr-p-rmse: 0.071689	tr-a-peak@32: 1.000000	tr-rmse: 0.394978	tr-rmse: 0.394978
2025-07-21 08:13:36 [DEBUG] XGB iter  50: tr-p-rmse: 0.071689	tr-a-peak@32: 1.000000	tr-rmse: 0.394978	tr-rmse: 0.394978
2025-07-21 08:13:36 [DEBUG] XGB stopped. Best iteration: [10] tr-p-rmse:0.07169	tr-a-peak@32:1.00000	tr-rmse:0.39498	tr-rmse:0.39498 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:16:55 [DEBUG] XGB validation: p-rmse: 0.392842	a-peak@32: 0.640686
2025-07-21 08:16:55 [DEBUG] XGB iter   0: tr-p-rmse: 0.594703	tr-a-peak@32: 0.949803	tr-rmse: 0.461975	tr-rmse: 0.461975
2025-07-21 08:16:55 [DEBUG] XGB iter  25: tr-p-rmse: 0.189573	tr-a-peak@32: 0.994633	tr-rmse: 0.513219	tr-rmse: 0.513219
2025-07-21 08:16:55 [DEBUG] XGB iter  50: tr-p-rmse: 0.189573	tr-a-peak@32: 0.994633	tr-rmse: 0.513219	tr-rmse: 0.513219
2025-07-21 08:16:55 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.18957	tr-a-peak@32:0.99463	tr-rmse:0.51322	tr-rmse:0.51322 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:20:13 [DEBUG] XGB validation: p-rmse: 0.433865	a-peak@32: 0.557966
2025-07-21 08:20:13 [DEBUG] XGB iter   0: tr-p-rmse: 0.559565	tr-a-peak@32: 0.764642	tr-rmse: 0.447084	tr-rmse: 0.447084
2025-07-21 08:20:13 [DEBUG] XGB iter  25: tr-p-rmse: 0.212448	tr-a-peak@32: 1.000000	tr-rmse: 0.502086	tr-rmse: 0.502086
2025-07-21 08:20:13 [DEBUG] XGB iter  50: tr-p-rmse: 0.212448	tr-a-peak@32: 1.000000	tr-rmse: 0.502086	tr-rmse: 0.502086
2025-07-21 08:20:13 [DEBUG] XGB stopped. Best iteration: [5] tr-p-rmse:0.21217	tr-a-peak@32:1.00000	tr-rmse:0.50202	tr-rmse:0.50202 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:23:17 [DEBUG] XGB validation: p-rmse: 0.111800	a-peak@32: 0.987678
2025-07-21 08:23:17 [DEBUG] XGB iter   0: tr-p-rmse: 0.530706	tr-a-peak@32: 0.777299	tr-rmse: 0.498144	tr-rmse: 0.498144
2025-07-21 08:23:17 [DEBUG] XGB iter  25: tr-p-rmse: 0.187764	tr-a-peak@32: 0.998347	tr-rmse: 0.551399	tr-rmse: 0.551399
2025-07-21 08:23:17 [DEBUG] XGB iter  50: tr-p-rmse: 0.187764	tr-a-peak@32: 0.998347	tr-rmse: 0.551399	tr-rmse: 0.551399
2025-07-21 08:23:17 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.18776	tr-a-peak@32:0.99835	tr-rmse:0.55140	tr-rmse:0.55140 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:26:33 [DEBUG] XGB validation: p-rmse: 0.099124	a-peak@32: 0.978170
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:29:48 [DEBUG] XGB validation: p-rmse: 0.084052	a-peak@32: 0.985859
2025-07-21 08:29:48 [DEBUG] XGB iter   0: tr-p-rmse: 0.490084	tr-a-peak@32: 0.897449	tr-rmse: 0.568505	tr-rmse: 0.568505
2025-07-21 08:29:48 [DEBUG] XGB iter  25: tr-p-rmse: 0.163896	tr-a-peak@32: 1.000000	tr-rmse: 0.619082	tr-rmse: 0.619082
2025-07-21 08:29:48 [DEBUG] XGB iter  50: tr-p-rmse: 0.163896	tr-a-peak@32: 1.000000	tr-rmse: 0.619082	tr-rmse: 0.619082
2025-07-21 08:29:48 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.16390	tr-a-peak@32:1.00000	tr-rmse:0.61908	tr-rmse:0.61908 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:33:04 [DEBUG] XGB validation: p-rmse: 0.064359	a-peak@32: 0.992283
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:36:20 [DEBUG] XGB validation: p-rmse: 0.085912	a-peak@32: 0.989129
2025-07-21 08:36:20 [DEBUG] XGB iter   0: tr-p-rmse: 0.448172	tr-a-peak@32: 0.966443	tr-rmse: 0.595703	tr-rmse: 0.595703
2025-07-21 08:36:20 [DEBUG] XGB iter  25: tr-p-rmse: 0.146175	tr-a-peak@32: 0.999723	tr-rmse: 0.647739	tr-rmse: 0.647739
2025-07-21 08:36:20 [DEBUG] XGB iter  50: tr-p-rmse: 0.146175	tr-a-peak@32: 0.999723	tr-rmse: 0.647739	tr-rmse: 0.647739
2025-07-21 08:36:20 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.14617	tr-a-peak@32:0.99972	tr-rmse:0.64774	tr-rmse:0.64774 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:39:20 [DEBUG] XGB validation: p-rmse: 0.085255	a-peak@32: 0.984760
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:42:14 [DEBUG] XGB validation: p-rmse: 0.145741	a-peak@32: 0.979615
2025-07-21 08:42:14 [DEBUG] XGB iter   0: tr-p-rmse: 0.425028	tr-a-peak@32: 0.935703	tr-rmse: 0.604831	tr-rmse: 0.604831
2025-07-21 08:42:14 [DEBUG] XGB iter  25: tr-p-rmse: 0.137428	tr-a-peak@32: 0.992937	tr-rmse: 0.657108	tr-rmse: 0.657108
2025-07-21 08:42:14 [DEBUG] XGB iter  50: tr-p-rmse: 0.137428	tr-a-peak@32: 0.992937	tr-rmse: 0.657108	tr-rmse: 0.657108
2025-07-21 08:42:14 [DEBUG] XGB stopped. Best iteration: [9] tr-p-rmse:0.13742	tr-a-peak@32:0.99406	tr-rmse:0.65706	tr-rmse:0.65706 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:45:19 [DEBUG] XGB validation: p-rmse: 0.185591	a-peak@32: 0.919061
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:48:09 [DEBUG] XGB validation: p-rmse: 0.069083	a-peak@32: 0.986445
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:50:59 [DEBUG] XGB validation: p-rmse: 0.073016	a-peak@32: 0.988613
2025-07-21 08:50:59 [DEBUG] XGB iter   0: tr-p-rmse: 0.400325	tr-a-peak@32: 0.969188	tr-rmse: 0.621603	tr-rmse: 0.621603
2025-07-21 08:50:59 [DEBUG] XGB iter  25: tr-p-rmse: 0.133315	tr-a-peak@32: 0.989304	tr-rmse: 0.673640	tr-rmse: 0.673640
2025-07-21 08:50:59 [DEBUG] XGB iter  50: tr-p-rmse: 0.133315	tr-a-peak@32: 0.989304	tr-rmse: 0.673640	tr-rmse: 0.673640
2025-07-21 08:50:59 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.13331	tr-a-peak@32:0.98930	tr-rmse:0.67364	tr-rmse:0.67364 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:53:50 [DEBUG] XGB validation: p-rmse: 0.112676	a-peak@32: 0.970784
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_transpose_nhwc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_transpose_nhwc, half* __restrict__ inputs, half* __restrict__ weight) {
  half conv2d_transpose_nhwc_local[2];
  __shared__ half PadInput_shared[512];
  __shared__ half weight_shared[8192];
  conv2d_transpose_nhwc_local[0] = __float2half_rn(0.000000e+00f);
  conv2d_transpose_nhwc_local[1] = __float2half_rn(0.000000e+00f);
  for (int rc_0 = 0; rc_0 < 16; ++rc_0) {
    __syncthreads();
    half4 condval;
    if (((((1 <= (((((int)blockIdx.x) >> 5) * 2) + (((int)threadIdx.x) >> 5))) && ((((((int)blockIdx.x) >> 5) * 2) + (((int)threadIdx.x) >> 5)) < 5)) && (1 <= ((((((int)blockIdx.x) & 31) >> 4) * 2) + ((((int)threadIdx.x) & 31) >> 3)))) && (((((((int)blockIdx.x) & 31) >> 4) * 2) + ((((int)threadIdx.x) & 31) >> 3)) < 5))) {
      condval = *(half4*)(inputs + (((((((((int)blockIdx.x) >> 5) * 4096) + (((((int)blockIdx.x) & 31) >> 4) * 1024)) + ((((int)threadIdx.x) >> 3) * 512)) + (rc_0 * 32)) + ((((int)threadIdx.x) & 7) * 4)) - 2560));
    } else {
      condval = make_half4(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
    }
    *(half4*)(PadInput_shared + (((int)threadIdx.x) * 4)) = condval;
    *(uint4*)(weight_shared + (((int)threadIdx.x) * 8)) = *(uint4*)(weight + ((((((((int)threadIdx.x) >> 6) * 131072) + (rc_0 * 8192)) + (((((int)threadIdx.x) & 63) >> 1) * 256)) + ((((int)blockIdx.x) & 15) * 16)) + ((((int)threadIdx.x) & 1) * 8)));
    *(uint4*)(weight_shared + ((((int)threadIdx.x) * 8) + 1024)) = *(uint4*)(weight + (((((((((int)threadIdx.x) >> 6) * 131072) + (rc_0 * 8192)) + (((((int)threadIdx.x) & 63) >> 1) * 256)) + ((((int)blockIdx.x) & 15) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 262144));
    *(uint4*)(weight_shared + ((((int)threadIdx.x) * 8) + 2048)) = *(uint4*)(weight + (((((((((int)threadIdx.x) >> 6) * 131072) + (rc_0 * 8192)) + (((((int)threadIdx.x) & 63) >> 1) * 256)) + ((((int)blockIdx.x) & 15) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 524288));
    *(uint4*)(weight_shared + ((((int)threadIdx.x) * 8) + 3072)) = *(uint4*)(weight + (((((((((int)threadIdx.x) >> 6) * 131072) + (rc_0 * 8192)) + (((((int)threadIdx.x) & 63) >> 1) * 256)) + ((((int)blockIdx.x) & 15) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 786432));
    *(uint4*)(weight_shared + ((((int)threadIdx.x) * 8) + 4096)) = *(uint4*)(weight + (((((((((int)threadIdx.x) >> 6) * 131072) + (rc_0 * 8192)) + (((((int)threadIdx.x) & 63) >> 1) * 256)) + ((((int)blockIdx.x) & 15) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 1048576));
    *(uint4*)(weight_shared + ((((int)threadIdx.x) * 8) + 5120)) = *(uint4*)(weight + (((((((((int)threadIdx.x) >> 6) * 131072) + (rc_0 * 8192)) + (((((int)threadIdx.x) & 63) >> 1) * 256)) + ((((int)blockIdx.x) & 15) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 1310720));
    *(uint4*)(weight_shared + ((((int)threadIdx.x) * 8) + 6144)) = *(uint4*)(weight + (((((((((int)threadIdx.x) >> 6) * 131072) + (rc_0 * 8192)) + (((((int)threadIdx.x) & 63) >> 1) * 256)) + ((((int)blockIdx.x) & 15) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 1572864));
    *(uint4*)(weight_shared + ((((int)threadIdx.x) * 8) + 7168)) = *(uint4*)(weight + (((((((((int)threadIdx.x) >> 6) * 131072) + (rc_0 * 8192)) + (((((int)threadIdx.x) & 63) >> 1) * 256)) + ((((int)blockIdx.x) & 15) * 16)) + ((((int)threadIdx.x) & 1) * 8)) + 1835008));
    __syncthreads();
    for (int rw_1 = 0; rw_1 < 2; ++rw_1) {
      half condval_1;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_1 = PadInput_shared[((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32))];
      } else {
        condval_1 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_1 * weight_shared[(((((int)threadIdx.x) & 15) + 7680) - (rw_1 * 1024))]));
      half condval_2;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_2 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 1)];
      } else {
        condval_2 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_2 * weight_shared[(((((int)threadIdx.x) & 15) + 7696) - (rw_1 * 1024))]));
      half condval_3;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_3 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 2)];
      } else {
        condval_3 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_3 * weight_shared[(((((int)threadIdx.x) & 15) + 7712) - (rw_1 * 1024))]));
      half condval_4;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_4 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 3)];
      } else {
        condval_4 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_4 * weight_shared[(((((int)threadIdx.x) & 15) + 7728) - (rw_1 * 1024))]));
      half condval_5;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_5 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 4)];
      } else {
        condval_5 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_5 * weight_shared[(((((int)threadIdx.x) & 15) + 7744) - (rw_1 * 1024))]));
      half condval_6;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_6 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 5)];
      } else {
        condval_6 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_6 * weight_shared[(((((int)threadIdx.x) & 15) + 7760) - (rw_1 * 1024))]));
      half condval_7;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_7 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 6)];
      } else {
        condval_7 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_7 * weight_shared[(((((int)threadIdx.x) & 15) + 7776) - (rw_1 * 1024))]));
      half condval_8;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_8 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 7)];
      } else {
        condval_8 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_8 * weight_shared[(((((int)threadIdx.x) & 15) + 7792) - (rw_1 * 1024))]));
      half condval_9;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_9 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 8)];
      } else {
        condval_9 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_9 * weight_shared[(((((int)threadIdx.x) & 15) + 7808) - (rw_1 * 1024))]));
      half condval_10;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_10 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 9)];
      } else {
        condval_10 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_10 * weight_shared[(((((int)threadIdx.x) & 15) + 7824) - (rw_1 * 1024))]));
      half condval_11;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_11 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 10)];
      } else {
        condval_11 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_11 * weight_shared[(((((int)threadIdx.x) & 15) + 7840) - (rw_1 * 1024))]));
      half condval_12;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_12 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 11)];
      } else {
        condval_12 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_12 * weight_shared[(((((int)threadIdx.x) & 15) + 7856) - (rw_1 * 1024))]));
      half condval_13;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_13 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 12)];
      } else {
        condval_13 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_13 * weight_shared[(((((int)threadIdx.x) & 15) + 7872) - (rw_1 * 1024))]));
      half condval_14;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_14 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 13)];
      } else {
        condval_14 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_14 * weight_shared[(((((int)threadIdx.x) & 15) + 7888) - (rw_1 * 1024))]));
      half condval_15;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_15 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 14)];
      } else {
        condval_15 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_15 * weight_shared[(((((int)threadIdx.x) & 15) + 7904) - (rw_1 * 1024))]));
      half condval_16;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_16 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 15)];
      } else {
        condval_16 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_16 * weight_shared[(((((int)threadIdx.x) & 15) + 7920) - (rw_1 * 1024))]));
      half condval_17;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_17 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 16)];
      } else {
        condval_17 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_17 * weight_shared[(((((int)threadIdx.x) & 15) + 7936) - (rw_1 * 1024))]));
      half condval_18;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_18 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 17)];
      } else {
        condval_18 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_18 * weight_shared[(((((int)threadIdx.x) & 15) + 7952) - (rw_1 * 1024))]));
      half condval_19;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_19 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 18)];
      } else {
        condval_19 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_19 * weight_shared[(((((int)threadIdx.x) & 15) + 7968) - (rw_1 * 1024))]));
      half condval_20;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_20 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 19)];
      } else {
        condval_20 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_20 * weight_shared[(((((int)threadIdx.x) & 15) + 7984) - (rw_1 * 1024))]));
      half condval_21;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_21 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 20)];
      } else {
        condval_21 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_21 * weight_shared[(((((int)threadIdx.x) & 15) + 8000) - (rw_1 * 1024))]));
      half condval_22;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_22 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 21)];
      } else {
        condval_22 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_22 * weight_shared[(((((int)threadIdx.x) & 15) + 8016) - (rw_1 * 1024))]));
      half condval_23;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_23 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 22)];
      } else {
        condval_23 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_23 * weight_shared[(((((int)threadIdx.x) & 15) + 8032) - (rw_1 * 1024))]));
      half condval_24;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_24 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 23)];
      } else {
        condval_24 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_24 * weight_shared[(((((int)threadIdx.x) & 15) + 8048) - (rw_1 * 1024))]));
      half condval_25;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_25 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 24)];
      } else {
        condval_25 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_25 * weight_shared[(((((int)threadIdx.x) & 15) + 8064) - (rw_1 * 1024))]));
      half condval_26;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_26 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 25)];
      } else {
        condval_26 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_26 * weight_shared[(((((int)threadIdx.x) & 15) + 8080) - (rw_1 * 1024))]));
      half condval_27;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_27 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 26)];
      } else {
        condval_27 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_27 * weight_shared[(((((int)threadIdx.x) & 15) + 8096) - (rw_1 * 1024))]));
      half condval_28;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_28 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 27)];
      } else {
        condval_28 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_28 * weight_shared[(((((int)threadIdx.x) & 15) + 8112) - (rw_1 * 1024))]));
      half condval_29;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_29 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 28)];
      } else {
        condval_29 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_29 * weight_shared[(((((int)threadIdx.x) & 15) + 8128) - (rw_1 * 1024))]));
      half condval_30;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_30 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 29)];
      } else {
        condval_30 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_30 * weight_shared[(((((int)threadIdx.x) & 15) + 8144) - (rw_1 * 1024))]));
      half condval_31;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_31 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 30)];
      } else {
        condval_31 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_31 * weight_shared[(((((int)threadIdx.x) & 15) + 8160) - (rw_1 * 1024))]));
      half condval_32;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_32 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 31)];
      } else {
        condval_32 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_32 * weight_shared[(((((int)threadIdx.x) & 15) + 8176) - (rw_1 * 1024))]));
      half condval_33;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_33 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 32)];
      } else {
        condval_33 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_33 * weight_shared[(((((int)threadIdx.x) & 15) + 7168) - (rw_1 * 1024))]));
      half condval_34;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_34 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 33)];
      } else {
        condval_34 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_34 * weight_shared[(((((int)threadIdx.x) & 15) + 7184) - (rw_1 * 1024))]));
      half condval_35;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_35 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 34)];
      } else {
        condval_35 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_35 * weight_shared[(((((int)threadIdx.x) & 15) + 7200) - (rw_1 * 1024))]));
      half condval_36;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_36 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 35)];
      } else {
        condval_36 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_36 * weight_shared[(((((int)threadIdx.x) & 15) + 7216) - (rw_1 * 1024))]));
      half condval_37;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_37 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 36)];
      } else {
        condval_37 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_37 * weight_shared[(((((int)threadIdx.x) & 15) + 7232) - (rw_1 * 1024))]));
      half condval_38;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_38 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 37)];
      } else {
        condval_38 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_38 * weight_shared[(((((int)threadIdx.x) & 15) + 7248) - (rw_1 * 1024))]));
      half condval_39;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_39 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 38)];
      } else {
        condval_39 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_39 * weight_shared[(((((int)threadIdx.x) & 15) + 7264) - (rw_1 * 1024))]));
      half condval_40;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_40 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 39)];
      } else {
        condval_40 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_40 * weight_shared[(((((int)threadIdx.x) & 15) + 7280) - (rw_1 * 1024))]));
      half condval_41;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_41 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 40)];
      } else {
        condval_41 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_41 * weight_shared[(((((int)threadIdx.x) & 15) + 7296) - (rw_1 * 1024))]));
      half condval_42;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_42 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 41)];
      } else {
        condval_42 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_42 * weight_shared[(((((int)threadIdx.x) & 15) + 7312) - (rw_1 * 1024))]));
      half condval_43;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_43 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 42)];
      } else {
        condval_43 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_43 * weight_shared[(((((int)threadIdx.x) & 15) + 7328) - (rw_1 * 1024))]));
      half condval_44;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_44 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 43)];
      } else {
        condval_44 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_44 * weight_shared[(((((int)threadIdx.x) & 15) + 7344) - (rw_1 * 1024))]));
      half condval_45;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_45 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 44)];
      } else {
        condval_45 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_45 * weight_shared[(((((int)threadIdx.x) & 15) + 7360) - (rw_1 * 1024))]));
      half condval_46;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_46 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 45)];
      } else {
        condval_46 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_46 * weight_shared[(((((int)threadIdx.x) & 15) + 7376) - (rw_1 * 1024))]));
      half condval_47;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_47 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 46)];
      } else {
        condval_47 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_47 * weight_shared[(((((int)threadIdx.x) & 15) + 7392) - (rw_1 * 1024))]));
      half condval_48;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_48 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 47)];
      } else {
        condval_48 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_48 * weight_shared[(((((int)threadIdx.x) & 15) + 7408) - (rw_1 * 1024))]));
      half condval_49;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_49 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 48)];
      } else {
        condval_49 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_49 * weight_shared[(((((int)threadIdx.x) & 15) + 7424) - (rw_1 * 1024))]));
      half condval_50;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_50 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 49)];
      } else {
        condval_50 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_50 * weight_shared[(((((int)threadIdx.x) & 15) + 7440) - (rw_1 * 1024))]));
      half condval_51;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_51 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 50)];
      } else {
        condval_51 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_51 * weight_shared[(((((int)threadIdx.x) & 15) + 7456) - (rw_1 * 1024))]));
      half condval_52;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_52 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 51)];
      } else {
        condval_52 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_52 * weight_shared[(((((int)threadIdx.x) & 15) + 7472) - (rw_1 * 1024))]));
      half condval_53;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_53 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 52)];
      } else {
        condval_53 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_53 * weight_shared[(((((int)threadIdx.x) & 15) + 7488) - (rw_1 * 1024))]));
      half condval_54;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_54 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 53)];
      } else {
        condval_54 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_54 * weight_shared[(((((int)threadIdx.x) & 15) + 7504) - (rw_1 * 1024))]));
      half condval_55;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_55 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 54)];
      } else {
        condval_55 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_55 * weight_shared[(((((int)threadIdx.x) & 15) + 7520) - (rw_1 * 1024))]));
      half condval_56;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_56 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 55)];
      } else {
        condval_56 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_56 * weight_shared[(((((int)threadIdx.x) & 15) + 7536) - (rw_1 * 1024))]));
      half condval_57;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_57 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 56)];
      } else {
        condval_57 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_57 * weight_shared[(((((int)threadIdx.x) & 15) + 7552) - (rw_1 * 1024))]));
      half condval_58;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_58 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 57)];
      } else {
        condval_58 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_58 * weight_shared[(((((int)threadIdx.x) & 15) + 7568) - (rw_1 * 1024))]));
      half condval_59;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_59 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 58)];
      } else {
        condval_59 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_59 * weight_shared[(((((int)threadIdx.x) & 15) + 7584) - (rw_1 * 1024))]));
      half condval_60;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_60 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 59)];
      } else {
        condval_60 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_60 * weight_shared[(((((int)threadIdx.x) & 15) + 7600) - (rw_1 * 1024))]));
      half condval_61;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_61 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 60)];
      } else {
        condval_61 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_61 * weight_shared[(((((int)threadIdx.x) & 15) + 7616) - (rw_1 * 1024))]));
      half condval_62;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_62 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 61)];
      } else {
        condval_62 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_62 * weight_shared[(((((int)threadIdx.x) & 15) + 7632) - (rw_1 * 1024))]));
      half condval_63;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_63 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 62)];
      } else {
        condval_63 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_63 * weight_shared[(((((int)threadIdx.x) & 15) + 7648) - (rw_1 * 1024))]));
      half condval_64;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_64 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 63)];
      } else {
        condval_64 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_64 * weight_shared[(((((int)threadIdx.x) & 15) + 7664) - (rw_1 * 1024))]));
      half condval_65;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_65 = PadInput_shared[(((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32))];
      } else {
        condval_65 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_65 * weight_shared[(((((int)threadIdx.x) & 15) + 5632) - (rw_1 * 1024))]));
      half condval_66;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_66 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 1)];
      } else {
        condval_66 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_66 * weight_shared[(((((int)threadIdx.x) & 15) + 5648) - (rw_1 * 1024))]));
      half condval_67;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_67 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 2)];
      } else {
        condval_67 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_67 * weight_shared[(((((int)threadIdx.x) & 15) + 5664) - (rw_1 * 1024))]));
      half condval_68;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_68 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 3)];
      } else {
        condval_68 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_68 * weight_shared[(((((int)threadIdx.x) & 15) + 5680) - (rw_1 * 1024))]));
      half condval_69;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_69 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 4)];
      } else {
        condval_69 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_69 * weight_shared[(((((int)threadIdx.x) & 15) + 5696) - (rw_1 * 1024))]));
      half condval_70;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_70 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 5)];
      } else {
        condval_70 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_70 * weight_shared[(((((int)threadIdx.x) & 15) + 5712) - (rw_1 * 1024))]));
      half condval_71;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_71 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 6)];
      } else {
        condval_71 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_71 * weight_shared[(((((int)threadIdx.x) & 15) + 5728) - (rw_1 * 1024))]));
      half condval_72;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_72 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 7)];
      } else {
        condval_72 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_72 * weight_shared[(((((int)threadIdx.x) & 15) + 5744) - (rw_1 * 1024))]));
      half condval_73;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_73 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 8)];
      } else {
        condval_73 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_73 * weight_shared[(((((int)threadIdx.x) & 15) + 5760) - (rw_1 * 1024))]));
      half condval_74;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_74 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 9)];
      } else {
        condval_74 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_74 * weight_shared[(((((int)threadIdx.x) & 15) + 5776) - (rw_1 * 1024))]));
      half condval_75;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_75 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 10)];
      } else {
        condval_75 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_75 * weight_shared[(((((int)threadIdx.x) & 15) + 5792) - (rw_1 * 1024))]));
      half condval_76;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_76 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 11)];
      } else {
        condval_76 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_76 * weight_shared[(((((int)threadIdx.x) & 15) + 5808) - (rw_1 * 1024))]));
      half condval_77;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_77 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 12)];
      } else {
        condval_77 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_77 * weight_shared[(((((int)threadIdx.x) & 15) + 5824) - (rw_1 * 1024))]));
      half condval_78;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_78 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 13)];
      } else {
        condval_78 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_78 * weight_shared[(((((int)threadIdx.x) & 15) + 5840) - (rw_1 * 1024))]));
      half condval_79;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_79 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 14)];
      } else {
        condval_79 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_79 * weight_shared[(((((int)threadIdx.x) & 15) + 5856) - (rw_1 * 1024))]));
      half condval_80;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_80 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 15)];
      } else {
        condval_80 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_80 * weight_shared[(((((int)threadIdx.x) & 15) + 5872) - (rw_1 * 1024))]));
      half condval_81;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_81 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 16)];
      } else {
        condval_81 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_81 * weight_shared[(((((int)threadIdx.x) & 15) + 5888) - (rw_1 * 1024))]));
      half condval_82;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_82 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 17)];
      } else {
        condval_82 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_82 * weight_shared[(((((int)threadIdx.x) & 15) + 5904) - (rw_1 * 1024))]));
      half condval_83;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_83 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 18)];
      } else {
        condval_83 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_83 * weight_shared[(((((int)threadIdx.x) & 15) + 5920) - (rw_1 * 1024))]));
      half condval_84;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_84 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 19)];
      } else {
        condval_84 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_84 * weight_shared[(((((int)threadIdx.x) & 15) + 5936) - (rw_1 * 1024))]));
      half condval_85;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_85 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 20)];
      } else {
        condval_85 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_85 * weight_shared[(((((int)threadIdx.x) & 15) + 5952) - (rw_1 * 1024))]));
      half condval_86;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_86 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 21)];
      } else {
        condval_86 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_86 * weight_shared[(((((int)threadIdx.x) & 15) + 5968) - (rw_1 * 1024))]));
      half condval_87;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_87 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 22)];
      } else {
        condval_87 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_87 * weight_shared[(((((int)threadIdx.x) & 15) + 5984) - (rw_1 * 1024))]));
      half condval_88;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_88 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 23)];
      } else {
        condval_88 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_88 * weight_shared[(((((int)threadIdx.x) & 15) + 6000) - (rw_1 * 1024))]));
      half condval_89;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_89 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 24)];
      } else {
        condval_89 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_89 * weight_shared[(((((int)threadIdx.x) & 15) + 6016) - (rw_1 * 1024))]));
      half condval_90;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_90 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 25)];
      } else {
        condval_90 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_90 * weight_shared[(((((int)threadIdx.x) & 15) + 6032) - (rw_1 * 1024))]));
      half condval_91;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_91 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 26)];
      } else {
        condval_91 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_91 * weight_shared[(((((int)threadIdx.x) & 15) + 6048) - (rw_1 * 1024))]));
      half condval_92;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_92 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 27)];
      } else {
        condval_92 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_92 * weight_shared[(((((int)threadIdx.x) & 15) + 6064) - (rw_1 * 1024))]));
      half condval_93;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_93 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 28)];
      } else {
        condval_93 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_93 * weight_shared[(((((int)threadIdx.x) & 15) + 6080) - (rw_1 * 1024))]));
      half condval_94;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_94 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 29)];
      } else {
        condval_94 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_94 * weight_shared[(((((int)threadIdx.x) & 15) + 6096) - (rw_1 * 1024))]));
      half condval_95;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_95 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 30)];
      } else {
        condval_95 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_95 * weight_shared[(((((int)threadIdx.x) & 15) + 6112) - (rw_1 * 1024))]));
      half condval_96;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_96 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 31)];
      } else {
        condval_96 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_96 * weight_shared[(((((int)threadIdx.x) & 15) + 6128) - (rw_1 * 1024))]));
      half condval_97;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_97 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 32)];
      } else {
        condval_97 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_97 * weight_shared[(((((int)threadIdx.x) & 15) + 5120) - (rw_1 * 1024))]));
      half condval_98;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_98 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 33)];
      } else {
        condval_98 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_98 * weight_shared[(((((int)threadIdx.x) & 15) + 5136) - (rw_1 * 1024))]));
      half condval_99;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_99 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 34)];
      } else {
        condval_99 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_99 * weight_shared[(((((int)threadIdx.x) & 15) + 5152) - (rw_1 * 1024))]));
      half condval_100;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_100 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 35)];
      } else {
        condval_100 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_100 * weight_shared[(((((int)threadIdx.x) & 15) + 5168) - (rw_1 * 1024))]));
      half condval_101;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_101 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 36)];
      } else {
        condval_101 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_101 * weight_shared[(((((int)threadIdx.x) & 15) + 5184) - (rw_1 * 1024))]));
      half condval_102;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_102 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 37)];
      } else {
        condval_102 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_102 * weight_shared[(((((int)threadIdx.x) & 15) + 5200) - (rw_1 * 1024))]));
      half condval_103;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_103 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 38)];
      } else {
        condval_103 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_103 * weight_shared[(((((int)threadIdx.x) & 15) + 5216) - (rw_1 * 1024))]));
      half condval_104;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_104 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 39)];
      } else {
        condval_104 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_104 * weight_shared[(((((int)threadIdx.x) & 15) + 5232) - (rw_1 * 1024))]));
      half condval_105;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_105 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 40)];
      } else {
        condval_105 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_105 * weight_shared[(((((int)threadIdx.x) & 15) + 5248) - (rw_1 * 1024))]));
      half condval_106;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_106 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 41)];
      } else {
        condval_106 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_106 * weight_shared[(((((int)threadIdx.x) & 15) + 5264) - (rw_1 * 1024))]));
      half condval_107;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_107 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 42)];
      } else {
        condval_107 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_107 * weight_shared[(((((int)threadIdx.x) & 15) + 5280) - (rw_1 * 1024))]));
      half condval_108;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_108 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 43)];
      } else {
        condval_108 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_108 * weight_shared[(((((int)threadIdx.x) & 15) + 5296) - (rw_1 * 1024))]));
      half condval_109;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_109 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 44)];
      } else {
        condval_109 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_109 * weight_shared[(((((int)threadIdx.x) & 15) + 5312) - (rw_1 * 1024))]));
      half condval_110;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_110 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 45)];
      } else {
        condval_110 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_110 * weight_shared[(((((int)threadIdx.x) & 15) + 5328) - (rw_1 * 1024))]));
      half condval_111;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_111 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 46)];
      } else {
        condval_111 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_111 * weight_shared[(((((int)threadIdx.x) & 15) + 5344) - (rw_1 * 1024))]));
      half condval_112;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_112 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 47)];
      } else {
        condval_112 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_112 * weight_shared[(((((int)threadIdx.x) & 15) + 5360) - (rw_1 * 1024))]));
      half condval_113;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_113 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 48)];
      } else {
        condval_113 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_113 * weight_shared[(((((int)threadIdx.x) & 15) + 5376) - (rw_1 * 1024))]));
      half condval_114;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_114 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 49)];
      } else {
        condval_114 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_114 * weight_shared[(((((int)threadIdx.x) & 15) + 5392) - (rw_1 * 1024))]));
      half condval_115;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_115 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 50)];
      } else {
        condval_115 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_115 * weight_shared[(((((int)threadIdx.x) & 15) + 5408) - (rw_1 * 1024))]));
      half condval_116;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_116 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 51)];
      } else {
        condval_116 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_116 * weight_shared[(((((int)threadIdx.x) & 15) + 5424) - (rw_1 * 1024))]));
      half condval_117;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_117 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 52)];
      } else {
        condval_117 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_117 * weight_shared[(((((int)threadIdx.x) & 15) + 5440) - (rw_1 * 1024))]));
      half condval_118;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_118 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 53)];
      } else {
        condval_118 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_118 * weight_shared[(((((int)threadIdx.x) & 15) + 5456) - (rw_1 * 1024))]));
      half condval_119;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_119 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 54)];
      } else {
        condval_119 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_119 * weight_shared[(((((int)threadIdx.x) & 15) + 5472) - (rw_1 * 1024))]));
      half condval_120;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_120 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 55)];
      } else {
        condval_120 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_120 * weight_shared[(((((int)threadIdx.x) & 15) + 5488) - (rw_1 * 1024))]));
      half condval_121;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_121 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 56)];
      } else {
        condval_121 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_121 * weight_shared[(((((int)threadIdx.x) & 15) + 5504) - (rw_1 * 1024))]));
      half condval_122;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_122 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 57)];
      } else {
        condval_122 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_122 * weight_shared[(((((int)threadIdx.x) & 15) + 5520) - (rw_1 * 1024))]));
      half condval_123;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_123 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 58)];
      } else {
        condval_123 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_123 * weight_shared[(((((int)threadIdx.x) & 15) + 5536) - (rw_1 * 1024))]));
      half condval_124;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_124 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 59)];
      } else {
        condval_124 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_124 * weight_shared[(((((int)threadIdx.x) & 15) + 5552) - (rw_1 * 1024))]));
      half condval_125;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_125 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 60)];
      } else {
        condval_125 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_125 * weight_shared[(((((int)threadIdx.x) & 15) + 5568) - (rw_1 * 1024))]));
      half condval_126;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_126 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 61)];
      } else {
        condval_126 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_126 * weight_shared[(((((int)threadIdx.x) & 15) + 5584) - (rw_1 * 1024))]));
      half condval_127;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_127 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 62)];
      } else {
        condval_127 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_127 * weight_shared[(((((int)threadIdx.x) & 15) + 5600) - (rw_1 * 1024))]));
      half condval_128;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_128 = PadInput_shared[((((((((int)threadIdx.x) + 32) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 63)];
      } else {
        condval_128 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_128 * weight_shared[(((((int)threadIdx.x) & 15) + 5616) - (rw_1 * 1024))]));
      half condval_129;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_129 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 128)];
      } else {
        condval_129 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_129 * weight_shared[(((((int)threadIdx.x) & 15) + 3584) - (rw_1 * 1024))]));
      half condval_130;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_130 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 129)];
      } else {
        condval_130 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_130 * weight_shared[(((((int)threadIdx.x) & 15) + 3600) - (rw_1 * 1024))]));
      half condval_131;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_131 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 130)];
      } else {
        condval_131 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_131 * weight_shared[(((((int)threadIdx.x) & 15) + 3616) - (rw_1 * 1024))]));
      half condval_132;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_132 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 131)];
      } else {
        condval_132 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_132 * weight_shared[(((((int)threadIdx.x) & 15) + 3632) - (rw_1 * 1024))]));
      half condval_133;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_133 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 132)];
      } else {
        condval_133 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_133 * weight_shared[(((((int)threadIdx.x) & 15) + 3648) - (rw_1 * 1024))]));
      half condval_134;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_134 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 133)];
      } else {
        condval_134 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_134 * weight_shared[(((((int)threadIdx.x) & 15) + 3664) - (rw_1 * 1024))]));
      half condval_135;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_135 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 134)];
      } else {
        condval_135 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_135 * weight_shared[(((((int)threadIdx.x) & 15) + 3680) - (rw_1 * 1024))]));
      half condval_136;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_136 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 135)];
      } else {
        condval_136 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_136 * weight_shared[(((((int)threadIdx.x) & 15) + 3696) - (rw_1 * 1024))]));
      half condval_137;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_137 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 136)];
      } else {
        condval_137 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_137 * weight_shared[(((((int)threadIdx.x) & 15) + 3712) - (rw_1 * 1024))]));
      half condval_138;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_138 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 137)];
      } else {
        condval_138 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_138 * weight_shared[(((((int)threadIdx.x) & 15) + 3728) - (rw_1 * 1024))]));
      half condval_139;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_139 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 138)];
      } else {
        condval_139 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_139 * weight_shared[(((((int)threadIdx.x) & 15) + 3744) - (rw_1 * 1024))]));
      half condval_140;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_140 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 139)];
      } else {
        condval_140 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_140 * weight_shared[(((((int)threadIdx.x) & 15) + 3760) - (rw_1 * 1024))]));
      half condval_141;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_141 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 140)];
      } else {
        condval_141 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_141 * weight_shared[(((((int)threadIdx.x) & 15) + 3776) - (rw_1 * 1024))]));
      half condval_142;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_142 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 141)];
      } else {
        condval_142 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_142 * weight_shared[(((((int)threadIdx.x) & 15) + 3792) - (rw_1 * 1024))]));
      half condval_143;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_143 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 142)];
      } else {
        condval_143 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_143 * weight_shared[(((((int)threadIdx.x) & 15) + 3808) - (rw_1 * 1024))]));
      half condval_144;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_144 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 143)];
      } else {
        condval_144 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_144 * weight_shared[(((((int)threadIdx.x) & 15) + 3824) - (rw_1 * 1024))]));
      half condval_145;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_145 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 144)];
      } else {
        condval_145 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_145 * weight_shared[(((((int)threadIdx.x) & 15) + 3840) - (rw_1 * 1024))]));
      half condval_146;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_146 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 145)];
      } else {
        condval_146 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_146 * weight_shared[(((((int)threadIdx.x) & 15) + 3856) - (rw_1 * 1024))]));
      half condval_147;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_147 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 146)];
      } else {
        condval_147 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_147 * weight_shared[(((((int)threadIdx.x) & 15) + 3872) - (rw_1 * 1024))]));
      half condval_148;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_148 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 147)];
      } else {
        condval_148 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_148 * weight_shared[(((((int)threadIdx.x) & 15) + 3888) - (rw_1 * 1024))]));
      half condval_149;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_149 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 148)];
      } else {
        condval_149 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_149 * weight_shared[(((((int)threadIdx.x) & 15) + 3904) - (rw_1 * 1024))]));
      half condval_150;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_150 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 149)];
      } else {
        condval_150 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_150 * weight_shared[(((((int)threadIdx.x) & 15) + 3920) - (rw_1 * 1024))]));
      half condval_151;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_151 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 150)];
      } else {
        condval_151 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_151 * weight_shared[(((((int)threadIdx.x) & 15) + 3936) - (rw_1 * 1024))]));
      half condval_152;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_152 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 151)];
      } else {
        condval_152 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_152 * weight_shared[(((((int)threadIdx.x) & 15) + 3952) - (rw_1 * 1024))]));
      half condval_153;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_153 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 152)];
      } else {
        condval_153 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_153 * weight_shared[(((((int)threadIdx.x) & 15) + 3968) - (rw_1 * 1024))]));
      half condval_154;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_154 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 153)];
      } else {
        condval_154 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_154 * weight_shared[(((((int)threadIdx.x) & 15) + 3984) - (rw_1 * 1024))]));
      half condval_155;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_155 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 154)];
      } else {
        condval_155 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_155 * weight_shared[(((((int)threadIdx.x) & 15) + 4000) - (rw_1 * 1024))]));
      half condval_156;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_156 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 155)];
      } else {
        condval_156 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_156 * weight_shared[(((((int)threadIdx.x) & 15) + 4016) - (rw_1 * 1024))]));
      half condval_157;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_157 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 156)];
      } else {
        condval_157 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_157 * weight_shared[(((((int)threadIdx.x) & 15) + 4032) - (rw_1 * 1024))]));
      half condval_158;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_158 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 157)];
      } else {
        condval_158 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_158 * weight_shared[(((((int)threadIdx.x) & 15) + 4048) - (rw_1 * 1024))]));
      half condval_159;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_159 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 158)];
      } else {
        condval_159 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_159 * weight_shared[(((((int)threadIdx.x) & 15) + 4064) - (rw_1 * 1024))]));
      half condval_160;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_160 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 159)];
      } else {
        condval_160 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_160 * weight_shared[(((((int)threadIdx.x) & 15) + 4080) - (rw_1 * 1024))]));
      half condval_161;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_161 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 160)];
      } else {
        condval_161 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_161 * weight_shared[(((((int)threadIdx.x) & 15) + 3072) - (rw_1 * 1024))]));
      half condval_162;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_162 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 161)];
      } else {
        condval_162 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_162 * weight_shared[(((((int)threadIdx.x) & 15) + 3088) - (rw_1 * 1024))]));
      half condval_163;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_163 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 162)];
      } else {
        condval_163 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_163 * weight_shared[(((((int)threadIdx.x) & 15) + 3104) - (rw_1 * 1024))]));
      half condval_164;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_164 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 163)];
      } else {
        condval_164 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_164 * weight_shared[(((((int)threadIdx.x) & 15) + 3120) - (rw_1 * 1024))]));
      half condval_165;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_165 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 164)];
      } else {
        condval_165 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_165 * weight_shared[(((((int)threadIdx.x) & 15) + 3136) - (rw_1 * 1024))]));
      half condval_166;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_166 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 165)];
      } else {
        condval_166 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_166 * weight_shared[(((((int)threadIdx.x) & 15) + 3152) - (rw_1 * 1024))]));
      half condval_167;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_167 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 166)];
      } else {
        condval_167 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_167 * weight_shared[(((((int)threadIdx.x) & 15) + 3168) - (rw_1 * 1024))]));
      half condval_168;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_168 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 167)];
      } else {
        condval_168 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_168 * weight_shared[(((((int)threadIdx.x) & 15) + 3184) - (rw_1 * 1024))]));
      half condval_169;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_169 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 168)];
      } else {
        condval_169 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_169 * weight_shared[(((((int)threadIdx.x) & 15) + 3200) - (rw_1 * 1024))]));
      half condval_170;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_170 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 169)];
      } else {
        condval_170 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_170 * weight_shared[(((((int)threadIdx.x) & 15) + 3216) - (rw_1 * 1024))]));
      half condval_171;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_171 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 170)];
      } else {
        condval_171 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_171 * weight_shared[(((((int)threadIdx.x) & 15) + 3232) - (rw_1 * 1024))]));
      half condval_172;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_172 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 171)];
      } else {
        condval_172 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_172 * weight_shared[(((((int)threadIdx.x) & 15) + 3248) - (rw_1 * 1024))]));
      half condval_173;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_173 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 172)];
      } else {
        condval_173 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_173 * weight_shared[(((((int)threadIdx.x) & 15) + 3264) - (rw_1 * 1024))]));
      half condval_174;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_174 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 173)];
      } else {
        condval_174 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_174 * weight_shared[(((((int)threadIdx.x) & 15) + 3280) - (rw_1 * 1024))]));
      half condval_175;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_175 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 174)];
      } else {
        condval_175 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_175 * weight_shared[(((((int)threadIdx.x) & 15) + 3296) - (rw_1 * 1024))]));
      half condval_176;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_176 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 175)];
      } else {
        condval_176 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_176 * weight_shared[(((((int)threadIdx.x) & 15) + 3312) - (rw_1 * 1024))]));
      half condval_177;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_177 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 176)];
      } else {
        condval_177 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_177 * weight_shared[(((((int)threadIdx.x) & 15) + 3328) - (rw_1 * 1024))]));
      half condval_178;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_178 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 177)];
      } else {
        condval_178 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_178 * weight_shared[(((((int)threadIdx.x) & 15) + 3344) - (rw_1 * 1024))]));
      half condval_179;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_179 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 178)];
      } else {
        condval_179 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_179 * weight_shared[(((((int)threadIdx.x) & 15) + 3360) - (rw_1 * 1024))]));
      half condval_180;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_180 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 179)];
      } else {
        condval_180 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_180 * weight_shared[(((((int)threadIdx.x) & 15) + 3376) - (rw_1 * 1024))]));
      half condval_181;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_181 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 180)];
      } else {
        condval_181 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_181 * weight_shared[(((((int)threadIdx.x) & 15) + 3392) - (rw_1 * 1024))]));
      half condval_182;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_182 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 181)];
      } else {
        condval_182 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_182 * weight_shared[(((((int)threadIdx.x) & 15) + 3408) - (rw_1 * 1024))]));
      half condval_183;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_183 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 182)];
      } else {
        condval_183 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_183 * weight_shared[(((((int)threadIdx.x) & 15) + 3424) - (rw_1 * 1024))]));
      half condval_184;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_184 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 183)];
      } else {
        condval_184 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_184 * weight_shared[(((((int)threadIdx.x) & 15) + 3440) - (rw_1 * 1024))]));
      half condval_185;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_185 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 184)];
      } else {
        condval_185 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_185 * weight_shared[(((((int)threadIdx.x) & 15) + 3456) - (rw_1 * 1024))]));
      half condval_186;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_186 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 185)];
      } else {
        condval_186 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_186 * weight_shared[(((((int)threadIdx.x) & 15) + 3472) - (rw_1 * 1024))]));
      half condval_187;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_187 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 186)];
      } else {
        condval_187 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_187 * weight_shared[(((((int)threadIdx.x) & 15) + 3488) - (rw_1 * 1024))]));
      half condval_188;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_188 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 187)];
      } else {
        condval_188 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_188 * weight_shared[(((((int)threadIdx.x) & 15) + 3504) - (rw_1 * 1024))]));
      half condval_189;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_189 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 188)];
      } else {
        condval_189 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_189 * weight_shared[(((((int)threadIdx.x) & 15) + 3520) - (rw_1 * 1024))]));
      half condval_190;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_190 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 189)];
      } else {
        condval_190 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_190 * weight_shared[(((((int)threadIdx.x) & 15) + 3536) - (rw_1 * 1024))]));
      half condval_191;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_191 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 190)];
      } else {
        condval_191 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_191 * weight_shared[(((((int)threadIdx.x) & 15) + 3552) - (rw_1 * 1024))]));
      half condval_192;
      if ((((((int)threadIdx.x) & 63) >> 5) == 0)) {
        condval_192 = PadInput_shared[(((((((int)threadIdx.x) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 191)];
      } else {
        condval_192 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_192 * weight_shared[(((((int)threadIdx.x) & 15) + 3568) - (rw_1 * 1024))]));
      half condval_193;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_193 = PadInput_shared[(((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32))];
      } else {
        condval_193 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_193 * weight_shared[(((((int)threadIdx.x) & 15) + 1536) - (rw_1 * 1024))]));
      half condval_194;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_194 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 1)];
      } else {
        condval_194 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_194 * weight_shared[(((((int)threadIdx.x) & 15) + 1552) - (rw_1 * 1024))]));
      half condval_195;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_195 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 2)];
      } else {
        condval_195 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_195 * weight_shared[(((((int)threadIdx.x) & 15) + 1568) - (rw_1 * 1024))]));
      half condval_196;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_196 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 3)];
      } else {
        condval_196 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_196 * weight_shared[(((((int)threadIdx.x) & 15) + 1584) - (rw_1 * 1024))]));
      half condval_197;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_197 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 4)];
      } else {
        condval_197 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_197 * weight_shared[(((((int)threadIdx.x) & 15) + 1600) - (rw_1 * 1024))]));
      half condval_198;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_198 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 5)];
      } else {
        condval_198 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_198 * weight_shared[(((((int)threadIdx.x) & 15) + 1616) - (rw_1 * 1024))]));
      half condval_199;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_199 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 6)];
      } else {
        condval_199 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_199 * weight_shared[(((((int)threadIdx.x) & 15) + 1632) - (rw_1 * 1024))]));
      half condval_200;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_200 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 7)];
      } else {
        condval_200 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_200 * weight_shared[(((((int)threadIdx.x) & 15) + 1648) - (rw_1 * 1024))]));
      half condval_201;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_201 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 8)];
      } else {
        condval_201 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_201 * weight_shared[(((((int)threadIdx.x) & 15) + 1664) - (rw_1 * 1024))]));
      half condval_202;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_202 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 9)];
      } else {
        condval_202 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_202 * weight_shared[(((((int)threadIdx.x) & 15) + 1680) - (rw_1 * 1024))]));
      half condval_203;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_203 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 10)];
      } else {
        condval_203 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_203 * weight_shared[(((((int)threadIdx.x) & 15) + 1696) - (rw_1 * 1024))]));
      half condval_204;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_204 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 11)];
      } else {
        condval_204 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_204 * weight_shared[(((((int)threadIdx.x) & 15) + 1712) - (rw_1 * 1024))]));
      half condval_205;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_205 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 12)];
      } else {
        condval_205 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_205 * weight_shared[(((((int)threadIdx.x) & 15) + 1728) - (rw_1 * 1024))]));
      half condval_206;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_206 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 13)];
      } else {
        condval_206 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_206 * weight_shared[(((((int)threadIdx.x) & 15) + 1744) - (rw_1 * 1024))]));
      half condval_207;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_207 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 14)];
      } else {
        condval_207 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_207 * weight_shared[(((((int)threadIdx.x) & 15) + 1760) - (rw_1 * 1024))]));
      half condval_208;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_208 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 15)];
      } else {
        condval_208 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_208 * weight_shared[(((((int)threadIdx.x) & 15) + 1776) - (rw_1 * 1024))]));
      half condval_209;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_209 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 16)];
      } else {
        condval_209 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_209 * weight_shared[(((((int)threadIdx.x) & 15) + 1792) - (rw_1 * 1024))]));
      half condval_210;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_210 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 17)];
      } else {
        condval_210 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_210 * weight_shared[(((((int)threadIdx.x) & 15) + 1808) - (rw_1 * 1024))]));
      half condval_211;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_211 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 18)];
      } else {
        condval_211 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_211 * weight_shared[(((((int)threadIdx.x) & 15) + 1824) - (rw_1 * 1024))]));
      half condval_212;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_212 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 19)];
      } else {
        condval_212 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_212 * weight_shared[(((((int)threadIdx.x) & 15) + 1840) - (rw_1 * 1024))]));
      half condval_213;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_213 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 20)];
      } else {
        condval_213 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_213 * weight_shared[(((((int)threadIdx.x) & 15) + 1856) - (rw_1 * 1024))]));
      half condval_214;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_214 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 21)];
      } else {
        condval_214 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_214 * weight_shared[(((((int)threadIdx.x) & 15) + 1872) - (rw_1 * 1024))]));
      half condval_215;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_215 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 22)];
      } else {
        condval_215 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_215 * weight_shared[(((((int)threadIdx.x) & 15) + 1888) - (rw_1 * 1024))]));
      half condval_216;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_216 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 23)];
      } else {
        condval_216 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_216 * weight_shared[(((((int)threadIdx.x) & 15) + 1904) - (rw_1 * 1024))]));
      half condval_217;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_217 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 24)];
      } else {
        condval_217 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_217 * weight_shared[(((((int)threadIdx.x) & 15) + 1920) - (rw_1 * 1024))]));
      half condval_218;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_218 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 25)];
      } else {
        condval_218 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_218 * weight_shared[(((((int)threadIdx.x) & 15) + 1936) - (rw_1 * 1024))]));
      half condval_219;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_219 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 26)];
      } else {
        condval_219 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_219 * weight_shared[(((((int)threadIdx.x) & 15) + 1952) - (rw_1 * 1024))]));
      half condval_220;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_220 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 27)];
      } else {
        condval_220 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_220 * weight_shared[(((((int)threadIdx.x) & 15) + 1968) - (rw_1 * 1024))]));
      half condval_221;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_221 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 28)];
      } else {
        condval_221 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_221 * weight_shared[(((((int)threadIdx.x) & 15) + 1984) - (rw_1 * 1024))]));
      half condval_222;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_222 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 29)];
      } else {
        condval_222 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_222 * weight_shared[(((((int)threadIdx.x) & 15) + 2000) - (rw_1 * 1024))]));
      half condval_223;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_223 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 30)];
      } else {
        condval_223 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_223 * weight_shared[(((((int)threadIdx.x) & 15) + 2016) - (rw_1 * 1024))]));
      half condval_224;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_224 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 31)];
      } else {
        condval_224 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[0] = (conv2d_transpose_nhwc_local[0] + (condval_224 * weight_shared[(((((int)threadIdx.x) & 15) + 2032) - (rw_1 * 1024))]));
      half condval_225;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_225 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 32)];
      } else {
        condval_225 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_225 * weight_shared[(((((int)threadIdx.x) & 15) + 1024) - (rw_1 * 1024))]));
      half condval_226;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_226 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 33)];
      } else {
        condval_226 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_226 * weight_shared[(((((int)threadIdx.x) & 15) + 1040) - (rw_1 * 1024))]));
      half condval_227;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_227 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 34)];
      } else {
        condval_227 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_227 * weight_shared[(((((int)threadIdx.x) & 15) + 1056) - (rw_1 * 1024))]));
      half condval_228;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_228 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 35)];
      } else {
        condval_228 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_228 * weight_shared[(((((int)threadIdx.x) & 15) + 1072) - (rw_1 * 1024))]));
      half condval_229;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_229 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 36)];
      } else {
        condval_229 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_229 * weight_shared[(((((int)threadIdx.x) & 15) + 1088) - (rw_1 * 1024))]));
      half condval_230;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_230 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 37)];
      } else {
        condval_230 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_230 * weight_shared[(((((int)threadIdx.x) & 15) + 1104) - (rw_1 * 1024))]));
      half condval_231;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_231 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 38)];
      } else {
        condval_231 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_231 * weight_shared[(((((int)threadIdx.x) & 15) + 1120) - (rw_1 * 1024))]));
      half condval_232;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_232 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 39)];
      } else {
        condval_232 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_232 * weight_shared[(((((int)threadIdx.x) & 15) + 1136) - (rw_1 * 1024))]));
      half condval_233;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_233 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 40)];
      } else {
        condval_233 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_233 * weight_shared[(((((int)threadIdx.x) & 15) + 1152) - (rw_1 * 1024))]));
      half condval_234;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_234 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 41)];
      } else {
        condval_234 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_234 * weight_shared[(((((int)threadIdx.x) & 15) + 1168) - (rw_1 * 1024))]));
      half condval_235;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_235 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 42)];
      } else {
        condval_235 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_235 * weight_shared[(((((int)threadIdx.x) & 15) + 1184) - (rw_1 * 1024))]));
      half condval_236;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_236 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 43)];
      } else {
        condval_236 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_236 * weight_shared[(((((int)threadIdx.x) & 15) + 1200) - (rw_1 * 1024))]));
      half condval_237;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_237 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 44)];
      } else {
        condval_237 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_237 * weight_shared[(((((int)threadIdx.x) & 15) + 1216) - (rw_1 * 1024))]));
      half condval_238;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_238 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 45)];
      } else {
        condval_238 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_238 * weight_shared[(((((int)threadIdx.x) & 15) + 1232) - (rw_1 * 1024))]));
      half condval_239;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_239 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 46)];
      } else {
        condval_239 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_239 * weight_shared[(((((int)threadIdx.x) & 15) + 1248) - (rw_1 * 1024))]));
      half condval_240;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_240 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 47)];
      } else {
        condval_240 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_240 * weight_shared[(((((int)threadIdx.x) & 15) + 1264) - (rw_1 * 1024))]));
      half condval_241;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_241 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 48)];
      } else {
        condval_241 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_241 * weight_shared[(((((int)threadIdx.x) & 15) + 1280) - (rw_1 * 1024))]));
      half condval_242;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_242 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 49)];
      } else {
        condval_242 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_242 * weight_shared[(((((int)threadIdx.x) & 15) + 1296) - (rw_1 * 1024))]));
      half condval_243;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_243 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 50)];
      } else {
        condval_243 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_243 * weight_shared[(((((int)threadIdx.x) & 15) + 1312) - (rw_1 * 1024))]));
      half condval_244;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_244 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 51)];
      } else {
        condval_244 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_244 * weight_shared[(((((int)threadIdx.x) & 15) + 1328) - (rw_1 * 1024))]));
      half condval_245;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_245 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 52)];
      } else {
        condval_245 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_245 * weight_shared[(((((int)threadIdx.x) & 15) + 1344) - (rw_1 * 1024))]));
      half condval_246;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_246 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 53)];
      } else {
        condval_246 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_246 * weight_shared[(((((int)threadIdx.x) & 15) + 1360) - (rw_1 * 1024))]));
      half condval_247;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_247 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 54)];
      } else {
        condval_247 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_247 * weight_shared[(((((int)threadIdx.x) & 15) + 1376) - (rw_1 * 1024))]));
      half condval_248;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_248 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 55)];
      } else {
        condval_248 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_248 * weight_shared[(((((int)threadIdx.x) & 15) + 1392) - (rw_1 * 1024))]));
      half condval_249;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_249 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 56)];
      } else {
        condval_249 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_249 * weight_shared[(((((int)threadIdx.x) & 15) + 1408) - (rw_1 * 1024))]));
      half condval_250;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_250 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 57)];
      } else {
        condval_250 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_250 * weight_shared[(((((int)threadIdx.x) & 15) + 1424) - (rw_1 * 1024))]));
      half condval_251;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_251 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 58)];
      } else {
        condval_251 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_251 * weight_shared[(((((int)threadIdx.x) & 15) + 1440) - (rw_1 * 1024))]));
      half condval_252;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_252 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 59)];
      } else {
        condval_252 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_252 * weight_shared[(((((int)threadIdx.x) & 15) + 1456) - (rw_1 * 1024))]));
      half condval_253;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_253 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 60)];
      } else {
        condval_253 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_253 * weight_shared[(((((int)threadIdx.x) & 15) + 1472) - (rw_1 * 1024))]));
      half condval_254;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_254 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 61)];
      } else {
        condval_254 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_254 * weight_shared[(((((int)threadIdx.x) & 15) + 1488) - (rw_1 * 1024))]));
      half condval_255;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_255 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 62)];
      } else {
        condval_255 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_255 * weight_shared[(((((int)threadIdx.x) & 15) + 1504) - (rw_1 * 1024))]));
      half condval_256;
      if (((((((int)threadIdx.x) >> 5) + 1) % 2) == 0)) {
        condval_256 = PadInput_shared[((((((((int)threadIdx.x) + 96) >> 6) * 128) + (((((int)threadIdx.x) & 31) >> 4) * 32)) + (rw_1 * 32)) + 63)];
      } else {
        condval_256 = __float2half_rn(0.000000e+00f);
      }
      conv2d_transpose_nhwc_local[1] = (conv2d_transpose_nhwc_local[1] + (condval_256 * weight_shared[(((((int)threadIdx.x) & 15) + 1520) - (rw_1 * 1024))]));
    }
  }
  conv2d_transpose_nhwc[(((((((((int)blockIdx.x) >> 5) * 8192) + ((((int)threadIdx.x) >> 5) * 2048)) + (((((int)blockIdx.x) & 31) >> 4) * 1024)) + (((((int)threadIdx.x) & 31) >> 4) * 512)) + ((((int)blockIdx.x) & 15) * 16)) + (((int)threadIdx.x) & 15))] = conv2d_transpose_nhwc_local[0];
  conv2d_transpose_nhwc[((((((((((int)blockIdx.x) >> 5) * 8192) + ((((int)threadIdx.x) >> 5) * 2048)) + (((((int)blockIdx.x) & 31) >> 4) * 1024)) + (((((int)threadIdx.x) & 31) >> 4) * 512)) + ((((int)blockIdx.x) & 15) * 16)) + (((int)threadIdx.x) & 15)) + 256)] = conv2d_transpose_nhwc_local[1];
}


The time of T2D is 0.115 ms
2025-07-21 08:53:52 [INFO] Logging directory: /tmp/tmp9ragb8nt/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 08:57:13 [DEBUG] XGB iter   0: tr-p-rmse: 0.628869	tr-a-peak@32: 1.000000	tr-rmse: 0.369600	tr-rmse: 0.369600
2025-07-21 08:57:13 [DEBUG] XGB iter  25: tr-p-rmse: 0.065892	tr-a-peak@32: 1.000000	tr-rmse: 0.430651	tr-rmse: 0.430651
2025-07-21 08:57:13 [DEBUG] XGB iter  50: tr-p-rmse: 0.065892	tr-a-peak@32: 1.000000	tr-rmse: 0.430651	tr-rmse: 0.430651
2025-07-21 08:57:13 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.06589	tr-a-peak@32:1.00000	tr-rmse:0.43065	tr-rmse:0.43065 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:00:27 [DEBUG] XGB validation: p-rmse: 0.291522	a-peak@32: 0.977990
2025-07-21 09:00:27 [DEBUG] XGB iter   0: tr-p-rmse: 0.610458	tr-a-peak@32: 0.969584	tr-rmse: 0.267430	tr-rmse: 0.267430
2025-07-21 09:00:30 [DEBUG] XGB iter  25: tr-p-rmse: 0.058409	tr-a-peak@32: 1.000000	tr-rmse: 0.338177	tr-rmse: 0.338177
2025-07-21 09:00:30 [DEBUG] XGB iter  50: tr-p-rmse: 0.058409	tr-a-peak@32: 1.000000	tr-rmse: 0.338177	tr-rmse: 0.338177
2025-07-21 09:00:30 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.05841	tr-a-peak@32:1.00000	tr-rmse:0.33818	tr-rmse:0.33818 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:04:35 [DEBUG] XGB validation: p-rmse: 0.170667	a-peak@32: 0.991177
2025-07-21 09:04:35 [DEBUG] XGB iter   0: tr-p-rmse: 0.544086	tr-a-peak@32: 0.943197	tr-rmse: 0.325387	tr-rmse: 0.325387
2025-07-21 09:04:35 [DEBUG] XGB iter  25: tr-p-rmse: 0.056512	tr-a-peak@32: 0.988760	tr-rmse: 0.411063	tr-rmse: 0.411063
2025-07-21 09:04:36 [DEBUG] XGB iter  50: tr-p-rmse: 0.056512	tr-a-peak@32: 0.988760	tr-rmse: 0.411063	tr-rmse: 0.411063
2025-07-21 09:04:36 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.05651	tr-a-peak@32:0.98876	tr-rmse:0.41106	tr-rmse:0.41106 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:08:31 [DEBUG] XGB validation: p-rmse: 0.186941	a-peak@32: 0.765913
2025-07-21 09:08:31 [DEBUG] XGB iter   0: tr-p-rmse: 0.524740	tr-a-peak@32: 0.934673	tr-rmse: 0.333179	tr-rmse: 0.333179
2025-07-21 09:08:31 [DEBUG] XGB iter  25: tr-p-rmse: 0.067138	tr-a-peak@32: 0.994583	tr-rmse: 0.422577	tr-rmse: 0.422577
2025-07-21 09:08:31 [DEBUG] XGB iter  50: tr-p-rmse: 0.067138	tr-a-peak@32: 0.994583	tr-rmse: 0.422577	tr-rmse: 0.422577
2025-07-21 09:08:31 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.06714	tr-a-peak@32:0.99458	tr-rmse:0.42258	tr-rmse:0.42258 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:12:30 [DEBUG] XGB validation: p-rmse: 0.140684	a-peak@32: 0.992372
2025-07-21 09:12:30 [DEBUG] XGB iter   0: tr-p-rmse: 0.500128	tr-a-peak@32: 0.751296	tr-rmse: 0.347954	tr-rmse: 0.347954
2025-07-21 09:12:30 [DEBUG] XGB iter  25: tr-p-rmse: 0.071490	tr-a-peak@32: 0.999012	tr-rmse: 0.439263	tr-rmse: 0.439263
2025-07-21 09:12:30 [DEBUG] XGB iter  50: tr-p-rmse: 0.071490	tr-a-peak@32: 0.999012	tr-rmse: 0.439263	tr-rmse: 0.439263
2025-07-21 09:12:30 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.07149	tr-a-peak@32:0.99901	tr-rmse:0.43926	tr-rmse:0.43926 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:16:23 [DEBUG] XGB validation: p-rmse: 0.163487	a-peak@32: 0.975693
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:20:29 [DEBUG] XGB validation: p-rmse: 0.346618	a-peak@32: 0.794088
2025-07-21 09:20:29 [DEBUG] XGB iter   0: tr-p-rmse: 0.511582	tr-a-peak@32: 0.527723	tr-rmse: 0.224142	tr-rmse: 0.224142
2025-07-21 09:20:29 [DEBUG] XGB iter  25: tr-p-rmse: 0.074989	tr-a-peak@32: 0.999806	tr-rmse: 0.331480	tr-rmse: 0.331480
2025-07-21 09:20:29 [DEBUG] XGB iter  50: tr-p-rmse: 0.074989	tr-a-peak@32: 0.999806	tr-rmse: 0.331480	tr-rmse: 0.331480
2025-07-21 09:20:29 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.07499	tr-a-peak@32:0.99981	tr-rmse:0.33148	tr-rmse:0.33148 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:24:35 [DEBUG] XGB validation: p-rmse: 0.141990	a-peak@32: 0.971107
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:28:26 [DEBUG] XGB validation: p-rmse: 0.226512	a-peak@32: 0.671819
2025-07-21 09:28:26 [DEBUG] XGB iter   0: tr-p-rmse: 0.493328	tr-a-peak@32: 0.720187	tr-rmse: 0.235917	tr-rmse: 0.235917
2025-07-21 09:28:26 [DEBUG] XGB iter  25: tr-p-rmse: 0.079814	tr-a-peak@32: 0.974410	tr-rmse: 0.346946	tr-rmse: 0.346946
2025-07-21 09:28:26 [DEBUG] XGB iter  50: tr-p-rmse: 0.079814	tr-a-peak@32: 0.974410	tr-rmse: 0.346946	tr-rmse: 0.346946
2025-07-21 09:28:26 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.07981	tr-a-peak@32:0.97441	tr-rmse:0.34694	tr-rmse:0.34694 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:32:22 [DEBUG] XGB validation: p-rmse: 0.139224	a-peak@32: 0.728581
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:36:18 [DEBUG] XGB validation: p-rmse: 0.138494	a-peak@32: 0.711394
2025-07-21 09:36:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.482456	tr-a-peak@32: 0.864186	tr-rmse: 0.240235	tr-rmse: 0.240235
2025-07-21 09:36:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.084755	tr-a-peak@32: 0.912613	tr-rmse: 0.353137	tr-rmse: 0.353137
2025-07-21 09:36:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.084755	tr-a-peak@32: 0.912613	tr-rmse: 0.353137	tr-rmse: 0.353137
2025-07-21 09:36:18 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.08475	tr-a-peak@32:0.91261	tr-rmse:0.35314	tr-rmse:0.35314 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:40:21 [DEBUG] XGB validation: p-rmse: 0.125873	a-peak@32: 0.991575
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:44:16 [DEBUG] XGB validation: p-rmse: 0.101316	a-peak@32: 0.996273
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:48:11 [DEBUG] XGB validation: p-rmse: 0.140742	a-peak@32: 0.781531
2025-07-21 09:48:11 [DEBUG] XGB iter   0: tr-p-rmse: 0.470240	tr-a-peak@32: 0.731660	tr-rmse: 0.251621	tr-rmse: 0.251621
2025-07-21 09:48:11 [DEBUG] XGB iter  25: tr-p-rmse: 0.089419	tr-a-peak@32: 0.778756	tr-rmse: 0.364704	tr-rmse: 0.364704
2025-07-21 09:48:12 [DEBUG] XGB iter  50: tr-p-rmse: 0.089419	tr-a-peak@32: 0.778756	tr-rmse: 0.364704	tr-rmse: 0.364704
2025-07-21 09:48:12 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.08942	tr-a-peak@32:0.77876	tr-rmse:0.36470	tr-rmse:0.36470 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:52:06 [DEBUG] XGB validation: p-rmse: 0.140931	a-peak@32: 0.781952
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:56:03 [DEBUG] XGB validation: p-rmse: 0.134706	a-peak@32: 0.774349
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_capsule_nhwijc, half* __restrict__ inputs, half* __restrict__ weight);
extern "C" __global__ void __launch_bounds__(128) main_kernel(half* __restrict__ conv2d_capsule_nhwijc, half* __restrict__ inputs, half* __restrict__ weight) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[2];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PadInput_reindex_shared_dyn_wmma_matrix_a[4];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> weight_reindex_shared_dyn_wmma_matrix_b[8];
  nvcuda::wmma::fill_fragment(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], 0.000000e+00f);
  nvcuda::wmma::fill_fragment(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], 0.000000e+00f);
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5120)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5392)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  half2 condval;
  if ((2 <= ((int)blockIdx.y))) {
    condval = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 7680));
  } else {
    condval = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5664)) = condval;
  half2 condval_1;
  if ((2 <= ((int)blockIdx.y))) {
    condval_1 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 7424));
  } else {
    condval_1 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5936)) = condval_1;
  half2 condval_2;
  if ((2 <= ((int)blockIdx.y))) {
    condval_2 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 6656));
  } else {
    condval_2 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6208)) = condval_2;
  half2 condval_3;
  if ((2 <= ((int)blockIdx.y))) {
    condval_3 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 6400));
  } else {
    condval_3 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6480)) = condval_3;
  half2 condval_4;
  if ((2 <= ((int)blockIdx.y))) {
    condval_4 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 5632));
  } else {
    condval_4 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6752)) = condval_4;
  half2 condval_5;
  if ((2 <= ((int)blockIdx.y))) {
    condval_5 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 5376));
  } else {
    condval_5 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7024)) = condval_5;
  half2 condval_6;
  if ((2 <= ((int)blockIdx.y))) {
    condval_6 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 4608));
  } else {
    condval_6 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7296)) = condval_6;
  half2 condval_7;
  if ((2 <= ((int)blockIdx.y))) {
    condval_7 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 4352));
  } else {
    condval_7 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7568)) = condval_7;
  half2 condval_8;
  if ((2 <= ((int)blockIdx.y))) {
    condval_8 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 3584));
  } else {
    condval_8 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7840)) = condval_8;
  half2 condval_9;
  if ((2 <= ((int)blockIdx.y))) {
    condval_9 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 3328));
  } else {
    condval_9 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8112)) = condval_9;
  half2 condval_10;
  if ((2 <= ((int)blockIdx.y))) {
    condval_10 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 2560));
  } else {
    condval_10 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8384)) = condval_10;
  half2 condval_11;
  if ((2 <= ((int)blockIdx.y))) {
    condval_11 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 2304));
  } else {
    condval_11 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8656)) = condval_11;
  half2 condval_12;
  if ((2 <= ((int)blockIdx.y))) {
    condval_12 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 1536));
  } else {
    condval_12 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8928)) = condval_12;
  half2 condval_13;
  if ((2 <= ((int)blockIdx.y))) {
    condval_13 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 1280));
  } else {
    condval_13 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9200)) = condval_13;
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9472)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9744)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10016)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8704));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10288)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8960));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10560)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 9728));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10832)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 9984));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11104)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 10752));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11376)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11008));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11648)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11776));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11920)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12032));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12192)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12800));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12464)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 13056));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12736)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 13824));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13008)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 14080));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13280)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 14848));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13552)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 15104));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4))) = *(half4*)(weight + (((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 640)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 512));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1280)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 4096));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1920)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 4608));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 2560)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 8192));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3200)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 8704));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3840)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 12288));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 4480)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 12800));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[16])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[656])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[1296])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[1936])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2576])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[3216])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[3856])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[4496])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  __syncthreads();
  half2 condval_14;
  if ((2 <= ((int)blockIdx.y))) {
    condval_14 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 8192));
  } else {
    condval_14 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5120)) = condval_14;
  half2 condval_15;
  if ((2 <= ((int)blockIdx.y))) {
    condval_15 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 7936));
  } else {
    condval_15 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5392)) = condval_15;
  half2 condval_16;
  if ((2 <= ((int)blockIdx.y))) {
    condval_16 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 7168));
  } else {
    condval_16 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5664)) = condval_16;
  half2 condval_17;
  if ((2 <= ((int)blockIdx.y))) {
    condval_17 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 6912));
  } else {
    condval_17 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5936)) = condval_17;
  half2 condval_18;
  if ((2 <= ((int)blockIdx.y))) {
    condval_18 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 6144));
  } else {
    condval_18 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6208)) = condval_18;
  half2 condval_19;
  if ((2 <= ((int)blockIdx.y))) {
    condval_19 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 5888));
  } else {
    condval_19 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6480)) = condval_19;
  half2 condval_20;
  if ((2 <= ((int)blockIdx.y))) {
    condval_20 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 5120));
  } else {
    condval_20 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6752)) = condval_20;
  half2 condval_21;
  if ((2 <= ((int)blockIdx.y))) {
    condval_21 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 4864));
  } else {
    condval_21 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7024)) = condval_21;
  half2 condval_22;
  if ((2 <= ((int)blockIdx.y))) {
    condval_22 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 4096));
  } else {
    condval_22 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7296)) = condval_22;
  half2 condval_23;
  if ((2 <= ((int)blockIdx.y))) {
    condval_23 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 3840));
  } else {
    condval_23 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7568)) = condval_23;
  half2 condval_24;
  if ((2 <= ((int)blockIdx.y))) {
    condval_24 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 3072));
  } else {
    condval_24 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7840)) = condval_24;
  half2 condval_25;
  if ((2 <= ((int)blockIdx.y))) {
    condval_25 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 2816));
  } else {
    condval_25 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8112)) = condval_25;
  half2 condval_26;
  if ((2 <= ((int)blockIdx.y))) {
    condval_26 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 2048));
  } else {
    condval_26 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8384)) = condval_26;
  half2 condval_27;
  if ((2 <= ((int)blockIdx.y))) {
    condval_27 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 1792));
  } else {
    condval_27 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8656)) = condval_27;
  half2 condval_28;
  if ((2 <= ((int)blockIdx.y))) {
    condval_28 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 1024));
  } else {
    condval_28 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8928)) = condval_28;
  half2 condval_29;
  if ((2 <= ((int)blockIdx.y))) {
    condval_29 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 768));
  } else {
    condval_29 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9200)) = condval_29;
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9472)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8192));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9744)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8448));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10016)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 9216));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10288)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 9472));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10560)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 10240));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10832)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 10496));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11104)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11264));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11376)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11520));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11648)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12288));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11920)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12544));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12192)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 13312));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12464)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 13568));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12736)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 14336));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13008)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 14592));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13280)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 15360));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13552)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 15616));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4))) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 16384));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 640)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 16896));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1280)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 20480));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1920)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 20992));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 2560)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 24576));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3200)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 25088));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3840)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 28672));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 4480)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 29184));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[16])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[656])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[1296])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[1936])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2576])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[3216])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[3856])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[4496])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  __syncthreads();
  half2 condval_30;
  if ((2 <= ((int)blockIdx.y))) {
    condval_30 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 7680));
  } else {
    condval_30 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5120)) = condval_30;
  half2 condval_31;
  if ((2 <= ((int)blockIdx.y))) {
    condval_31 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 7424));
  } else {
    condval_31 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5392)) = condval_31;
  half2 condval_32;
  if ((2 <= ((int)blockIdx.y))) {
    condval_32 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 6656));
  } else {
    condval_32 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5664)) = condval_32;
  half2 condval_33;
  if ((2 <= ((int)blockIdx.y))) {
    condval_33 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 6400));
  } else {
    condval_33 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5936)) = condval_33;
  half2 condval_34;
  if ((2 <= ((int)blockIdx.y))) {
    condval_34 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 5632));
  } else {
    condval_34 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6208)) = condval_34;
  half2 condval_35;
  if ((2 <= ((int)blockIdx.y))) {
    condval_35 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 5376));
  } else {
    condval_35 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6480)) = condval_35;
  half2 condval_36;
  if ((2 <= ((int)blockIdx.y))) {
    condval_36 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 4608));
  } else {
    condval_36 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6752)) = condval_36;
  half2 condval_37;
  if ((2 <= ((int)blockIdx.y))) {
    condval_37 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 4352));
  } else {
    condval_37 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7024)) = condval_37;
  half2 condval_38;
  if ((2 <= ((int)blockIdx.y))) {
    condval_38 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 3584));
  } else {
    condval_38 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7296)) = condval_38;
  half2 condval_39;
  if ((2 <= ((int)blockIdx.y))) {
    condval_39 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 3328));
  } else {
    condval_39 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7568)) = condval_39;
  half2 condval_40;
  if ((2 <= ((int)blockIdx.y))) {
    condval_40 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 2560));
  } else {
    condval_40 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7840)) = condval_40;
  half2 condval_41;
  if ((2 <= ((int)blockIdx.y))) {
    condval_41 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 2304));
  } else {
    condval_41 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8112)) = condval_41;
  half2 condval_42;
  if ((2 <= ((int)blockIdx.y))) {
    condval_42 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 1536));
  } else {
    condval_42 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8384)) = condval_42;
  half2 condval_43;
  if ((2 <= ((int)blockIdx.y))) {
    condval_43 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 1280));
  } else {
    condval_43 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8656)) = condval_43;
  half2 condval_44;
  if ((2 <= ((int)blockIdx.y))) {
    condval_44 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 512));
  } else {
    condval_44 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8928)) = condval_44;
  half2 condval_45;
  if ((2 <= ((int)blockIdx.y))) {
    condval_45 = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) - 256));
  } else {
    condval_45 = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  }
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9200)) = condval_45;
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9472)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8704));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9744)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8960));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10016)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 9728));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10288)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 9984));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10560)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 10752));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10832)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11008));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11104)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11776));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11376)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12032));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11648)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12800));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11920)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 13056));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12192)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 13824));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12464)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 14080));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12736)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 14848));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13008)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 15104));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13280)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 15872));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13552)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 16128));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4))) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 32768));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 640)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 33280));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1280)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 36864));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1920)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 37376));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 2560)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 40960));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3200)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 41472));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3840)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 45056));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 4480)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 45568));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[16])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[656])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[1296])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[1936])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2576])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[3216])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[3856])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[4496])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  __syncthreads();
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5120)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5392)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5664)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 512));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5936)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 768));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6208)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 1536));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6480)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 1792));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6752)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 2560));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7024)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 2816));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7296)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 3584));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7568)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 3840));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7840)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 4608));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8112)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 4864));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8384)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 5632));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8656)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 5888));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8928)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 6656));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9200)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 6912));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9472)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9744)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10016)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 16896));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10288)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 17152));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10560)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 17920));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10832)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 18176));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11104)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 18944));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11376)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 19200));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11648)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 19968));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11920)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 20224));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12192)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 20992));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12464)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 21248));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12736)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 22016));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13008)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 22272));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13280)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 23040));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13552)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 23296));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4))) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 49152));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 640)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 49664));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1280)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 53248));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1920)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 53760));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 2560)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 57344));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3200)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 57856));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3840)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 61440));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 4480)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 61952));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[16])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[656])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[1296])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[1936])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2576])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[3216])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[3856])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[4496])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  __syncthreads();
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5120)) = *(half2*)(inputs + ((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5392)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 256));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5664)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 1024));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5936)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 1280));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6208)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 2048));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6480)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 2304));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6752)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 3072));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7024)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 3328));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7296)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 4096));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7568)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 4352));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7840)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 5120));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8112)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 5376));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8384)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 6144));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8656)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 6400));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8928)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 7168));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9200)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 7424));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9472)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 16384));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9744)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 16640));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10016)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 17408));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10288)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 17664));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10560)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 18432));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10832)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 18688));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11104)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 19456));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11376)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 19712));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11648)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 20480));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11920)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 20736));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12192)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 21504));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12464)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 21760));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12736)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 22528));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13008)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 22784));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13280)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 23552));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13552)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 23808));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4))) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 65536));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 640)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 66048));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1280)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 69632));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1920)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 70144));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 2560)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 73728));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3200)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 74240));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3840)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 77824));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 4480)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 78336));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[16])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[656])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[1296])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[1936])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2576])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[3216])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[3856])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[4496])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  __syncthreads();
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5120)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 512));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5392)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 768));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5664)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 1536));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5936)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 1792));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6208)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 2560));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6480)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 2816));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6752)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 3584));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7024)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 3840));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7296)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 4608));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7568)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 4864));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7840)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 5632));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8112)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 5888));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8384)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 6656));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8656)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 6912));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8928)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 7680));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9200)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 7936));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9472)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 16896));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9744)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 17152));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10016)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 17920));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10288)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 18176));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10560)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 18944));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10832)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 19200));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11104)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 19968));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11376)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 20224));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11648)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 20992));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11920)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 21248));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12192)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 22016));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12464)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 22272));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12736)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 23040));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13008)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 23296));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13280)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 24064));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13552)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 24320));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4))) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 81920));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 640)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 82432));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1280)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 86016));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1920)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 86528));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 2560)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 90112));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3200)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 90624));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3840)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 94208));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 4480)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 94720));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[16])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[656])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[1296])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[1936])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2576])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[3216])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[3856])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[4496])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  __syncthreads();
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5120)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5392)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5664)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8704));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5936)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8960));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6208)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 9728));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6480)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 9984));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6752)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 10752));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7024)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11008));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7296)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11776));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7568)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12032));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7840)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12800));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8112)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 13056));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8384)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 13824));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8656)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 14080));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8928)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 14848));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9200)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 15104));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9472)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9744)) = make_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10016)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 25088));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10288)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 25344));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10560)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 26112));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10832)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 26368));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11104)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 27136));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11376)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 27392));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11648)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 28160));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11920)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 28416));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12192)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 29184));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12464)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 29440));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12736)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 30208));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13008)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 30464));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13280)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 31232));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13552)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 31488));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4))) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 98304));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 640)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 98816));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1280)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 102400));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1920)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 102912));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 2560)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 106496));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3200)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 107008));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3840)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 110592));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 4480)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 111104));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[16])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[656])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[1296])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[1936])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2576])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[3216])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[3856])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[4496])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  __syncthreads();
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5120)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8192));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5392)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8448));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5664)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 9216));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5936)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 9472));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6208)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 10240));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6480)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 10496));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6752)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11264));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7024)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11520));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7296)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12288));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7568)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12544));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7840)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 13312));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8112)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 13568));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8384)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 14336));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8656)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 14592));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8928)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 15360));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9200)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 15616));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9472)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 24576));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9744)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 24832));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10016)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 25600));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10288)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 25856));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10560)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 26624));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10832)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 26880));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11104)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 27648));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11376)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 27904));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11648)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 28672));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11920)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 28928));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12192)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 29696));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12464)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 29952));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12736)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 30720));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13008)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 30976));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13280)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 31744));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13552)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 32000));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4))) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 114688));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 640)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 115200));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1280)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 118784));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1920)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 119296));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 2560)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 122880));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3200)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 123392));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3840)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 126976));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 4480)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 127488));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[16])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[656])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[1296])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[1936])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2576])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[3216])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[3856])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[4496])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  __syncthreads();
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5120)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8704));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5392)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 8960));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5664)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 9728));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 5936)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 9984));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6208)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 10752));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6480)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11008));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 6752)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 11776));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7024)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12032));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7296)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 12800));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7568)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 13056));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 7840)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 13824));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8112)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 14080));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8384)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 14848));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8656)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 15104));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 8928)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 15872));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9200)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 16128));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9472)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 25088));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 9744)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 25344));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10016)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 26112));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10288)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 26368));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10560)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 27136));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 10832)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 27392));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11104)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 28160));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11376)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 28416));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11648)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 29184));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 11920)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 29440));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12192)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 30208));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12464)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 30464));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 12736)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 31232));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13008)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 31488));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13280)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 32256));
  *(half2*)(((half*)buf_dyn_shmem) + (((((((int)threadIdx.y) >> 1) * 136) + ((((int)threadIdx.y) & 1) * 64)) + (((int)threadIdx.x) * 2)) + 13552)) = *(half2*)(inputs + (((((((int)blockIdx.y) >> 1) * 32768) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)) + 32512));
  *(half4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4))) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 131072));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 640)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 131584));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1280)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 135168));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 1920)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 135680));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 2560)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 139264));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3200)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 139776));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 3840)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 143360));
  *(half4*)(((half*)buf_dyn_shmem) + ((((((int)threadIdx.y) * 160) + ((((int)threadIdx.x) >> 3) * 40)) + ((((int)threadIdx.x) & 7) * 4)) + 4480)) = *(half4*)(weight + ((((((((int)blockIdx.y) & 1) * 2048) + (((int)blockIdx.x) * 1024)) + (((int)threadIdx.y) * 128)) + (((int)threadIdx.x) * 4)) + 143872));
  __syncthreads();
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5120)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5136)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5152)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5168)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[0])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[16])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[640])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[656])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[1280])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[1296])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[1920])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[1936])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[0], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5184)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[1], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5200)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[2], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5216)])), 136);
  nvcuda::wmma::load_matrix_sync(PadInput_reindex_shared_dyn_wmma_matrix_a[3], (&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 2176) + 5232)])), 136);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[2560])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[1], (&(((half*)buf_dyn_shmem)[2576])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[2], (&(((half*)buf_dyn_shmem)[3200])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[3], (&(((half*)buf_dyn_shmem)[3216])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[4], (&(((half*)buf_dyn_shmem)[3840])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[5], (&(((half*)buf_dyn_shmem)[3856])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[6], (&(((half*)buf_dyn_shmem)[4480])), 40);
  nvcuda::wmma::load_matrix_sync(weight_reindex_shared_dyn_wmma_matrix_b[7], (&(((half*)buf_dyn_shmem)[4496])), 40);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[0], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[2], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[4], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[6], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[0], weight_reindex_shared_dyn_wmma_matrix_b[1], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[1], weight_reindex_shared_dyn_wmma_matrix_b[3], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[2], weight_reindex_shared_dyn_wmma_matrix_b[5], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  nvcuda::wmma::mma_sync(conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], PadInput_reindex_shared_dyn_wmma_matrix_a[3], weight_reindex_shared_dyn_wmma_matrix_b[7], conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1]);
  __syncthreads();
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 512)])), conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[0], 16, nvcuda::wmma::mem_row_major);
  nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[((((int)threadIdx.y) * 512) + 256)])), conv2d_capsule_nhwijc_reindex_shared_dyn_wmma_accumulator[1], 16, nvcuda::wmma::mem_row_major);
  __syncthreads();
  *(half2*)(conv2d_capsule_nhwijc + (((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 7) * 2))) = *(half2*)(((half*)buf_dyn_shmem) + ((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)));
  *(half2*)(conv2d_capsule_nhwijc + ((((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 7) * 2)) + 16)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 256));
  *(half2*)(conv2d_capsule_nhwijc + ((((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 7) * 2)) + 2048)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 512));
  *(half2*)(conv2d_capsule_nhwijc + ((((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 7) * 2)) + 2064)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 768));
  *(half2*)(conv2d_capsule_nhwijc + ((((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 7) * 2)) + 4096)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1024));
  *(half2*)(conv2d_capsule_nhwijc + ((((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 7) * 2)) + 4112)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1280));
  *(half2*)(conv2d_capsule_nhwijc + ((((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 7) * 2)) + 6144)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1536));
  *(half2*)(conv2d_capsule_nhwijc + ((((((((((int)blockIdx.y) >> 1) * 8192) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 3) * 128)) + ((((int)blockIdx.y) & 1) * 64)) + (((int)blockIdx.x) * 32)) + ((((int)threadIdx.x) & 7) * 2)) + 6160)) = *(half2*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 2)) + 1792));
}


The time of CAP is 0.017 ms
2025-07-21 09:56:06 [INFO] Logging directory: /tmp/tmpiwm850x2/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:56:40 [DEBUG] XGB iter   0: tr-p-rmse: 0.575216	tr-a-peak@32: 0.944504	tr-rmse: 0.277374	tr-rmse: 0.277374
2025-07-21 09:56:40 [DEBUG] XGB iter  25: tr-p-rmse: 0.039967	tr-a-peak@32: 1.000000	tr-rmse: 0.359001	tr-rmse: 0.359001
2025-07-21 09:56:40 [DEBUG] XGB iter  50: tr-p-rmse: 0.039967	tr-a-peak@32: 1.000000	tr-rmse: 0.359001	tr-rmse: 0.359001
2025-07-21 09:56:40 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.03997	tr-a-peak@32:1.00000	tr-rmse:0.35900	tr-rmse:0.35900 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====

#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ < 700)
#define __shfl_sync(mask, var, lane, width) \
        __shfl((var), (lane), (width))

#define __shfl_down_sync(mask, var, offset, width) \
        __shfl_down((var), (offset), (width))

#define __shfl_up_sync(mask, var, offset, width) \
        __shfl_up((var), (offset), (width))
#endif


#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(512) main_kernel(float* __restrict__ A, float* __restrict__ D);
extern "C" __global__ void __launch_bounds__(512) main_kernel(float* __restrict__ A, float* __restrict__ D) {
  float in_thread_C_shared[1];
  __shared__ float red_result[1];
  __shared__ float C_shared[1];
  in_thread_C_shared[0] = 0.000000e+00f;
  for (int ax1_ax2_fused_0 = 0; ax1_ax2_fused_0 < 128; ++ax1_ax2_fused_0) {
    in_thread_C_shared[0] = (in_thread_C_shared[0] + (A[((ax1_ax2_fused_0 * 512) + ((int)threadIdx.x))] * A[((ax1_ax2_fused_0 * 512) + ((int)threadIdx.x))]));
  }
  float red_buf0[1];
  uint mask[1];
  float t0[1];
  float red_buf0_1[1];
  uint mask_1[1];
  float t0_1[1];
  __shared__ float red_buf_staging[16];
  red_buf0_1[0] = in_thread_C_shared[0];
  mask_1[0] = __activemask();
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 16, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 8, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 4, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 2, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 1, 32);
  red_buf0_1[0] = (red_buf0_1[0] + t0_1[0]);
  if ((((int)threadIdx.x) % 32) == 0) {
    red_buf_staging[(((int)threadIdx.x) >> 5)] = red_buf0_1[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) < 16) {
    red_buf0[0] = red_buf_staging[((int)threadIdx.x)];
  }
  mask[0] = __activemask();
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 8, 32);
  red_buf0[0] = (red_buf0[0] + t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 4, 32);
  red_buf0[0] = (red_buf0[0] + t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 2, 32);
  red_buf0[0] = (red_buf0[0] + t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 1, 32);
  red_buf0[0] = (red_buf0[0] + t0[0]);
  if (((int)threadIdx.x) == 0) {
    ((volatile float*)red_result)[0] = red_buf0[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) == 0) {
    C_shared[0] = ((volatile float*)red_result)[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) < 1) {
    D[0] = sqrtf(C_shared[0]);
  }
}


The time of NRM is 0.012 ms
2025-07-21 09:56:50 [INFO] Logging directory: /tmp/tmpqod5m_l0/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:57:36 [DEBUG] XGB iter   0: tr-p-rmse: 0.460596	tr-a-peak@32: 0.966165	tr-rmse: 0.337062	tr-rmse: 0.337062
2025-07-21 09:57:36 [DEBUG] XGB iter  25: tr-p-rmse: 0.040590	tr-a-peak@32: 1.000000	tr-rmse: 0.357436	tr-rmse: 0.357436
2025-07-21 09:57:36 [DEBUG] XGB iter  50: tr-p-rmse: 0.040590	tr-a-peak@32: 1.000000	tr-rmse: 0.357436	tr-rmse: 0.357436
2025-07-21 09:57:36 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.04059	tr-a-peak@32:1.00000	tr-rmse:0.35744	tr-rmse:0.35744 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:58:14 [DEBUG] XGB validation: p-rmse: 0.156174	a-peak@32: 0.976501
2025-07-21 09:58:14 [DEBUG] XGB iter   0: tr-p-rmse: 0.459500	tr-a-peak@32: 0.999724	tr-rmse: 0.360409	tr-rmse: 0.360409
2025-07-21 09:58:14 [DEBUG] XGB iter  25: tr-p-rmse: 0.043290	tr-a-peak@32: 0.999724	tr-rmse: 0.381227	tr-rmse: 0.381227
2025-07-21 09:58:14 [DEBUG] XGB iter  50: tr-p-rmse: 0.043290	tr-a-peak@32: 0.999724	tr-rmse: 0.381227	tr-rmse: 0.381227
2025-07-21 09:58:14 [DEBUG] XGB stopped. Best iteration: [14] tr-p-rmse:0.04329	tr-a-peak@32:0.99972	tr-rmse:0.38123	tr-rmse:0.38123 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:58:56 [DEBUG] XGB validation: p-rmse: 0.166088	a-peak@32: 0.987814
2025-07-21 09:58:56 [DEBUG] XGB iter   0: tr-p-rmse: 0.422164	tr-a-peak@32: 0.963443	tr-rmse: 0.372877	tr-rmse: 0.372877
2025-07-21 09:58:56 [DEBUG] XGB iter  25: tr-p-rmse: 0.047807	tr-a-peak@32: 1.000000	tr-rmse: 0.387179	tr-rmse: 0.387179
2025-07-21 09:58:56 [DEBUG] XGB iter  50: tr-p-rmse: 0.047807	tr-a-peak@32: 1.000000	tr-rmse: 0.387179	tr-rmse: 0.387179
2025-07-21 09:58:56 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.04781	tr-a-peak@32:1.00000	tr-rmse:0.38718	tr-rmse:0.38718 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 09:59:38 [DEBUG] XGB validation: p-rmse: 0.066634	a-peak@32: 0.934523
2025-07-21 09:59:38 [DEBUG] XGB iter   0: tr-p-rmse: 0.414606	tr-a-peak@32: 0.968701	tr-rmse: 0.336286	tr-rmse: 0.336286
2025-07-21 09:59:38 [DEBUG] XGB iter  25: tr-p-rmse: 0.044797	tr-a-peak@32: 1.000000	tr-rmse: 0.356271	tr-rmse: 0.356271
2025-07-21 09:59:38 [DEBUG] XGB iter  50: tr-p-rmse: 0.044797	tr-a-peak@32: 1.000000	tr-rmse: 0.356271	tr-rmse: 0.356271
2025-07-21 09:59:38 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.04480	tr-a-peak@32:1.00000	tr-rmse:0.35627	tr-rmse:0.35627 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:00:23 [DEBUG] XGB validation: p-rmse: 0.047427	a-peak@32: 0.897582
2025-07-21 10:00:23 [DEBUG] XGB iter   0: tr-p-rmse: 0.387321	tr-a-peak@32: 0.984644	tr-rmse: 0.308476	tr-rmse: 0.308476
2025-07-21 10:00:23 [DEBUG] XGB iter  25: tr-p-rmse: 0.043181	tr-a-peak@32: 1.000000	tr-rmse: 0.332888	tr-rmse: 0.332888
2025-07-21 10:00:23 [DEBUG] XGB iter  50: tr-p-rmse: 0.043181	tr-a-peak@32: 1.000000	tr-rmse: 0.332888	tr-rmse: 0.332888
2025-07-21 10:00:23 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.04318	tr-a-peak@32:1.00000	tr-rmse:0.33289	tr-rmse:0.33289 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:01:04 [DEBUG] XGB validation: p-rmse: 0.035043	a-peak@32: 0.829257
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:01:46 [DEBUG] XGB validation: p-rmse: 0.042545	a-peak@32: 0.839459
2025-07-21 10:01:46 [DEBUG] XGB iter   0: tr-p-rmse: 0.390095	tr-a-peak@32: 0.980887	tr-rmse: 0.273874	tr-rmse: 0.273874
2025-07-21 10:01:47 [DEBUG] XGB iter  25: tr-p-rmse: 0.039971	tr-a-peak@32: 1.000000	tr-rmse: 0.299930	tr-rmse: 0.299930
2025-07-21 10:01:47 [DEBUG] XGB iter  50: tr-p-rmse: 0.039971	tr-a-peak@32: 1.000000	tr-rmse: 0.299930	tr-rmse: 0.299930
2025-07-21 10:01:47 [DEBUG] XGB stopped. Best iteration: [12] tr-p-rmse:0.03995	tr-a-peak@32:1.00000	tr-rmse:0.29995	tr-rmse:0.29995 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:02:28 [DEBUG] XGB validation: p-rmse: 0.032727	a-peak@32: 0.742776
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:03:11 [DEBUG] XGB validation: p-rmse: 0.032341	a-peak@32: 0.918986
2025-07-21 10:03:11 [DEBUG] XGB iter   0: tr-p-rmse: 0.397404	tr-a-peak@32: 0.987258	tr-rmse: 0.250336	tr-rmse: 0.250336
2025-07-21 10:03:11 [DEBUG] XGB iter  25: tr-p-rmse: 0.036116	tr-a-peak@32: 1.000000	tr-rmse: 0.277415	tr-rmse: 0.277415
2025-07-21 10:03:11 [DEBUG] XGB iter  50: tr-p-rmse: 0.036116	tr-a-peak@32: 1.000000	tr-rmse: 0.277415	tr-rmse: 0.277415
2025-07-21 10:03:11 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.03612	tr-a-peak@32:1.00000	tr-rmse:0.27741	tr-rmse:0.27741 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:03:53 [DEBUG] XGB validation: p-rmse: 0.027052	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:04:35 [DEBUG] XGB validation: p-rmse: 0.031602	a-peak@32: 0.940828
2025-07-21 10:04:35 [DEBUG] XGB iter   0: tr-p-rmse: 0.404728	tr-a-peak@32: 0.993629	tr-rmse: 0.235024	tr-rmse: 0.235024
2025-07-21 10:04:35 [DEBUG] XGB iter  25: tr-p-rmse: 0.035144	tr-a-peak@32: 1.000000	tr-rmse: 0.262462	tr-rmse: 0.262462
2025-07-21 10:04:35 [DEBUG] XGB iter  50: tr-p-rmse: 0.035144	tr-a-peak@32: 1.000000	tr-rmse: 0.262462	tr-rmse: 0.262462
2025-07-21 10:04:35 [DEBUG] XGB stopped. Best iteration: [13] tr-p-rmse:0.03514	tr-a-peak@32:1.00000	tr-rmse:0.26246	tr-rmse:0.26246 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:05:21 [DEBUG] XGB validation: p-rmse: 0.023509	a-peak@32: 0.964780
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:06:02 [DEBUG] XGB validation: p-rmse: 0.029150	a-peak@32: 0.957806
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:06:44 [DEBUG] XGB validation: p-rmse: 0.025580	a-peak@32: 0.848745
2025-07-21 10:06:44 [DEBUG] XGB iter   0: tr-p-rmse: 0.414327	tr-a-peak@32: 1.000000	tr-rmse: 0.217126	tr-rmse: 0.217126
2025-07-21 10:06:44 [DEBUG] XGB iter  25: tr-p-rmse: 0.032149	tr-a-peak@32: 1.000000	tr-rmse: 0.244979	tr-rmse: 0.244979
2025-07-21 10:06:44 [DEBUG] XGB iter  50: tr-p-rmse: 0.032149	tr-a-peak@32: 1.000000	tr-rmse: 0.244979	tr-rmse: 0.244979
2025-07-21 10:06:44 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.03215	tr-a-peak@32:1.00000	tr-rmse:0.24498	tr-rmse:0.24498 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:07:25 [DEBUG] XGB validation: p-rmse: 0.020966	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:08:06 [DEBUG] XGB validation: p-rmse: 0.025033	a-peak@32: 0.985662
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:08:29 [DEBUG] XGB validation: p-rmse: 0.030630	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:08:43 [DEBUG] XGB validation: p-rmse: 0.027192	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====

#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ < 700)
#define __shfl_sync(mask, var, lane, width) \
        __shfl((var), (lane), (width))

#define __shfl_down_sync(mask, var, offset, width) \
        __shfl_down((var), (offset), (width))

#define __shfl_up_sync(mask, var, offset, width) \
        __shfl_up((var), (offset), (width))
#endif


#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(256) main_kernel(float* __restrict__ A, float* __restrict__ T_softmax_norm);
extern "C" __global__ void __launch_bounds__(256) main_kernel(float* __restrict__ A, float* __restrict__ T_softmax_norm) {
  float in_thread_T_softmax_maxelem_shared[1];
  __shared__ float red_result[1];
  __shared__ float T_softmax_maxelem_shared[1];
  float in_thread_T_softmax_expsum_shared[1];
  __shared__ float red_result_1[1];
  __shared__ float T_softmax_expsum_shared[1];
  in_thread_T_softmax_maxelem_shared[0] = -3.402823e+38f;
  in_thread_T_softmax_maxelem_shared[0] = max(in_thread_T_softmax_maxelem_shared[0], A[((((int)blockIdx.x) * 256) + ((int)threadIdx.x))]);
  float red_buf0[1];
  uint mask[1];
  float t0[1];
  float red_buf0_1[1];
  uint mask_1[1];
  float t0_1[1];
  __shared__ float red_buf_staging[8];
  red_buf0_1[0] = in_thread_T_softmax_maxelem_shared[0];
  mask_1[0] = __activemask();
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 16, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 8, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 4, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 2, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  t0_1[0] = __shfl_down_sync(mask_1[0], red_buf0_1[0], 1, 32);
  red_buf0_1[0] = max(red_buf0_1[0], t0_1[0]);
  if ((((int)threadIdx.x) % 32) == 0) {
    red_buf_staging[(((int)threadIdx.x) >> 5)] = red_buf0_1[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) < 8) {
    red_buf0[0] = red_buf_staging[((int)threadIdx.x)];
  }
  mask[0] = __activemask();
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 4, 32);
  red_buf0[0] = max(red_buf0[0], t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 2, 32);
  red_buf0[0] = max(red_buf0[0], t0[0]);
  t0[0] = __shfl_down_sync(mask[0], red_buf0[0], 1, 32);
  red_buf0[0] = max(red_buf0[0], t0[0]);
  if (((int)threadIdx.x) == 0) {
    ((volatile float*)red_result)[0] = red_buf0[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) == 0) {
    T_softmax_maxelem_shared[0] = ((volatile float*)red_result)[0];
  }
  in_thread_T_softmax_expsum_shared[0] = 0.000000e+00f;
  __syncthreads();
  in_thread_T_softmax_expsum_shared[0] = (in_thread_T_softmax_expsum_shared[0] + __expf((A[((((int)blockIdx.x) * 256) + ((int)threadIdx.x))] - T_softmax_maxelem_shared[0])));
  float red_buf0_2[1];
  uint mask_2[1];
  float t0_2[1];
  float red_buf0_3[1];
  uint mask_3[1];
  float t0_3[1];
  __shared__ float red_buf_staging_1[8];
  red_buf0_3[0] = in_thread_T_softmax_expsum_shared[0];
  mask_3[0] = __activemask();
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 16, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 8, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 4, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 2, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  t0_3[0] = __shfl_down_sync(mask_3[0], red_buf0_3[0], 1, 32);
  red_buf0_3[0] = (red_buf0_3[0] + t0_3[0]);
  if ((((int)threadIdx.x) % 32) == 0) {
    red_buf_staging_1[(((int)threadIdx.x) >> 5)] = red_buf0_3[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) < 8) {
    red_buf0_2[0] = red_buf_staging_1[((int)threadIdx.x)];
  }
  mask_2[0] = __activemask();
  t0_2[0] = __shfl_down_sync(mask_2[0], red_buf0_2[0], 4, 32);
  red_buf0_2[0] = (red_buf0_2[0] + t0_2[0]);
  t0_2[0] = __shfl_down_sync(mask_2[0], red_buf0_2[0], 2, 32);
  red_buf0_2[0] = (red_buf0_2[0] + t0_2[0]);
  t0_2[0] = __shfl_down_sync(mask_2[0], red_buf0_2[0], 1, 32);
  red_buf0_2[0] = (red_buf0_2[0] + t0_2[0]);
  if (((int)threadIdx.x) == 0) {
    ((volatile float*)red_result_1)[0] = red_buf0_2[0];
  }
  __syncthreads();
  if (((int)threadIdx.x) == 0) {
    T_softmax_expsum_shared[0] = ((volatile float*)red_result_1)[0];
  }
  __syncthreads();
  T_softmax_norm[((((int)blockIdx.x) * 256) + ((int)threadIdx.x))] = (__expf((A[((((int)blockIdx.x) * 256) + ((int)threadIdx.x))] - T_softmax_maxelem_shared[0])) / T_softmax_expsum_shared[0]);
}


The time of SFM is 0.006 ms
2025-07-21 10:08:44 [INFO] Logging directory: /tmp/tmpvcqqnedm/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:13:57 [DEBUG] XGB iter   0: tr-p-rmse: 0.523660	tr-a-peak@32: 0.996930	tr-rmse: 0.288147	tr-rmse: 0.288147
2025-07-21 10:13:57 [DEBUG] XGB iter  25: tr-p-rmse: 0.037888	tr-a-peak@32: 1.000000	tr-rmse: 0.377570	tr-rmse: 0.377570
2025-07-21 10:13:57 [DEBUG] XGB iter  50: tr-p-rmse: 0.037888	tr-a-peak@32: 1.000000	tr-rmse: 0.377570	tr-rmse: 0.377570
2025-07-21 10:13:57 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.03789	tr-a-peak@32:1.00000	tr-rmse:0.37757	tr-rmse:0.37757 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:19:01 [DEBUG] XGB validation: p-rmse: 0.180181	a-peak@32: 0.981471
2025-07-21 10:19:01 [DEBUG] XGB iter   0: tr-p-rmse: 0.511122	tr-a-peak@32: 0.984233	tr-rmse: 0.287000	tr-rmse: 0.287000
2025-07-21 10:19:01 [DEBUG] XGB iter  25: tr-p-rmse: 0.040363	tr-a-peak@32: 1.000000	tr-rmse: 0.379257	tr-rmse: 0.379257
2025-07-21 10:19:01 [DEBUG] XGB iter  50: tr-p-rmse: 0.040363	tr-a-peak@32: 1.000000	tr-rmse: 0.379257	tr-rmse: 0.379257
2025-07-21 10:19:01 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.04036	tr-a-peak@32:1.00000	tr-rmse:0.37926	tr-rmse:0.37926 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:25:57 [DEBUG] XGB validation: p-rmse: 0.247052	a-peak@32: 0.701023
2025-07-21 10:25:57 [DEBUG] XGB iter   0: tr-p-rmse: 0.490350	tr-a-peak@32: 0.753787	tr-rmse: 0.282874	tr-rmse: 0.282874
2025-07-21 10:25:57 [DEBUG] XGB iter  25: tr-p-rmse: 0.038700	tr-a-peak@32: 1.000000	tr-rmse: 0.379297	tr-rmse: 0.379297
2025-07-21 10:25:57 [DEBUG] XGB iter  50: tr-p-rmse: 0.038700	tr-a-peak@32: 1.000000	tr-rmse: 0.379297	tr-rmse: 0.379297
2025-07-21 10:25:57 [DEBUG] XGB stopped. Best iteration: [15] tr-p-rmse:0.03870	tr-a-peak@32:1.00000	tr-rmse:0.37930	tr-rmse:0.37930 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:32:45 [DEBUG] XGB validation: p-rmse: 0.194203	a-peak@32: 0.889054
2025-07-21 10:32:45 [DEBUG] XGB iter   0: tr-p-rmse: 0.472412	tr-a-peak@32: 0.717937	tr-rmse: 0.313804	tr-rmse: 0.313804
2025-07-21 10:32:45 [DEBUG] XGB iter  25: tr-p-rmse: 0.046253	tr-a-peak@32: 1.000000	tr-rmse: 0.408892	tr-rmse: 0.408892
2025-07-21 10:32:45 [DEBUG] XGB iter  50: tr-p-rmse: 0.046253	tr-a-peak@32: 1.000000	tr-rmse: 0.408892	tr-rmse: 0.408892
2025-07-21 10:32:45 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.04625	tr-a-peak@32:1.00000	tr-rmse:0.40889	tr-rmse:0.40889 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:39:52 [DEBUG] XGB validation: p-rmse: 0.147584	a-peak@32: 0.995796
2025-07-21 10:39:52 [DEBUG] XGB iter   0: tr-p-rmse: 0.455987	tr-a-peak@32: 0.963899	tr-rmse: 0.364821	tr-rmse: 0.364821
2025-07-21 10:39:52 [DEBUG] XGB iter  25: tr-p-rmse: 0.049334	tr-a-peak@32: 0.997459	tr-rmse: 0.452943	tr-rmse: 0.452943
2025-07-21 10:39:52 [DEBUG] XGB iter  50: tr-p-rmse: 0.049334	tr-a-peak@32: 0.997459	tr-rmse: 0.452943	tr-rmse: 0.452943
2025-07-21 10:39:52 [DEBUG] XGB stopped. Best iteration: [17] tr-p-rmse:0.04933	tr-a-peak@32:0.99746	tr-rmse:0.45294	tr-rmse:0.45294 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:46:32 [DEBUG] XGB validation: p-rmse: 0.145040	a-peak@32: 0.889817
2025-07-21 10:46:32 [DEBUG] XGB iter   0: tr-p-rmse: 0.438461	tr-a-peak@32: 0.924734	tr-rmse: 0.386046	tr-rmse: 0.386046
2025-07-21 10:46:32 [DEBUG] XGB iter  25: tr-p-rmse: 0.063897	tr-a-peak@32: 1.000000	tr-rmse: 0.474206	tr-rmse: 0.474206
2025-07-21 10:46:32 [DEBUG] XGB iter  50: tr-p-rmse: 0.063897	tr-a-peak@32: 1.000000	tr-rmse: 0.474206	tr-rmse: 0.474206
2025-07-21 10:46:32 [DEBUG] XGB stopped. Best iteration: [16] tr-p-rmse:0.06390	tr-a-peak@32:1.00000	tr-rmse:0.47420	tr-rmse:0.47420 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:53:15 [DEBUG] XGB validation: p-rmse: 0.190091	a-peak@32: 0.813570
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 10:59:51 [DEBUG] XGB validation: p-rmse: 0.223106	a-peak@32: 0.847094
2025-07-21 10:59:51 [DEBUG] XGB iter   0: tr-p-rmse: 0.443738	tr-a-peak@32: 0.963784	tr-rmse: 0.336591	tr-rmse: 0.336591
2025-07-21 10:59:51 [DEBUG] XGB iter  25: tr-p-rmse: 0.060128	tr-a-peak@32: 0.999199	tr-rmse: 0.432972	tr-rmse: 0.432972
2025-07-21 10:59:51 [DEBUG] XGB iter  50: tr-p-rmse: 0.060128	tr-a-peak@32: 0.999199	tr-rmse: 0.432972	tr-rmse: 0.432972
2025-07-21 10:59:51 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.06013	tr-a-peak@32:0.99920	tr-rmse:0.43297	tr-rmse:0.43297 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 11:06:32 [DEBUG] XGB validation: p-rmse: 0.211601	a-peak@32: 0.820081
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 11:13:16 [DEBUG] XGB validation: p-rmse: 0.264683	a-peak@32: 0.889751
2025-07-21 11:13:16 [DEBUG] XGB iter   0: tr-p-rmse: 0.436382	tr-a-peak@32: 0.939718	tr-rmse: 0.356747	tr-rmse: 0.356747
2025-07-21 11:13:17 [DEBUG] XGB iter  25: tr-p-rmse: 0.070523	tr-a-peak@32: 0.970925	tr-rmse: 0.451351	tr-rmse: 0.451351
2025-07-21 11:13:17 [DEBUG] XGB iter  50: tr-p-rmse: 0.070523	tr-a-peak@32: 0.970925	tr-rmse: 0.451351	tr-rmse: 0.451351
2025-07-21 11:13:17 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.07052	tr-a-peak@32:0.97093	tr-rmse:0.45135	tr-rmse:0.45135 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 11:20:18 [DEBUG] XGB validation: p-rmse: 0.201456	a-peak@32: 0.790032
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 11:26:54 [DEBUG] XGB validation: p-rmse: 0.123967	a-peak@32: 0.992412
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 11:33:27 [DEBUG] XGB validation: p-rmse: 0.177327	a-peak@32: 0.832798
2025-07-21 11:33:27 [DEBUG] XGB iter   0: tr-p-rmse: 0.419125	tr-a-peak@32: 0.921525	tr-rmse: 0.378692	tr-rmse: 0.378692
2025-07-21 11:33:27 [DEBUG] XGB iter  25: tr-p-rmse: 0.079524	tr-a-peak@32: 0.978076	tr-rmse: 0.471941	tr-rmse: 0.471941
2025-07-21 11:33:27 [DEBUG] XGB iter  50: tr-p-rmse: 0.079524	tr-a-peak@32: 0.978076	tr-rmse: 0.471941	tr-rmse: 0.471941
2025-07-21 11:33:27 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.07952	tr-a-peak@32:0.97808	tr-rmse:0.47194	tr-rmse:0.47194 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 11:40:06 [DEBUG] XGB validation: p-rmse: 0.182678	a-peak@32: 0.843770
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 11:46:40 [DEBUG] XGB validation: p-rmse: 0.173409	a-peak@32: 0.878499
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 11:53:15 [DEBUG] XGB validation: p-rmse: 0.134230	a-peak@32: 0.998389
2025-07-21 11:53:15 [DEBUG] XGB iter   0: tr-p-rmse: 0.412880	tr-a-peak@32: 0.939361	tr-rmse: 0.387325	tr-rmse: 0.387325
2025-07-21 11:53:15 [DEBUG] XGB iter  25: tr-p-rmse: 0.085097	tr-a-peak@32: 0.979353	tr-rmse: 0.480516	tr-rmse: 0.480516
2025-07-21 11:53:15 [DEBUG] XGB iter  50: tr-p-rmse: 0.085097	tr-a-peak@32: 0.979353	tr-rmse: 0.480516	tr-rmse: 0.480516
2025-07-21 11:53:15 [DEBUG] XGB iter  75: tr-p-rmse: 0.085097	tr-a-peak@32: 0.979353	tr-rmse: 0.480516	tr-rmse: 0.480516
2025-07-21 11:53:15 [DEBUG] XGB stopped. Best iteration: [25] tr-p-rmse:0.08510	tr-a-peak@32:0.97935	tr-rmse:0.48052	tr-rmse:0.48052 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 11:59:19 [DEBUG] XGB validation: p-rmse: 0.288326	a-peak@32: 1.000000
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K==== CUDA Kernel Source ====
#if defined(__CUDA_ARCH__) && (__CUDA_ARCH__ >= 530)
#include <cuda_fp16.h>
__device__ half max(half a, half b)
{
  return __hgt(__half(a), __half(b)) ? a : b;
}
__device__ half min(half a, half b)
{
  return __hlt(__half(a), __half(b)) ? a : b;
}
#else

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
typedef signed char int8_t;
typedef int int32_t;
typedef unsigned long long uint64_t;
typedef unsigned int uint32_t;

#define TVM_FORCE_INLINE inline __attribute__((always_inline))
#define TVM_XINLINE TVM_FORCE_INLINE __device__ __host__
#define TVM_ALIGNED(x) __attribute__ ((aligned(x)))
#define TVM_HALF_OPERATOR(RTYPE, OP)                              \
  TVM_XINLINE RTYPE operator OP (half a, half b) {                \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (half a, T b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE RTYPE operator OP (T a, half b) {                   \
    return RTYPE(float(a) OP float(b));                           \
  }

#define TVM_HALF_ASSIGNOP(AOP, OP)                                \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const T& a) {                    \
    return *this = half(float(*this) OP float(a));                \
  }                                                               \
  template<typename T>                                            \
  TVM_XINLINE half operator AOP (const volatile T& a) volatile {  \
    return *this = half(float(*this) OP float(a));                \
  }

class TVM_ALIGNED(2) half {
 public:
  uint16_t half_;

  static TVM_XINLINE half Binary(uint16_t value) {
    half res;
    res.half_ = value;
    return res;
  }

  TVM_XINLINE half() {}

  TVM_XINLINE half(const float& value) { constructor(value); }
  TVM_XINLINE explicit half(const double& value) { constructor(value); }
  TVM_XINLINE explicit half(const int8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint8_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const int32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint32_t& value) { constructor(value); }
  TVM_XINLINE explicit half(const long long& value) { constructor(value); }
  TVM_XINLINE explicit half(const uint64_t& value) { constructor(value); }

  TVM_XINLINE operator float() const {                          \
    return float(half2float(half_));                            \
  }                                                             \
  TVM_XINLINE operator float() const volatile {                 \
    return float(half2float(half_));                            \
  }


  TVM_HALF_ASSIGNOP(+=, +)
  TVM_HALF_ASSIGNOP(-=, -)
  TVM_HALF_ASSIGNOP(*=, *)
  TVM_HALF_ASSIGNOP(/=, /)

  TVM_XINLINE half operator+() {
    return *this;
  }

  TVM_XINLINE half operator-() {
    return half(-float(*this));
  }

  TVM_XINLINE half operator=(const half& a) {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) {
    return *this = half(a);
  }

  TVM_XINLINE half operator=(const half& a) volatile {
    half_ = a.half_;
    return a;
  }

  template<typename T>
  TVM_XINLINE half operator=(const T& a) volatile {
    return *this = half(a);
  }

 private:
  union Bits {
    float f;
    int32_t si;
    uint32_t ui;
  };

  static int const fp16FractionBits = 10;
  static int const fp32FractionBits = 23;
  static int32_t const fp32FractionMask = ~(~0u << fp32FractionBits);   // == 0x7fffff
  static int32_t const fp32HiddenBit = 1 << fp32FractionBits;   // == 0x800000
  static int const shift = fp32FractionBits - fp16FractionBits;   // == 13
  static int const shiftSign = 16;
  static int32_t const expAdjust = 127 - 15;   // exp32-127 = exp16-15, so exp16 = exp32 - (127-15)

  static int32_t const infN = 0x7F800000;   // flt32 infinity
  static int32_t const maxN = 0x477FFFFF;   // max flt32 that's a flt16 normal after >> by shift
  static int32_t const minN = 0x38800000;   // min flt16 normal as a flt32
  static int32_t const maxZ = 0x33000000;   // max fp32 number that's still rounded to zero in fp16
  static int32_t const signN = 0x80000000;  // flt32 sign bit

  static int32_t const infC = infN >> shift;
  static int32_t const nanN = (infC + 1) << shift;   // minimum flt16 nan as a flt32
  static int32_t const maxC = maxN >> shift;
  static int32_t const minC = minN >> shift;
  static int32_t const signC = signN >> shiftSign;  // flt16 sign bit

  static int32_t const mulN = 0x52000000;  // (1 << 23) / minN
  static int32_t const mulC = 0x33800000;  // minN / (1 << (23 - shift))

  static int32_t const subC = 0x003FF;  // max flt32 subnormal down shifted
  static int32_t const norC = 0x00400;  // min flt32 normal down shifted

  static int32_t const maxD = infC - maxC - 1;
  static int32_t const minD = minC - subC - 1;

  TVM_XINLINE uint16_t float2half(const float& value) const {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  // Same as above routine, except for addition of volatile keyword
  TVM_XINLINE uint16_t float2half(
    const volatile float& value) const volatile {
    Bits v;
    v.f = value;
    uint32_t sign = v.si & signN;    // grab sign bit
    v.si ^= sign;                    // clear sign bit from v
    sign >>= shiftSign;              // logical shift sign to fp16 position

    if (v.si <= maxZ) {
      // Handle eventual zeros here to ensure
      // vshift will not exceed 32 below.
      v.ui = 0;
    } else if (v.si < minN) {
      // Handle denorms
      uint32_t exp32 = v.ui >> fp32FractionBits;
      int32_t exp16 = exp32 - expAdjust;
      // If exp16 == 0 (just into the denorm range), then significant should be shifted right 1.
      // Smaller (so negative) exp16 values should result in greater right shifts.
      uint32_t vshift = 1 - exp16;
      uint32_t significand = fp32HiddenBit | (v.ui & fp32FractionMask);
      v.ui = significand >> vshift;
      v.ui += (v.ui & 0x3fff) != 0x1000 || (significand & 0x7ff) ? 0x1000 : 0;
    } else if (v.si <= maxN) {
      // Handle norms
      v.ui += (v.ui & 0x3fff) != 0x1000 ? 0x1000 : 0;
      v.ui -= expAdjust << fp32FractionBits;
    } else if (v.si <= infN) {
      v.si = infN;
    } else if (v.si < nanN) {
      v.si = nanN;
    }

    v.ui >>= shift;
    return sign | (v.ui & 0x7fff);
  }

  TVM_XINLINE float half2float(const uint16_t& value) const {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  TVM_XINLINE float half2float(
    const volatile uint16_t& value) const volatile {
    Bits v;
    v.ui = value;
    int32_t sign = v.si & signC;
    v.si ^= sign;
    sign <<= shiftSign;
    v.si ^= ((v.si + minD) ^ v.si) & -(v.si > subC);
    v.si ^= ((v.si + maxD) ^ v.si) & -(v.si > maxC);
    Bits s;
    s.si = mulC;
    s.f *= v.si;
    int32_t mask = -(norC > v.si);
    v.si <<= shift;
    v.si ^= (s.si ^ v.si) & mask;
    v.si |= sign;
    return v.f;
  }

  template<typename T>
  TVM_XINLINE void constructor(const T& value) {
    half_ = float2half(float(value));
  }
};

TVM_HALF_OPERATOR(half, +)
TVM_HALF_OPERATOR(half, -)
TVM_HALF_OPERATOR(half, *)
TVM_HALF_OPERATOR(half, /)
TVM_HALF_OPERATOR(bool, >)
TVM_HALF_OPERATOR(bool, <)
TVM_HALF_OPERATOR(bool, >=)
TVM_HALF_OPERATOR(bool, <=)

TVM_XINLINE half __float2half_rn(const float a) {
  return half(a);
}
#endif


// Pack two half values.
static inline __device__ __host__ unsigned
__pack_half2(const half x, const half y) {
  unsigned v0 = *((unsigned short *)&x);
  unsigned v1 = *((unsigned short *)&y);
  return (v1 << 16) | v0;
}

#define CUDA_UNSUPPORTED_HALF_MATH_BINARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x, half y) {   \
  float tmp_x = __half2float(x);                                          \
  float tmp_y = __half2float(y);                                          \
  float result = FP32_MATH_NAME(tmp_x, tmp_y);                            \
  return __float2half(result);                                            \
}

#define CUDA_UNSUPPORTED_HALF_MATH_UNARY(HALF_MATH_NAME, FP32_MATH_NAME) \
static inline __device__ __host__ half HALF_MATH_NAME(half x) {          \
  float tmp_x = __half2float(x);                                         \
  float result = FP32_MATH_NAME(tmp_x);                                  \
  return __float2half(result);                                           \
}

// Some fp16 math functions are not supported in cuda_fp16.h,
// so we define them here to make sure the generated CUDA code
// is valid.
#if defined(__CUDA_ARCH__)
#if (__CUDA_ARCH__ >= 530)
CUDA_UNSUPPORTED_HALF_MATH_BINARY(hpow, powf)
#if ((__CUDACC_VER_MAJOR__ < 12) || ((__CUDACC_VER_MAJOR__ == 12) && (__CUDACC_VER_MINOR__ < 8)))
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htanh, tanhf)
#endif
CUDA_UNSUPPORTED_HALF_MATH_UNARY(htan, tanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hatan, atanf)
CUDA_UNSUPPORTED_HALF_MATH_UNARY(herf, erf)
#else
CUDA_UNSUPPORTED_HALF_MATH_UNARY(hexp, exp)
#endif
#endif

#undef CUDA_UNSUPPORTED_HALF_MATH_BINARY
#undef CUDA_UNSUPPORTED_HALF_MATH_UNARY

struct __align__(8) half4 {
  __half x, y, z, w;
  __host__ __device__ half4() : x(__half(0)), y(__half(0)), z(__half(0)), w(__half(0)) {}
  __host__ __device__ half4(__half x, __half y, __half z, __half w) : x(x), y(y), z(z), w(w) {}

};
__host__ __device__ half4 make_half4(__half x, __half y, __half z, __half w) {
    return half4(x, y, z, w);
}
#include <mma.h>

#if (((__CUDACC_VER_MAJOR__ == 11) && (__CUDACC_VER_MINOR__ >= 4)) || \
     (__CUDACC_VER_MAJOR__ > 11))
#define TVM_ENABLE_L2_PREFETCH 1
#else
#define TVM_ENABLE_L2_PREFETCH 0
#endif

#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void __launch_bounds__(256) main_kernel(float* __restrict__ bias, float* __restrict__ bn_offset, float* __restrict__ bn_scale, float* __restrict__ compute, half* __restrict__ data, half* __restrict__ kernel);
extern "C" __global__ void __launch_bounds__(256) main_kernel(float* __restrict__ bias, float* __restrict__ bn_offset, float* __restrict__ bn_scale, float* __restrict__ compute, half* __restrict__ data, half* __restrict__ kernel) {
  extern __shared__ uchar buf_dyn_shmem[];
  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 16, 16, 16, half> Conv2dOutput_reindex_shared_dyn_wmma_accumulator[2];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 16, 16, 16, half, nvcuda::wmma::row_major> PaddedInput_reindex_pad_shared_dyn_wmma_matrix_a[2];
  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 16, 16, 16, half, nvcuda::wmma::row_major> kernel_reindex_pad_shared_dyn_wmma_matrix_b[1];
  for (int ax0_0_4_init = 0; ax0_0_4_init < 2; ++ax0_0_4_init) {
    nvcuda::wmma::fill_fragment(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[ax0_0_4_init], 0.000000e+00f);
  }
  for (int ax2_0_0 = 0; ax2_0_0 < 5; ++ax2_0_0) {
    __syncthreads();
    for (int ax0_ax1_fused_0 = 0; ax0_ax1_fused_0 < 8; ++ax0_ax1_fused_0) {
      half condval;
      if ((((((((ax2_0_0 * 32) + ((int)threadIdx.x)) < 147) && (3 <= (((((int)blockIdx.y) * 32) + ((((((int)blockIdx.x) * 4) + (ax0_ax1_fused_0 >> 1)) / 7) * 2)) + (((ax2_0_0 * 32) + ((int)threadIdx.x)) / 21)))) && ((((((int)blockIdx.y) * 32) + ((((((int)blockIdx.x) * 4) + (ax0_ax1_fused_0 >> 1)) / 7) * 2)) + (((ax2_0_0 * 32) + ((int)threadIdx.x)) / 21)) < 227)) && (3 <= ((((((((int)blockIdx.x) * 64) + (ax0_ax1_fused_0 * 8)) + ((int)threadIdx.y)) % 112) * 2) + ((((ax2_0_0 * 11) + ((int)threadIdx.x)) % 21) / 3)))) && (((((((((int)blockIdx.x) * 64) + (ax0_ax1_fused_0 * 8)) + ((int)threadIdx.y)) % 112) * 2) + ((((ax2_0_0 * 11) + ((int)threadIdx.x)) % 21) / 3)) < 227))) {
        condval = data[(((((((((int)blockIdx.y) * 21504) + ((((((int)blockIdx.x) * 4) + (ax0_ax1_fused_0 >> 1)) / 7) * 1344)) + ((((ax2_0_0 * 32) + ((int)threadIdx.x)) / 21) * 672)) + (((((((int)blockIdx.x) * 64) + (ax0_ax1_fused_0 * 8)) + ((int)threadIdx.y)) % 112) * 6)) + (((((ax2_0_0 * 11) + ((int)threadIdx.x)) % 21) / 3) * 3)) + (((ax2_0_0 * 2) + ((int)threadIdx.x)) % 3)) - 2025)];
      } else {
        condval = __float2half_rn(0.000000e+00f);
      }
      ((half*)buf_dyn_shmem)[((((ax0_ax1_fused_0 * 320) + (((int)threadIdx.y) * 40)) + ((int)threadIdx.x)) + 2304)] = condval;
    }
    uint4 condval_1;
    if (((((ax2_0_0 * 32) + (((int)threadIdx.y) * 4)) + (((int)threadIdx.x) >> 3)) < 147)) {
      condval_1 = *(uint4*)(kernel + (((ax2_0_0 * 2048) + (((int)threadIdx.y) * 256)) + (((int)threadIdx.x) * 8)));
    } else {
      condval_1 = make_uint4(__pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)), __pack_half2(__float2half_rn(0.000000e+00f), __float2half_rn(0.000000e+00f)));
    }
    *(uint4*)(((half*)buf_dyn_shmem) + (((((int)threadIdx.y) * 288) + ((((int)threadIdx.x) >> 3) * 72)) + ((((int)threadIdx.x) & 7) * 8))) = condval_1;
    __syncthreads();
    for (int ax2_0_1 = 0; ax2_0_1 < 2; ++ax2_0_1) {
      for (int ax0_0 = 0; ax0_0 < 2; ++ax0_0) {
        nvcuda::wmma::load_matrix_sync(PaddedInput_reindex_pad_shared_dyn_wmma_matrix_a[ax0_0], (&(((half*)buf_dyn_shmem)[(((((((int)threadIdx.y) >> 2) * 1280) + (ax0_0 * 640)) + (ax2_0_1 * 16)) + 2304)])), 40);
      }
      nvcuda::wmma::load_matrix_sync(kernel_reindex_pad_shared_dyn_wmma_matrix_b[0], (&(((half*)buf_dyn_shmem)[((ax2_0_1 * 1152) + ((((int)threadIdx.y) & 3) * 16))])), 72);
      for (int ax0_0_4 = 0; ax0_0_4 < 2; ++ax0_0_4) {
        nvcuda::wmma::mma_sync(Conv2dOutput_reindex_shared_dyn_wmma_accumulator[ax0_0_4], PaddedInput_reindex_pad_shared_dyn_wmma_matrix_a[ax0_0_4], kernel_reindex_pad_shared_dyn_wmma_matrix_b[0], Conv2dOutput_reindex_shared_dyn_wmma_accumulator[ax0_0_4]);
      }
    }
  }
  for (int ax2 = 0; ax2 < 2; ++ax2) {
    __syncthreads();
    nvcuda::wmma::store_matrix_sync((&(((half*)buf_dyn_shmem)[(((int)threadIdx.y) * 256)])), Conv2dOutput_reindex_shared_dyn_wmma_accumulator[ax2], 16, nvcuda::wmma::mem_row_major);
    __syncthreads();
    for (int ax0_ax1_ax3_ax4_ax5_fused_0 = 0; ax0_ax1_ax3_ax4_ax5_fused_0 < 4; ++ax0_ax1_ax3_ax4_ax5_fused_0) {
      float2 __1;
        float2 __2;
          float2 __3;
            float2 __4;
              float2 __5;
              half2 v_ = *(half2*)(((half*)buf_dyn_shmem) + (((ax0_ax1_ax3_ax4_ax5_fused_0 * 512) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 2)));
              __5.x = (float)(v_.x);
              __5.y = (float)(v_.y);
              float2 v__1 = *(float2*)(bias + ((((ax0_ax1_ax3_ax4_ax5_fused_0 & 1) * 32) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
              __4.x = (__5.x+v__1.x);
              __4.y = (__5.y+v__1.y);
            float2 v__2 = *(float2*)(bn_scale + ((((ax0_ax1_ax3_ax4_ax5_fused_0 & 1) * 32) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
            __3.x = (__4.x*v__2.x);
            __3.y = (__4.y*v__2.y);
          float2 v__3 = *(float2*)(bn_offset + ((((ax0_ax1_ax3_ax4_ax5_fused_0 & 1) * 32) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2)));
          __2.x = (__3.x+v__3.x);
          __2.y = (__3.y+v__3.y);
        float2 v__4 = make_float2(0.000000e+00f, 0.000000e+00f);
        __1.x = max(__2.x, v__4.x);
        __1.y = max(__2.y, v__4.y);
      *(float2*)(compute + (((((((((((int)blockIdx.y) * 114688) + (((int)blockIdx.x) * 4096)) + ((ax0_ax1_ax3_ax4_ax5_fused_0 >> 1) * 2048)) + (ax2 * 1024)) + ((((int)threadIdx.y) & 3) * 256)) + ((((int)threadIdx.x) >> 3) * 64)) + ((ax0_ax1_ax3_ax4_ax5_fused_0 & 1) * 32)) + ((((int)threadIdx.y) >> 2) * 16)) + ((((int)threadIdx.x) & 7) * 2))) = __1;
    }
  }
}


The time of CBR is 0.015 ms
2025-07-21 11:59:20 [INFO] Logging directory: /tmp/tmpysogk6ym/logs
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:01:52 [DEBUG] XGB iter   0: tr-p-rmse: 0.498778	tr-a-peak@32: 1.000000	tr-rmse: 0.324911	tr-rmse: 0.324911
2025-07-21 12:01:52 [DEBUG] XGB iter  25: tr-p-rmse: 0.034378	tr-a-peak@32: 1.000000	tr-rmse: 0.406762	tr-rmse: 0.406762
2025-07-21 12:01:52 [DEBUG] XGB iter  50: tr-p-rmse: 0.034378	tr-a-peak@32: 1.000000	tr-rmse: 0.406762	tr-rmse: 0.406762
2025-07-21 12:01:52 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.03438	tr-a-peak@32:1.00000	tr-rmse:0.40676	tr-rmse:0.40676 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:04:11 [DEBUG] XGB validation: p-rmse: 0.173685	a-peak@32: 0.981943
2025-07-21 12:04:11 [DEBUG] XGB iter   0: tr-p-rmse: 0.477652	tr-a-peak@32: 0.989303	tr-rmse: 0.295335	tr-rmse: 0.295335
2025-07-21 12:04:11 [DEBUG] XGB iter  25: tr-p-rmse: 0.031322	tr-a-peak@32: 1.000000	tr-rmse: 0.386624	tr-rmse: 0.386624
2025-07-21 12:04:11 [DEBUG] XGB iter  50: tr-p-rmse: 0.031322	tr-a-peak@32: 1.000000	tr-rmse: 0.386624	tr-rmse: 0.386624
2025-07-21 12:04:11 [DEBUG] XGB stopped. Best iteration: [18] tr-p-rmse:0.03132	tr-a-peak@32:1.00000	tr-rmse:0.38662	tr-rmse:0.38662 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:06:58 [DEBUG] XGB validation: p-rmse: 0.277172	a-peak@32: 0.985080
2025-07-21 12:06:58 [DEBUG] XGB iter   0: tr-p-rmse: 0.465628	tr-a-peak@32: 0.842687	tr-rmse: 0.311549	tr-rmse: 0.311549
2025-07-21 12:06:58 [DEBUG] XGB iter  25: tr-p-rmse: 0.041558	tr-a-peak@32: 0.998899	tr-rmse: 0.402591	tr-rmse: 0.402591
2025-07-21 12:06:58 [DEBUG] XGB iter  50: tr-p-rmse: 0.041558	tr-a-peak@32: 0.998899	tr-rmse: 0.402591	tr-rmse: 0.402591
2025-07-21 12:06:58 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.04156	tr-a-peak@32:0.99890	tr-rmse:0.40259	tr-rmse:0.40259 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:09:43 [DEBUG] XGB validation: p-rmse: 0.315363	a-peak@32: 0.991853
2025-07-21 12:09:43 [DEBUG] XGB iter   0: tr-p-rmse: 0.457081	tr-a-peak@32: 0.919125	tr-rmse: 0.325753	tr-rmse: 0.325753
2025-07-21 12:09:43 [DEBUG] XGB iter  25: tr-p-rmse: 0.062750	tr-a-peak@32: 0.994854	tr-rmse: 0.417312	tr-rmse: 0.417312
2025-07-21 12:09:43 [DEBUG] XGB iter  50: tr-p-rmse: 0.062750	tr-a-peak@32: 0.994854	tr-rmse: 0.417312	tr-rmse: 0.417312
2025-07-21 12:09:43 [DEBUG] XGB stopped. Best iteration: [19] tr-p-rmse:0.06275	tr-a-peak@32:0.99485	tr-rmse:0.41731	tr-rmse:0.41731 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:12:27 [DEBUG] XGB validation: p-rmse: 0.247975	a-peak@32: 0.800797
2025-07-21 12:12:27 [DEBUG] XGB iter   0: tr-p-rmse: 0.447087	tr-a-peak@32: 0.656472	tr-rmse: 0.313895	tr-rmse: 0.313895
2025-07-21 12:12:27 [DEBUG] XGB iter  25: tr-p-rmse: 0.074036	tr-a-peak@32: 0.999560	tr-rmse: 0.411570	tr-rmse: 0.411570
2025-07-21 12:12:27 [DEBUG] XGB iter  50: tr-p-rmse: 0.074036	tr-a-peak@32: 0.999560	tr-rmse: 0.411570	tr-rmse: 0.411570
2025-07-21 12:12:27 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.07404	tr-a-peak@32:0.99956	tr-rmse:0.41157	tr-rmse:0.41157 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:15:18 [DEBUG] XGB validation: p-rmse: 0.189462	a-peak@32: 0.895173
2025-07-21 12:15:18 [DEBUG] XGB iter   0: tr-p-rmse: 0.462358	tr-a-peak@32: 0.828994	tr-rmse: 0.280308	tr-rmse: 0.280308
2025-07-21 12:15:18 [DEBUG] XGB iter  25: tr-p-rmse: 0.076889	tr-a-peak@32: 0.987266	tr-rmse: 0.381351	tr-rmse: 0.381351
2025-07-21 12:15:18 [DEBUG] XGB iter  50: tr-p-rmse: 0.076889	tr-a-peak@32: 0.987266	tr-rmse: 0.381351	tr-rmse: 0.381351
2025-07-21 12:15:18 [DEBUG] XGB stopped. Best iteration: [20] tr-p-rmse:0.07689	tr-a-peak@32:0.98727	tr-rmse:0.38135	tr-rmse:0.38135 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:18:02 [DEBUG] XGB validation: p-rmse: 0.357008	a-peak@32: 0.862932
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:20:49 [DEBUG] XGB validation: p-rmse: 0.274272	a-peak@32: 0.955163
2025-07-21 12:20:49 [DEBUG] XGB iter   0: tr-p-rmse: 0.460626	tr-a-peak@32: 0.965420	tr-rmse: 0.261785	tr-rmse: 0.261785
2025-07-21 12:20:49 [DEBUG] XGB iter  25: tr-p-rmse: 0.082001	tr-a-peak@32: 0.991692	tr-rmse: 0.367743	tr-rmse: 0.367743
2025-07-21 12:20:49 [DEBUG] XGB iter  50: tr-p-rmse: 0.082001	tr-a-peak@32: 0.991692	tr-rmse: 0.367743	tr-rmse: 0.367743
2025-07-21 12:20:49 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.08200	tr-a-peak@32:0.99169	tr-rmse:0.36774	tr-rmse:0.36774 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:23:37 [DEBUG] XGB validation: p-rmse: 0.213033	a-peak@32: 0.999731
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:26:23 [DEBUG] XGB validation: p-rmse: 0.154129	a-peak@32: 0.989825
2025-07-21 12:26:23 [DEBUG] XGB iter   0: tr-p-rmse: 0.457116	tr-a-peak@32: 0.550940	tr-rmse: 0.256433	tr-rmse: 0.256433
2025-07-21 12:26:23 [DEBUG] XGB iter  25: tr-p-rmse: 0.087043	tr-a-peak@32: 0.946543	tr-rmse: 0.364977	tr-rmse: 0.364977
2025-07-21 12:26:23 [DEBUG] XGB iter  50: tr-p-rmse: 0.087043	tr-a-peak@32: 0.946543	tr-rmse: 0.364978	tr-rmse: 0.364978
2025-07-21 12:26:23 [DEBUG] XGB stopped. Best iteration: [24] tr-p-rmse:0.08704	tr-a-peak@32:0.94654	tr-rmse:0.36498	tr-rmse:0.36498 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:29:10 [DEBUG] XGB validation: p-rmse: 0.224656	a-peak@32: 0.985044
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:31:55 [DEBUG] XGB validation: p-rmse: 0.153395	a-peak@32: 0.991571
2025-07-21 12:31:55 [DEBUG] XGB iter   0: tr-p-rmse: 0.465042	tr-a-peak@32: 0.950680	tr-rmse: 0.270898	tr-rmse: 0.270898
2025-07-21 12:31:55 [DEBUG] XGB iter  25: tr-p-rmse: 0.092901	tr-a-peak@32: 0.986821	tr-rmse: 0.373500	tr-rmse: 0.373500
2025-07-21 12:31:55 [DEBUG] XGB iter  50: tr-p-rmse: 0.092901	tr-a-peak@32: 0.986821	tr-rmse: 0.373500	tr-rmse: 0.373500
2025-07-21 12:31:55 [DEBUG] XGB stopped. Best iteration: [22] tr-p-rmse:0.09290	tr-a-peak@32:0.98682	tr-rmse:0.37350	tr-rmse:0.37350 
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K2025-07-21 12:34:43 [DEBUG] XGB validation: p-rmse: 0.328333	a-peak@32: 0.949125
[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K[2K